
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000033fe  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000be  00800060  000033fe  00003492  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080011e  0080011e  00003550  2**0
                  ALLOC
  3 .stab         00002f70  00000000  00000000  00003550  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001185  00000000  00000000  000064c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007645  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007785  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000078f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000953e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a429  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b1d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b5c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bd93  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 56 17 	jmp	0x2eac	; 0x2eac <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 89 17 	jmp	0x2f12	; 0x2f12 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ef       	ldi	r30, 0xFE	; 254
      68:	f3 e3       	ldi	r31, 0x33	; 51
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 31       	cpi	r26, 0x1E	; 30
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e1       	ldi	r26, 0x1E	; 30
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 33       	cpi	r26, 0x30	; 48
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 fd 19 	jmp	0x33fa	; 0x33fa <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a8 e0       	ldi	r26, 0x08	; 8
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 81 19 	jmp	0x3302	; 0x3302 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	88 e0       	ldi	r24, 0x08	; 8
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 9d 19 	jmp	0x333a	; 0x333a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 8d 19 	jmp	0x331a	; 0x331a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 a9 19 	jmp	0x3352	; 0x3352 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 91 19 	jmp	0x3322	; 0x3322 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 ad 19 	jmp	0x335a	; 0x335a <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:
 *******************************************************************************/



int main(void)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	69 97       	sbiw	r28, 0x19	; 25
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	UART_ConfigType UART_Configs={_8_bit,no_parity,_1_bit,9600};
     b5a:	9e 01       	movw	r18, r28
     b5c:	2f 5f       	subi	r18, 0xFF	; 255
     b5e:	3f 4f       	sbci	r19, 0xFF	; 255
     b60:	39 8b       	std	Y+17, r19	; 0x11
     b62:	28 8b       	std	Y+16, r18	; 0x10
     b64:	86 e1       	ldi	r24, 0x16	; 22
     b66:	91 e0       	ldi	r25, 0x01	; 1
     b68:	9b 8b       	std	Y+19, r25	; 0x13
     b6a:	8a 8b       	std	Y+18, r24	; 0x12
     b6c:	97 e0       	ldi	r25, 0x07	; 7
     b6e:	9c 8b       	std	Y+20, r25	; 0x14
     b70:	ea 89       	ldd	r30, Y+18	; 0x12
     b72:	fb 89       	ldd	r31, Y+19	; 0x13
     b74:	00 80       	ld	r0, Z
     b76:	2a 89       	ldd	r18, Y+18	; 0x12
     b78:	3b 89       	ldd	r19, Y+19	; 0x13
     b7a:	2f 5f       	subi	r18, 0xFF	; 255
     b7c:	3f 4f       	sbci	r19, 0xFF	; 255
     b7e:	3b 8b       	std	Y+19, r19	; 0x13
     b80:	2a 8b       	std	Y+18, r18	; 0x12
     b82:	e8 89       	ldd	r30, Y+16	; 0x10
     b84:	f9 89       	ldd	r31, Y+17	; 0x11
     b86:	00 82       	st	Z, r0
     b88:	28 89       	ldd	r18, Y+16	; 0x10
     b8a:	39 89       	ldd	r19, Y+17	; 0x11
     b8c:	2f 5f       	subi	r18, 0xFF	; 255
     b8e:	3f 4f       	sbci	r19, 0xFF	; 255
     b90:	39 8b       	std	Y+17, r19	; 0x11
     b92:	28 8b       	std	Y+16, r18	; 0x10
     b94:	3c 89       	ldd	r19, Y+20	; 0x14
     b96:	31 50       	subi	r19, 0x01	; 1
     b98:	3c 8b       	std	Y+20, r19	; 0x14
     b9a:	8c 89       	ldd	r24, Y+20	; 0x14
     b9c:	88 23       	and	r24, r24
     b9e:	41 f7       	brne	.-48     	; 0xb70 <main+0x2a>
	Timer1_ConfigType TIMER_Configs={0,1000,F_CPU_1024,CTC_MODE};
     ba0:	fe 01       	movw	r30, r28
     ba2:	38 96       	adiw	r30, 0x08	; 8
     ba4:	fe 8b       	std	Y+22, r31	; 0x16
     ba6:	ed 8b       	std	Y+21, r30	; 0x15
     ba8:	20 e1       	ldi	r18, 0x10	; 16
     baa:	31 e0       	ldi	r19, 0x01	; 1
     bac:	38 8f       	std	Y+24, r19	; 0x18
     bae:	2f 8b       	std	Y+23, r18	; 0x17
     bb0:	36 e0       	ldi	r19, 0x06	; 6
     bb2:	39 8f       	std	Y+25, r19	; 0x19
     bb4:	ef 89       	ldd	r30, Y+23	; 0x17
     bb6:	f8 8d       	ldd	r31, Y+24	; 0x18
     bb8:	00 80       	ld	r0, Z
     bba:	2f 89       	ldd	r18, Y+23	; 0x17
     bbc:	38 8d       	ldd	r19, Y+24	; 0x18
     bbe:	2f 5f       	subi	r18, 0xFF	; 255
     bc0:	3f 4f       	sbci	r19, 0xFF	; 255
     bc2:	38 8f       	std	Y+24, r19	; 0x18
     bc4:	2f 8b       	std	Y+23, r18	; 0x17
     bc6:	ed 89       	ldd	r30, Y+21	; 0x15
     bc8:	fe 89       	ldd	r31, Y+22	; 0x16
     bca:	00 82       	st	Z, r0
     bcc:	2d 89       	ldd	r18, Y+21	; 0x15
     bce:	3e 89       	ldd	r19, Y+22	; 0x16
     bd0:	2f 5f       	subi	r18, 0xFF	; 255
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	3e 8b       	std	Y+22, r19	; 0x16
     bd6:	2d 8b       	std	Y+21, r18	; 0x15
     bd8:	39 8d       	ldd	r19, Y+25	; 0x19
     bda:	31 50       	subi	r19, 0x01	; 1
     bdc:	39 8f       	std	Y+25, r19	; 0x19
     bde:	89 8d       	ldd	r24, Y+25	; 0x19
     be0:	88 23       	and	r24, r24
     be2:	41 f7       	brne	.-48     	; 0xbb4 <main+0x6e>
	Timer1_init(&TIMER_Configs);
     be4:	ce 01       	movw	r24, r28
     be6:	08 96       	adiw	r24, 0x08	; 8
     be8:	0e 94 bc 17 	call	0x2f78	; 0x2f78 <Timer1_init>
	LCD_init();
     bec:	0e 94 2b 12 	call	0x2456	; 0x2456 <LCD_init>
	UART_init(&UART_Configs);
     bf0:	ce 01       	movw	r24, r28
     bf2:	01 96       	adiw	r24, 0x01	; 1
     bf4:	0e 94 34 18 	call	0x3068	; 0x3068 <UART_init>
	passwor_setting();
     bf8:	0e 94 25 06 	call	0xc4a	; 0xc4a <passwor_setting>
	LCD_clearScreen();
     bfc:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
	{



		do{
			main_options();
     c00:	0e 94 d9 08 	call	0x11b2	; 0x11b2 <main_options>
			g_option=KEYPAD_getPressedKey();
     c04:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     c08:	80 93 2f 01 	sts	0x012F, r24


		}while(g_option!='-'&&g_option!='+');
     c0c:	80 91 2f 01 	lds	r24, 0x012F
     c10:	8d 32       	cpi	r24, 0x2D	; 45
     c12:	21 f0       	breq	.+8      	; 0xc1c <main+0xd6>
     c14:	80 91 2f 01 	lds	r24, 0x012F
     c18:	8b 32       	cpi	r24, 0x2B	; 43
     c1a:	91 f7       	brne	.-28     	; 0xc00 <main+0xba>


		switch (g_option)
     c1c:	80 91 2f 01 	lds	r24, 0x012F
     c20:	e8 2f       	mov	r30, r24
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	ff 87       	std	Y+15, r31	; 0x0f
     c26:	ee 87       	std	Y+14, r30	; 0x0e
     c28:	2e 85       	ldd	r18, Y+14	; 0x0e
     c2a:	3f 85       	ldd	r19, Y+15	; 0x0f
     c2c:	2b 32       	cpi	r18, 0x2B	; 43
     c2e:	31 05       	cpc	r19, r1
     c30:	31 f0       	breq	.+12     	; 0xc3e <main+0xf8>
     c32:	8e 85       	ldd	r24, Y+14	; 0x0e
     c34:	9f 85       	ldd	r25, Y+15	; 0x0f
     c36:	8d 32       	cpi	r24, 0x2D	; 45
     c38:	91 05       	cpc	r25, r1
     c3a:	21 f0       	breq	.+8      	; 0xc44 <main+0xfe>
     c3c:	e1 cf       	rjmp	.-62     	; 0xc00 <main+0xba>
		{
		case'+': open_door();
     c3e:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <open_door>
     c42:	de cf       	rjmp	.-68     	; 0xc00 <main+0xba>


		break;
		case'-':Change_pass();
     c44:	0e 94 44 0b 	call	0x1688	; 0x1688 <Change_pass>
     c48:	db cf       	rjmp	.-74     	; 0xc00 <main+0xba>

00000c4a <passwor_setting>:
 */



void passwor_setting(void)
{
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	df 93       	push	r29
     c50:	cf 93       	push	r28
     c52:	cd b7       	in	r28, 0x3d	; 61
     c54:	de b7       	in	r29, 0x3e	; 62
     c56:	e8 97       	sbiw	r28, 0x38	; 56
     c58:	0f b6       	in	r0, 0x3f	; 63
     c5a:	f8 94       	cli
     c5c:	de bf       	out	0x3e, r29	; 62
     c5e:	0f be       	out	0x3f, r0	; 63
     c60:	cd bf       	out	0x3d, r28	; 61

	do{
		password_1[0]=0;
     c62:	10 92 23 01 	sts	0x0123, r1
		password_2[0]=0;
     c66:	10 92 2a 01 	sts	0x012A, r1
		g_matching_flag=0;
     c6a:	10 92 29 01 	sts	0x0129, r1

		LCD_displayStringRowColumn(0, 0, "PLZ Enter the");
     c6e:	20 e6       	ldi	r18, 0x60	; 96
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	80 e0       	ldi	r24, 0x00	; 0
     c74:	60 e0       	ldi	r22, 0x00	; 0
     c76:	a9 01       	movw	r20, r18
     c78:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
     c7c:	81 e0       	ldi	r24, 0x01	; 1
     c7e:	60 e0       	ldi	r22, 0x00	; 0
     c80:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <LCD_moveCursor>
		LCD_displayStringRowColumn(1, 0, "New Pass:");
     c84:	2e e6       	ldi	r18, 0x6E	; 110
     c86:	30 e0       	ldi	r19, 0x00	; 0
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	a9 01       	movw	r20, r18
     c8e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
     c92:	99 c0       	rjmp	.+306    	; 0xdc6 <passwor_setting+0x17c>



		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
     c94:	10 92 28 01 	sts	0x0128, r1
     c98:	91 c0       	rjmp	.+290    	; 0xdbc <passwor_setting+0x172>
			{
				password_1[i]=KEYPAD_getPressedKey();
     c9a:	80 91 28 01 	lds	r24, 0x0128
     c9e:	08 2f       	mov	r16, r24
     ca0:	10 e0       	ldi	r17, 0x00	; 0
     ca2:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     ca6:	f8 01       	movw	r30, r16
     ca8:	ed 5d       	subi	r30, 0xDD	; 221
     caa:	fe 4f       	sbci	r31, 0xFE	; 254
     cac:	80 83       	st	Z, r24
				if(KEYPAD_getPressedKey()<=9 && KEYPAD_getPressedKey()>=0)
     cae:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     cb2:	8a 30       	cpi	r24, 0x0A	; 10
     cb4:	08 f0       	brcs	.+2      	; 0xcb8 <passwor_setting+0x6e>
     cb6:	78 c0       	rjmp	.+240    	; 0xda8 <passwor_setting+0x15e>
     cb8:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
				{
					LCD_displayCharacter('*');
     cbc:	8a e2       	ldi	r24, 0x2A	; 42
     cbe:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_displayCharacter>
     cc2:	80 e0       	ldi	r24, 0x00	; 0
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	aa ef       	ldi	r26, 0xFA	; 250
     cc8:	b3 e4       	ldi	r27, 0x43	; 67
     cca:	8d ab       	std	Y+53, r24	; 0x35
     ccc:	9e ab       	std	Y+54, r25	; 0x36
     cce:	af ab       	std	Y+55, r26	; 0x37
     cd0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cd2:	6d a9       	ldd	r22, Y+53	; 0x35
     cd4:	7e a9       	ldd	r23, Y+54	; 0x36
     cd6:	8f a9       	ldd	r24, Y+55	; 0x37
     cd8:	98 ad       	ldd	r25, Y+56	; 0x38
     cda:	20 e0       	ldi	r18, 0x00	; 0
     cdc:	30 e0       	ldi	r19, 0x00	; 0
     cde:	4a e7       	ldi	r20, 0x7A	; 122
     ce0:	53 e4       	ldi	r21, 0x43	; 67
     ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce6:	dc 01       	movw	r26, r24
     ce8:	cb 01       	movw	r24, r22
     cea:	89 ab       	std	Y+49, r24	; 0x31
     cec:	9a ab       	std	Y+50, r25	; 0x32
     cee:	ab ab       	std	Y+51, r26	; 0x33
     cf0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     cf2:	69 a9       	ldd	r22, Y+49	; 0x31
     cf4:	7a a9       	ldd	r23, Y+50	; 0x32
     cf6:	8b a9       	ldd	r24, Y+51	; 0x33
     cf8:	9c a9       	ldd	r25, Y+52	; 0x34
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	40 e8       	ldi	r20, 0x80	; 128
     d00:	5f e3       	ldi	r21, 0x3F	; 63
     d02:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d06:	88 23       	and	r24, r24
     d08:	2c f4       	brge	.+10     	; 0xd14 <passwor_setting+0xca>
		__ticks = 1;
     d0a:	81 e0       	ldi	r24, 0x01	; 1
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	98 ab       	std	Y+48, r25	; 0x30
     d10:	8f a7       	std	Y+47, r24	; 0x2f
     d12:	3f c0       	rjmp	.+126    	; 0xd92 <passwor_setting+0x148>
	else if (__tmp > 65535)
     d14:	69 a9       	ldd	r22, Y+49	; 0x31
     d16:	7a a9       	ldd	r23, Y+50	; 0x32
     d18:	8b a9       	ldd	r24, Y+51	; 0x33
     d1a:	9c a9       	ldd	r25, Y+52	; 0x34
     d1c:	20 e0       	ldi	r18, 0x00	; 0
     d1e:	3f ef       	ldi	r19, 0xFF	; 255
     d20:	4f e7       	ldi	r20, 0x7F	; 127
     d22:	57 e4       	ldi	r21, 0x47	; 71
     d24:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     d28:	18 16       	cp	r1, r24
     d2a:	4c f5       	brge	.+82     	; 0xd7e <passwor_setting+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d2c:	6d a9       	ldd	r22, Y+53	; 0x35
     d2e:	7e a9       	ldd	r23, Y+54	; 0x36
     d30:	8f a9       	ldd	r24, Y+55	; 0x37
     d32:	98 ad       	ldd	r25, Y+56	; 0x38
     d34:	20 e0       	ldi	r18, 0x00	; 0
     d36:	30 e0       	ldi	r19, 0x00	; 0
     d38:	40 e2       	ldi	r20, 0x20	; 32
     d3a:	51 e4       	ldi	r21, 0x41	; 65
     d3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d40:	dc 01       	movw	r26, r24
     d42:	cb 01       	movw	r24, r22
     d44:	bc 01       	movw	r22, r24
     d46:	cd 01       	movw	r24, r26
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	98 ab       	std	Y+48, r25	; 0x30
     d52:	8f a7       	std	Y+47, r24	; 0x2f
     d54:	0f c0       	rjmp	.+30     	; 0xd74 <passwor_setting+0x12a>
     d56:	89 e1       	ldi	r24, 0x19	; 25
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	9e a7       	std	Y+46, r25	; 0x2e
     d5c:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d5e:	8d a5       	ldd	r24, Y+45	; 0x2d
     d60:	9e a5       	ldd	r25, Y+46	; 0x2e
     d62:	01 97       	sbiw	r24, 0x01	; 1
     d64:	f1 f7       	brne	.-4      	; 0xd62 <passwor_setting+0x118>
     d66:	9e a7       	std	Y+46, r25	; 0x2e
     d68:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d6a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d6c:	98 a9       	ldd	r25, Y+48	; 0x30
     d6e:	01 97       	sbiw	r24, 0x01	; 1
     d70:	98 ab       	std	Y+48, r25	; 0x30
     d72:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d74:	8f a5       	ldd	r24, Y+47	; 0x2f
     d76:	98 a9       	ldd	r25, Y+48	; 0x30
     d78:	00 97       	sbiw	r24, 0x00	; 0
     d7a:	69 f7       	brne	.-38     	; 0xd56 <passwor_setting+0x10c>
     d7c:	1a c0       	rjmp	.+52     	; 0xdb2 <passwor_setting+0x168>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d7e:	69 a9       	ldd	r22, Y+49	; 0x31
     d80:	7a a9       	ldd	r23, Y+50	; 0x32
     d82:	8b a9       	ldd	r24, Y+51	; 0x33
     d84:	9c a9       	ldd	r25, Y+52	; 0x34
     d86:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d8a:	dc 01       	movw	r26, r24
     d8c:	cb 01       	movw	r24, r22
     d8e:	98 ab       	std	Y+48, r25	; 0x30
     d90:	8f a7       	std	Y+47, r24	; 0x2f
     d92:	8f a5       	ldd	r24, Y+47	; 0x2f
     d94:	98 a9       	ldd	r25, Y+48	; 0x30
     d96:	9c a7       	std	Y+44, r25	; 0x2c
     d98:	8b a7       	std	Y+43, r24	; 0x2b
     d9a:	8b a5       	ldd	r24, Y+43	; 0x2b
     d9c:	9c a5       	ldd	r25, Y+44	; 0x2c
     d9e:	01 97       	sbiw	r24, 0x01	; 1
     da0:	f1 f7       	brne	.-4      	; 0xd9e <passwor_setting+0x154>
     da2:	9c a7       	std	Y+44, r25	; 0x2c
     da4:	8b a7       	std	Y+43, r24	; 0x2b
     da6:	05 c0       	rjmp	.+10     	; 0xdb2 <passwor_setting+0x168>
				}

				else

				{
					i--;
     da8:	80 91 28 01 	lds	r24, 0x0128
     dac:	81 50       	subi	r24, 0x01	; 1
     dae:	80 93 28 01 	sts	0x0128, r24



		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
     db2:	80 91 28 01 	lds	r24, 0x0128
     db6:	8f 5f       	subi	r24, 0xFF	; 255
     db8:	80 93 28 01 	sts	0x0128, r24
     dbc:	80 91 28 01 	lds	r24, 0x0128
     dc0:	85 30       	cpi	r24, 0x05	; 5
     dc2:	08 f4       	brcc	.+2      	; 0xdc6 <passwor_setting+0x17c>
     dc4:	6a cf       	rjmp	.-300    	; 0xc9a <passwor_setting+0x50>
		LCD_moveCursor(1, 0);
		LCD_displayStringRowColumn(1, 0, "New Pass:");



		while(KEYPAD_getPressedKey()!=ENTER_KEY){
     dc6:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     dca:	8d 30       	cpi	r24, 0x0D	; 13
     dcc:	09 f0       	breq	.+2      	; 0xdd0 <passwor_setting+0x186>
     dce:	62 cf       	rjmp	.-316    	; 0xc94 <passwor_setting+0x4a>



		}

		LCD_clearScreen();
     dd0:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Re_enter ");
     dd4:	28 e7       	ldi	r18, 0x78	; 120
     dd6:	30 e0       	ldi	r19, 0x00	; 0
     dd8:	80 e0       	ldi	r24, 0x00	; 0
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	a9 01       	movw	r20, r18
     dde:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		LCD_displayStringRowColumn(1, 0, "Pass:");
     de2:	26 e8       	ldi	r18, 0x86	; 134
     de4:	30 e0       	ldi	r19, 0x00	; 0
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	60 e0       	ldi	r22, 0x00	; 0
     dea:	a9 01       	movw	r20, r18
     dec:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>



		for(i=0;i<5;i++)
     df0:	10 92 28 01 	sts	0x0128, r1
     df4:	91 c0       	rjmp	.+290    	; 0xf18 <passwor_setting+0x2ce>
		{
			password_2[i]=KEYPAD_getPressedKey();
     df6:	80 91 28 01 	lds	r24, 0x0128
     dfa:	08 2f       	mov	r16, r24
     dfc:	10 e0       	ldi	r17, 0x00	; 0
     dfe:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     e02:	f8 01       	movw	r30, r16
     e04:	e6 5d       	subi	r30, 0xD6	; 214
     e06:	fe 4f       	sbci	r31, 0xFE	; 254
     e08:	80 83       	st	Z, r24
			if(KEYPAD_getPressedKey()<=9 && KEYPAD_getPressedKey()>=0){
     e0a:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
     e0e:	8a 30       	cpi	r24, 0x0A	; 10
     e10:	08 f0       	brcs	.+2      	; 0xe14 <passwor_setting+0x1ca>
     e12:	78 c0       	rjmp	.+240    	; 0xf04 <passwor_setting+0x2ba>
     e14:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
				LCD_displayCharacter('*');
     e18:	8a e2       	ldi	r24, 0x2A	; 42
     e1a:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_displayCharacter>
     e1e:	80 e0       	ldi	r24, 0x00	; 0
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	aa ef       	ldi	r26, 0xFA	; 250
     e24:	b3 e4       	ldi	r27, 0x43	; 67
     e26:	8f a3       	std	Y+39, r24	; 0x27
     e28:	98 a7       	std	Y+40, r25	; 0x28
     e2a:	a9 a7       	std	Y+41, r26	; 0x29
     e2c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e2e:	6f a1       	ldd	r22, Y+39	; 0x27
     e30:	78 a5       	ldd	r23, Y+40	; 0x28
     e32:	89 a5       	ldd	r24, Y+41	; 0x29
     e34:	9a a5       	ldd	r25, Y+42	; 0x2a
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	30 e0       	ldi	r19, 0x00	; 0
     e3a:	4a e7       	ldi	r20, 0x7A	; 122
     e3c:	53 e4       	ldi	r21, 0x43	; 67
     e3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e42:	dc 01       	movw	r26, r24
     e44:	cb 01       	movw	r24, r22
     e46:	8b a3       	std	Y+35, r24	; 0x23
     e48:	9c a3       	std	Y+36, r25	; 0x24
     e4a:	ad a3       	std	Y+37, r26	; 0x25
     e4c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     e4e:	6b a1       	ldd	r22, Y+35	; 0x23
     e50:	7c a1       	ldd	r23, Y+36	; 0x24
     e52:	8d a1       	ldd	r24, Y+37	; 0x25
     e54:	9e a1       	ldd	r25, Y+38	; 0x26
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	40 e8       	ldi	r20, 0x80	; 128
     e5c:	5f e3       	ldi	r21, 0x3F	; 63
     e5e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e62:	88 23       	and	r24, r24
     e64:	2c f4       	brge	.+10     	; 0xe70 <passwor_setting+0x226>
		__ticks = 1;
     e66:	81 e0       	ldi	r24, 0x01	; 1
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	9a a3       	std	Y+34, r25	; 0x22
     e6c:	89 a3       	std	Y+33, r24	; 0x21
     e6e:	3f c0       	rjmp	.+126    	; 0xeee <passwor_setting+0x2a4>
	else if (__tmp > 65535)
     e70:	6b a1       	ldd	r22, Y+35	; 0x23
     e72:	7c a1       	ldd	r23, Y+36	; 0x24
     e74:	8d a1       	ldd	r24, Y+37	; 0x25
     e76:	9e a1       	ldd	r25, Y+38	; 0x26
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	3f ef       	ldi	r19, 0xFF	; 255
     e7c:	4f e7       	ldi	r20, 0x7F	; 127
     e7e:	57 e4       	ldi	r21, 0x47	; 71
     e80:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e84:	18 16       	cp	r1, r24
     e86:	4c f5       	brge	.+82     	; 0xeda <passwor_setting+0x290>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e88:	6f a1       	ldd	r22, Y+39	; 0x27
     e8a:	78 a5       	ldd	r23, Y+40	; 0x28
     e8c:	89 a5       	ldd	r24, Y+41	; 0x29
     e8e:	9a a5       	ldd	r25, Y+42	; 0x2a
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	40 e2       	ldi	r20, 0x20	; 32
     e96:	51 e4       	ldi	r21, 0x41	; 65
     e98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e9c:	dc 01       	movw	r26, r24
     e9e:	cb 01       	movw	r24, r22
     ea0:	bc 01       	movw	r22, r24
     ea2:	cd 01       	movw	r24, r26
     ea4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	9a a3       	std	Y+34, r25	; 0x22
     eae:	89 a3       	std	Y+33, r24	; 0x21
     eb0:	0f c0       	rjmp	.+30     	; 0xed0 <passwor_setting+0x286>
     eb2:	89 e1       	ldi	r24, 0x19	; 25
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	98 a3       	std	Y+32, r25	; 0x20
     eb8:	8f 8f       	std	Y+31, r24	; 0x1f
     eba:	8f 8d       	ldd	r24, Y+31	; 0x1f
     ebc:	98 a1       	ldd	r25, Y+32	; 0x20
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <passwor_setting+0x274>
     ec2:	98 a3       	std	Y+32, r25	; 0x20
     ec4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ec6:	89 a1       	ldd	r24, Y+33	; 0x21
     ec8:	9a a1       	ldd	r25, Y+34	; 0x22
     eca:	01 97       	sbiw	r24, 0x01	; 1
     ecc:	9a a3       	std	Y+34, r25	; 0x22
     ece:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ed0:	89 a1       	ldd	r24, Y+33	; 0x21
     ed2:	9a a1       	ldd	r25, Y+34	; 0x22
     ed4:	00 97       	sbiw	r24, 0x00	; 0
     ed6:	69 f7       	brne	.-38     	; 0xeb2 <passwor_setting+0x268>
     ed8:	1a c0       	rjmp	.+52     	; 0xf0e <passwor_setting+0x2c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eda:	6b a1       	ldd	r22, Y+35	; 0x23
     edc:	7c a1       	ldd	r23, Y+36	; 0x24
     ede:	8d a1       	ldd	r24, Y+37	; 0x25
     ee0:	9e a1       	ldd	r25, Y+38	; 0x26
     ee2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ee6:	dc 01       	movw	r26, r24
     ee8:	cb 01       	movw	r24, r22
     eea:	9a a3       	std	Y+34, r25	; 0x22
     eec:	89 a3       	std	Y+33, r24	; 0x21
     eee:	89 a1       	ldd	r24, Y+33	; 0x21
     ef0:	9a a1       	ldd	r25, Y+34	; 0x22
     ef2:	9e 8f       	std	Y+30, r25	; 0x1e
     ef4:	8d 8f       	std	Y+29, r24	; 0x1d
     ef6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     ef8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     efa:	01 97       	sbiw	r24, 0x01	; 1
     efc:	f1 f7       	brne	.-4      	; 0xefa <passwor_setting+0x2b0>
     efe:	9e 8f       	std	Y+30, r25	; 0x1e
     f00:	8d 8f       	std	Y+29, r24	; 0x1d
     f02:	05 c0       	rjmp	.+10     	; 0xf0e <passwor_setting+0x2c4>

			}

			else
			{
				i--;
     f04:	80 91 28 01 	lds	r24, 0x0128
     f08:	81 50       	subi	r24, 0x01	; 1
     f0a:	80 93 28 01 	sts	0x0128, r24
		LCD_displayStringRowColumn(0, 0, "PLZ Re_enter ");
		LCD_displayStringRowColumn(1, 0, "Pass:");



		for(i=0;i<5;i++)
     f0e:	80 91 28 01 	lds	r24, 0x0128
     f12:	8f 5f       	subi	r24, 0xFF	; 255
     f14:	80 93 28 01 	sts	0x0128, r24
     f18:	80 91 28 01 	lds	r24, 0x0128
     f1c:	85 30       	cpi	r24, 0x05	; 5
     f1e:	08 f4       	brcc	.+2      	; 0xf22 <passwor_setting+0x2d8>
     f20:	6a cf       	rjmp	.-300    	; 0xdf6 <passwor_setting+0x1ac>



		/*send password1  to control*/

		while(UART_recieveByte()!=CONTROL_Ready);
     f22:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
     f26:	8a 3c       	cpi	r24, 0xCA	; 202
     f28:	e1 f7       	brne	.-8      	; 0xf22 <passwor_setting+0x2d8>
		for(i=0;i<5;i++)
     f2a:	10 92 28 01 	sts	0x0128, r1
     f2e:	0f c0       	rjmp	.+30     	; 0xf4e <passwor_setting+0x304>
		{

			UART_sendByte(password_1[i]);
     f30:	80 91 28 01 	lds	r24, 0x0128
     f34:	88 2f       	mov	r24, r24
     f36:	90 e0       	ldi	r25, 0x00	; 0
     f38:	fc 01       	movw	r30, r24
     f3a:	ed 5d       	subi	r30, 0xDD	; 221
     f3c:	fe 4f       	sbci	r31, 0xFE	; 254
     f3e:	80 81       	ld	r24, Z
     f40:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>


		/*send password1  to control*/

		while(UART_recieveByte()!=CONTROL_Ready);
		for(i=0;i<5;i++)
     f44:	80 91 28 01 	lds	r24, 0x0128
     f48:	8f 5f       	subi	r24, 0xFF	; 255
     f4a:	80 93 28 01 	sts	0x0128, r24
     f4e:	80 91 28 01 	lds	r24, 0x0128
     f52:	85 30       	cpi	r24, 0x05	; 5
     f54:	68 f3       	brcs	.-38     	; 0xf30 <passwor_setting+0x2e6>
		{

			UART_sendByte(password_1[i]);
		}

		while(UART_recieveByte()!=CONTROL_Ready);
     f56:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
     f5a:	8a 3c       	cpi	r24, 0xCA	; 202
     f5c:	e1 f7       	brne	.-8      	; 0xf56 <passwor_setting+0x30c>
		for(i=0;i<5;i++)
     f5e:	10 92 28 01 	sts	0x0128, r1
     f62:	0f c0       	rjmp	.+30     	; 0xf82 <passwor_setting+0x338>
		{

			UART_sendByte(password_2[i]);
     f64:	80 91 28 01 	lds	r24, 0x0128
     f68:	88 2f       	mov	r24, r24
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	fc 01       	movw	r30, r24
     f6e:	e6 5d       	subi	r30, 0xD6	; 214
     f70:	fe 4f       	sbci	r31, 0xFE	; 254
     f72:	80 81       	ld	r24, Z
     f74:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>

			UART_sendByte(password_1[i]);
		}

		while(UART_recieveByte()!=CONTROL_Ready);
		for(i=0;i<5;i++)
     f78:	80 91 28 01 	lds	r24, 0x0128
     f7c:	8f 5f       	subi	r24, 0xFF	; 255
     f7e:	80 93 28 01 	sts	0x0128, r24
     f82:	80 91 28 01 	lds	r24, 0x0128
     f86:	85 30       	cpi	r24, 0x05	; 5
     f88:	68 f3       	brcs	.-38     	; 0xf64 <passwor_setting+0x31a>
		{

			UART_sendByte(password_2[i]);
		}

		UART_sendByte(HMI_Ready);
     f8a:	8c ea       	ldi	r24, 0xAC	; 172
     f8c:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>
		password_state=UART_recieveByte();
     f90:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
     f94:	80 93 22 01 	sts	0x0122, r24

		LCD_clearScreen();
     f98:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>

		if(password_state == Matched) /*flag that sent by CoNTrOl MC that indicates the state of the password*/
     f9c:	80 91 22 01 	lds	r24, 0x0122
     fa0:	81 30       	cpi	r24, 0x01	; 1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <passwor_setting+0x35c>
     fa4:	7d c0       	rjmp	.+250    	; 0x10a0 <passwor_setting+0x456>
		{
			g_matching_flag=1;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 29 01 	sts	0x0129, r24
			LCD_displayStringRowColumn(0, 4, "Matched");
     fac:	2c e8       	ldi	r18, 0x8C	; 140
     fae:	30 e0       	ldi	r19, 0x00	; 0
     fb0:	80 e0       	ldi	r24, 0x00	; 0
     fb2:	64 e0       	ldi	r22, 0x04	; 4
     fb4:	a9 01       	movw	r20, r18
     fb6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
     fba:	80 e0       	ldi	r24, 0x00	; 0
     fbc:	90 e0       	ldi	r25, 0x00	; 0
     fbe:	aa ef       	ldi	r26, 0xFA	; 250
     fc0:	b3 e4       	ldi	r27, 0x43	; 67
     fc2:	89 8f       	std	Y+25, r24	; 0x19
     fc4:	9a 8f       	std	Y+26, r25	; 0x1a
     fc6:	ab 8f       	std	Y+27, r26	; 0x1b
     fc8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fca:	69 8d       	ldd	r22, Y+25	; 0x19
     fcc:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fce:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fd0:	9c 8d       	ldd	r25, Y+28	; 0x1c
     fd2:	20 e0       	ldi	r18, 0x00	; 0
     fd4:	30 e0       	ldi	r19, 0x00	; 0
     fd6:	4a e7       	ldi	r20, 0x7A	; 122
     fd8:	53 e4       	ldi	r21, 0x43	; 67
     fda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fde:	dc 01       	movw	r26, r24
     fe0:	cb 01       	movw	r24, r22
     fe2:	8d 8b       	std	Y+21, r24	; 0x15
     fe4:	9e 8b       	std	Y+22, r25	; 0x16
     fe6:	af 8b       	std	Y+23, r26	; 0x17
     fe8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     fea:	6d 89       	ldd	r22, Y+21	; 0x15
     fec:	7e 89       	ldd	r23, Y+22	; 0x16
     fee:	8f 89       	ldd	r24, Y+23	; 0x17
     ff0:	98 8d       	ldd	r25, Y+24	; 0x18
     ff2:	20 e0       	ldi	r18, 0x00	; 0
     ff4:	30 e0       	ldi	r19, 0x00	; 0
     ff6:	40 e8       	ldi	r20, 0x80	; 128
     ff8:	5f e3       	ldi	r21, 0x3F	; 63
     ffa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     ffe:	88 23       	and	r24, r24
    1000:	2c f4       	brge	.+10     	; 0x100c <passwor_setting+0x3c2>
		__ticks = 1;
    1002:	81 e0       	ldi	r24, 0x01	; 1
    1004:	90 e0       	ldi	r25, 0x00	; 0
    1006:	9c 8b       	std	Y+20, r25	; 0x14
    1008:	8b 8b       	std	Y+19, r24	; 0x13
    100a:	3f c0       	rjmp	.+126    	; 0x108a <passwor_setting+0x440>
	else if (__tmp > 65535)
    100c:	6d 89       	ldd	r22, Y+21	; 0x15
    100e:	7e 89       	ldd	r23, Y+22	; 0x16
    1010:	8f 89       	ldd	r24, Y+23	; 0x17
    1012:	98 8d       	ldd	r25, Y+24	; 0x18
    1014:	20 e0       	ldi	r18, 0x00	; 0
    1016:	3f ef       	ldi	r19, 0xFF	; 255
    1018:	4f e7       	ldi	r20, 0x7F	; 127
    101a:	57 e4       	ldi	r21, 0x47	; 71
    101c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1020:	18 16       	cp	r1, r24
    1022:	4c f5       	brge	.+82     	; 0x1076 <passwor_setting+0x42c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1024:	69 8d       	ldd	r22, Y+25	; 0x19
    1026:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1028:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102c:	20 e0       	ldi	r18, 0x00	; 0
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	40 e2       	ldi	r20, 0x20	; 32
    1032:	51 e4       	ldi	r21, 0x41	; 65
    1034:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1038:	dc 01       	movw	r26, r24
    103a:	cb 01       	movw	r24, r22
    103c:	bc 01       	movw	r22, r24
    103e:	cd 01       	movw	r24, r26
    1040:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1044:	dc 01       	movw	r26, r24
    1046:	cb 01       	movw	r24, r22
    1048:	9c 8b       	std	Y+20, r25	; 0x14
    104a:	8b 8b       	std	Y+19, r24	; 0x13
    104c:	0f c0       	rjmp	.+30     	; 0x106c <passwor_setting+0x422>
    104e:	89 e1       	ldi	r24, 0x19	; 25
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	9a 8b       	std	Y+18, r25	; 0x12
    1054:	89 8b       	std	Y+17, r24	; 0x11
    1056:	89 89       	ldd	r24, Y+17	; 0x11
    1058:	9a 89       	ldd	r25, Y+18	; 0x12
    105a:	01 97       	sbiw	r24, 0x01	; 1
    105c:	f1 f7       	brne	.-4      	; 0x105a <passwor_setting+0x410>
    105e:	9a 8b       	std	Y+18, r25	; 0x12
    1060:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1062:	8b 89       	ldd	r24, Y+19	; 0x13
    1064:	9c 89       	ldd	r25, Y+20	; 0x14
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	9c 8b       	std	Y+20, r25	; 0x14
    106a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    106c:	8b 89       	ldd	r24, Y+19	; 0x13
    106e:	9c 89       	ldd	r25, Y+20	; 0x14
    1070:	00 97       	sbiw	r24, 0x00	; 0
    1072:	69 f7       	brne	.-38     	; 0x104e <passwor_setting+0x404>
    1074:	8e c0       	rjmp	.+284    	; 0x1192 <passwor_setting+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1076:	6d 89       	ldd	r22, Y+21	; 0x15
    1078:	7e 89       	ldd	r23, Y+22	; 0x16
    107a:	8f 89       	ldd	r24, Y+23	; 0x17
    107c:	98 8d       	ldd	r25, Y+24	; 0x18
    107e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1082:	dc 01       	movw	r26, r24
    1084:	cb 01       	movw	r24, r22
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	98 8b       	std	Y+16, r25	; 0x10
    1090:	8f 87       	std	Y+15, r24	; 0x0f
    1092:	8f 85       	ldd	r24, Y+15	; 0x0f
    1094:	98 89       	ldd	r25, Y+16	; 0x10
    1096:	01 97       	sbiw	r24, 0x01	; 1
    1098:	f1 f7       	brne	.-4      	; 0x1096 <passwor_setting+0x44c>
    109a:	98 8b       	std	Y+16, r25	; 0x10
    109c:	8f 87       	std	Y+15, r24	; 0x0f
    109e:	79 c0       	rjmp	.+242    	; 0x1192 <passwor_setting+0x548>

		}

		else{

			LCD_displayStringRowColumn(0, 4, "Unmatched");
    10a0:	24 e9       	ldi	r18, 0x94	; 148
    10a2:	30 e0       	ldi	r19, 0x00	; 0
    10a4:	80 e0       	ldi	r24, 0x00	; 0
    10a6:	64 e0       	ldi	r22, 0x04	; 4
    10a8:	a9 01       	movw	r20, r18
    10aa:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	aa ef       	ldi	r26, 0xFA	; 250
    10b4:	b3 e4       	ldi	r27, 0x43	; 67
    10b6:	8b 87       	std	Y+11, r24	; 0x0b
    10b8:	9c 87       	std	Y+12, r25	; 0x0c
    10ba:	ad 87       	std	Y+13, r26	; 0x0d
    10bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10be:	6b 85       	ldd	r22, Y+11	; 0x0b
    10c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    10c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    10c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    10c6:	20 e0       	ldi	r18, 0x00	; 0
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	4a e7       	ldi	r20, 0x7A	; 122
    10cc:	53 e4       	ldi	r21, 0x43	; 67
    10ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d2:	dc 01       	movw	r26, r24
    10d4:	cb 01       	movw	r24, r22
    10d6:	8f 83       	std	Y+7, r24	; 0x07
    10d8:	98 87       	std	Y+8, r25	; 0x08
    10da:	a9 87       	std	Y+9, r26	; 0x09
    10dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10de:	6f 81       	ldd	r22, Y+7	; 0x07
    10e0:	78 85       	ldd	r23, Y+8	; 0x08
    10e2:	89 85       	ldd	r24, Y+9	; 0x09
    10e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    10e6:	20 e0       	ldi	r18, 0x00	; 0
    10e8:	30 e0       	ldi	r19, 0x00	; 0
    10ea:	40 e8       	ldi	r20, 0x80	; 128
    10ec:	5f e3       	ldi	r21, 0x3F	; 63
    10ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f2:	88 23       	and	r24, r24
    10f4:	2c f4       	brge	.+10     	; 0x1100 <passwor_setting+0x4b6>
		__ticks = 1;
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	9e 83       	std	Y+6, r25	; 0x06
    10fc:	8d 83       	std	Y+5, r24	; 0x05
    10fe:	3f c0       	rjmp	.+126    	; 0x117e <passwor_setting+0x534>
	else if (__tmp > 65535)
    1100:	6f 81       	ldd	r22, Y+7	; 0x07
    1102:	78 85       	ldd	r23, Y+8	; 0x08
    1104:	89 85       	ldd	r24, Y+9	; 0x09
    1106:	9a 85       	ldd	r25, Y+10	; 0x0a
    1108:	20 e0       	ldi	r18, 0x00	; 0
    110a:	3f ef       	ldi	r19, 0xFF	; 255
    110c:	4f e7       	ldi	r20, 0x7F	; 127
    110e:	57 e4       	ldi	r21, 0x47	; 71
    1110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1114:	18 16       	cp	r1, r24
    1116:	4c f5       	brge	.+82     	; 0x116a <passwor_setting+0x520>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	40 e2       	ldi	r20, 0x20	; 32
    1126:	51 e4       	ldi	r21, 0x41	; 65
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	bc 01       	movw	r22, r24
    1132:	cd 01       	movw	r24, r26
    1134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1138:	dc 01       	movw	r26, r24
    113a:	cb 01       	movw	r24, r22
    113c:	9e 83       	std	Y+6, r25	; 0x06
    113e:	8d 83       	std	Y+5, r24	; 0x05
    1140:	0f c0       	rjmp	.+30     	; 0x1160 <passwor_setting+0x516>
    1142:	89 e1       	ldi	r24, 0x19	; 25
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	9c 83       	std	Y+4, r25	; 0x04
    1148:	8b 83       	std	Y+3, r24	; 0x03
    114a:	8b 81       	ldd	r24, Y+3	; 0x03
    114c:	9c 81       	ldd	r25, Y+4	; 0x04
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	f1 f7       	brne	.-4      	; 0x114e <passwor_setting+0x504>
    1152:	9c 83       	std	Y+4, r25	; 0x04
    1154:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1156:	8d 81       	ldd	r24, Y+5	; 0x05
    1158:	9e 81       	ldd	r25, Y+6	; 0x06
    115a:	01 97       	sbiw	r24, 0x01	; 1
    115c:	9e 83       	std	Y+6, r25	; 0x06
    115e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1160:	8d 81       	ldd	r24, Y+5	; 0x05
    1162:	9e 81       	ldd	r25, Y+6	; 0x06
    1164:	00 97       	sbiw	r24, 0x00	; 0
    1166:	69 f7       	brne	.-38     	; 0x1142 <passwor_setting+0x4f8>
    1168:	14 c0       	rjmp	.+40     	; 0x1192 <passwor_setting+0x548>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116a:	6f 81       	ldd	r22, Y+7	; 0x07
    116c:	78 85       	ldd	r23, Y+8	; 0x08
    116e:	89 85       	ldd	r24, Y+9	; 0x09
    1170:	9a 85       	ldd	r25, Y+10	; 0x0a
    1172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1176:	dc 01       	movw	r26, r24
    1178:	cb 01       	movw	r24, r22
    117a:	9e 83       	std	Y+6, r25	; 0x06
    117c:	8d 83       	std	Y+5, r24	; 0x05
    117e:	8d 81       	ldd	r24, Y+5	; 0x05
    1180:	9e 81       	ldd	r25, Y+6	; 0x06
    1182:	9a 83       	std	Y+2, r25	; 0x02
    1184:	89 83       	std	Y+1, r24	; 0x01
    1186:	89 81       	ldd	r24, Y+1	; 0x01
    1188:	9a 81       	ldd	r25, Y+2	; 0x02
    118a:	01 97       	sbiw	r24, 0x01	; 1
    118c:	f1 f7       	brne	.-4      	; 0x118a <passwor_setting+0x540>
    118e:	9a 83       	std	Y+2, r25	; 0x02
    1190:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

		}

	}while(g_matching_flag==0);
    1192:	80 91 29 01 	lds	r24, 0x0129
    1196:	88 23       	and	r24, r24
    1198:	09 f4       	brne	.+2      	; 0x119c <passwor_setting+0x552>
    119a:	63 cd       	rjmp	.-1338   	; 0xc62 <passwor_setting+0x18>

}
    119c:	e8 96       	adiw	r28, 0x38	; 56
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	1f 91       	pop	r17
    11ae:	0f 91       	pop	r16
    11b0:	08 95       	ret

000011b2 <main_options>:
 * "+:Open Door"&"-:Change Pass"
 */


void main_options(void)
{
    11b2:	df 93       	push	r29
    11b4:	cf 93       	push	r28
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    11ba:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 0,"+:Open Door");
    11be:	2e e9       	ldi	r18, 0x9E	; 158
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	80 e0       	ldi	r24, 0x00	; 0
    11c4:	60 e0       	ldi	r22, 0x00	; 0
    11c6:	a9 01       	movw	r20, r18
    11c8:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
	LCD_displayStringRowColumn(1, 0,"-:Change Pass");
    11cc:	2a ea       	ldi	r18, 0xAA	; 170
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	81 e0       	ldi	r24, 0x01	; 1
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	a9 01       	movw	r20, r18
    11d6:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>

}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <open_door>:




void open_door(void)
{
    11e0:	0f 93       	push	r16
    11e2:	1f 93       	push	r17
    11e4:	df 93       	push	r29
    11e6:	cf 93       	push	r28
    11e8:	cd b7       	in	r28, 0x3d	; 61
    11ea:	de b7       	in	r29, 0x3e	; 62
    11ec:	aa 97       	sbiw	r28, 0x2a	; 42
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61

	while(UART_recieveByte()!=CONTROL_Ready);
    11f8:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    11fc:	8a 3c       	cpi	r24, 0xCA	; 202
    11fe:	e1 f7       	brne	.-8      	; 0x11f8 <open_door+0x18>
	UART_sendByte(OPEN_DOOR);
    1200:	86 e6       	ldi	r24, 0x66	; 102
    1202:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>

	do{
		LCD_clearScreen();
    1206:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
    120a:	28 eb       	ldi	r18, 0xB8	; 184
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	80 e0       	ldi	r24, 0x00	; 0
    1210:	60 e0       	ldi	r22, 0x00	; 0
    1212:	a9 01       	movw	r20, r18
    1214:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    1218:	81 e0       	ldi	r24, 0x01	; 1
    121a:	60 e0       	ldi	r22, 0x00	; 0
    121c:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <LCD_moveCursor>
    1220:	99 c0       	rjmp	.+306    	; 0x1354 <open_door+0x174>

		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
    1222:	10 92 28 01 	sts	0x0128, r1
    1226:	91 c0       	rjmp	.+290    	; 0x134a <open_door+0x16a>
			{
				password_1[i]=KEYPAD_getPressedKey();
    1228:	80 91 28 01 	lds	r24, 0x0128
    122c:	08 2f       	mov	r16, r24
    122e:	10 e0       	ldi	r17, 0x00	; 0
    1230:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    1234:	f8 01       	movw	r30, r16
    1236:	ed 5d       	subi	r30, 0xDD	; 221
    1238:	fe 4f       	sbci	r31, 0xFE	; 254
    123a:	80 83       	st	Z, r24
				if(KEYPAD_getPressedKey()<=9 && KEYPAD_getPressedKey()>=0)
    123c:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    1240:	8a 30       	cpi	r24, 0x0A	; 10
    1242:	08 f0       	brcs	.+2      	; 0x1246 <open_door+0x66>
    1244:	78 c0       	rjmp	.+240    	; 0x1336 <open_door+0x156>
    1246:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
				{
					LCD_displayCharacter('*');
    124a:	8a e2       	ldi	r24, 0x2A	; 42
    124c:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_displayCharacter>
    1250:	80 e0       	ldi	r24, 0x00	; 0
    1252:	90 e0       	ldi	r25, 0x00	; 0
    1254:	aa ef       	ldi	r26, 0xFA	; 250
    1256:	b3 e4       	ldi	r27, 0x43	; 67
    1258:	8f a3       	std	Y+39, r24	; 0x27
    125a:	98 a7       	std	Y+40, r25	; 0x28
    125c:	a9 a7       	std	Y+41, r26	; 0x29
    125e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1260:	6f a1       	ldd	r22, Y+39	; 0x27
    1262:	78 a5       	ldd	r23, Y+40	; 0x28
    1264:	89 a5       	ldd	r24, Y+41	; 0x29
    1266:	9a a5       	ldd	r25, Y+42	; 0x2a
    1268:	20 e0       	ldi	r18, 0x00	; 0
    126a:	30 e0       	ldi	r19, 0x00	; 0
    126c:	4a e7       	ldi	r20, 0x7A	; 122
    126e:	53 e4       	ldi	r21, 0x43	; 67
    1270:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1274:	dc 01       	movw	r26, r24
    1276:	cb 01       	movw	r24, r22
    1278:	8b a3       	std	Y+35, r24	; 0x23
    127a:	9c a3       	std	Y+36, r25	; 0x24
    127c:	ad a3       	std	Y+37, r26	; 0x25
    127e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1280:	6b a1       	ldd	r22, Y+35	; 0x23
    1282:	7c a1       	ldd	r23, Y+36	; 0x24
    1284:	8d a1       	ldd	r24, Y+37	; 0x25
    1286:	9e a1       	ldd	r25, Y+38	; 0x26
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e8       	ldi	r20, 0x80	; 128
    128e:	5f e3       	ldi	r21, 0x3F	; 63
    1290:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1294:	88 23       	and	r24, r24
    1296:	2c f4       	brge	.+10     	; 0x12a2 <open_door+0xc2>
		__ticks = 1;
    1298:	81 e0       	ldi	r24, 0x01	; 1
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	9a a3       	std	Y+34, r25	; 0x22
    129e:	89 a3       	std	Y+33, r24	; 0x21
    12a0:	3f c0       	rjmp	.+126    	; 0x1320 <open_door+0x140>
	else if (__tmp > 65535)
    12a2:	6b a1       	ldd	r22, Y+35	; 0x23
    12a4:	7c a1       	ldd	r23, Y+36	; 0x24
    12a6:	8d a1       	ldd	r24, Y+37	; 0x25
    12a8:	9e a1       	ldd	r25, Y+38	; 0x26
    12aa:	20 e0       	ldi	r18, 0x00	; 0
    12ac:	3f ef       	ldi	r19, 0xFF	; 255
    12ae:	4f e7       	ldi	r20, 0x7F	; 127
    12b0:	57 e4       	ldi	r21, 0x47	; 71
    12b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b6:	18 16       	cp	r1, r24
    12b8:	4c f5       	brge	.+82     	; 0x130c <open_door+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ba:	6f a1       	ldd	r22, Y+39	; 0x27
    12bc:	78 a5       	ldd	r23, Y+40	; 0x28
    12be:	89 a5       	ldd	r24, Y+41	; 0x29
    12c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    12c2:	20 e0       	ldi	r18, 0x00	; 0
    12c4:	30 e0       	ldi	r19, 0x00	; 0
    12c6:	40 e2       	ldi	r20, 0x20	; 32
    12c8:	51 e4       	ldi	r21, 0x41	; 65
    12ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	bc 01       	movw	r22, r24
    12d4:	cd 01       	movw	r24, r26
    12d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	9a a3       	std	Y+34, r25	; 0x22
    12e0:	89 a3       	std	Y+33, r24	; 0x21
    12e2:	0f c0       	rjmp	.+30     	; 0x1302 <open_door+0x122>
    12e4:	89 e1       	ldi	r24, 0x19	; 25
    12e6:	90 e0       	ldi	r25, 0x00	; 0
    12e8:	98 a3       	std	Y+32, r25	; 0x20
    12ea:	8f 8f       	std	Y+31, r24	; 0x1f
    12ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ee:	98 a1       	ldd	r25, Y+32	; 0x20
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	f1 f7       	brne	.-4      	; 0x12f0 <open_door+0x110>
    12f4:	98 a3       	std	Y+32, r25	; 0x20
    12f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f8:	89 a1       	ldd	r24, Y+33	; 0x21
    12fa:	9a a1       	ldd	r25, Y+34	; 0x22
    12fc:	01 97       	sbiw	r24, 0x01	; 1
    12fe:	9a a3       	std	Y+34, r25	; 0x22
    1300:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1302:	89 a1       	ldd	r24, Y+33	; 0x21
    1304:	9a a1       	ldd	r25, Y+34	; 0x22
    1306:	00 97       	sbiw	r24, 0x00	; 0
    1308:	69 f7       	brne	.-38     	; 0x12e4 <open_door+0x104>
    130a:	1a c0       	rjmp	.+52     	; 0x1340 <open_door+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130c:	6b a1       	ldd	r22, Y+35	; 0x23
    130e:	7c a1       	ldd	r23, Y+36	; 0x24
    1310:	8d a1       	ldd	r24, Y+37	; 0x25
    1312:	9e a1       	ldd	r25, Y+38	; 0x26
    1314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1318:	dc 01       	movw	r26, r24
    131a:	cb 01       	movw	r24, r22
    131c:	9a a3       	std	Y+34, r25	; 0x22
    131e:	89 a3       	std	Y+33, r24	; 0x21
    1320:	89 a1       	ldd	r24, Y+33	; 0x21
    1322:	9a a1       	ldd	r25, Y+34	; 0x22
    1324:	9e 8f       	std	Y+30, r25	; 0x1e
    1326:	8d 8f       	std	Y+29, r24	; 0x1d
    1328:	8d 8d       	ldd	r24, Y+29	; 0x1d
    132a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    132c:	01 97       	sbiw	r24, 0x01	; 1
    132e:	f1 f7       	brne	.-4      	; 0x132c <open_door+0x14c>
    1330:	9e 8f       	std	Y+30, r25	; 0x1e
    1332:	8d 8f       	std	Y+29, r24	; 0x1d
    1334:	05 c0       	rjmp	.+10     	; 0x1340 <open_door+0x160>

				}

				else
				{
					i--;
    1336:	80 91 28 01 	lds	r24, 0x0128
    133a:	81 50       	subi	r24, 0x01	; 1
    133c:	80 93 28 01 	sts	0x0128, r24
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
		LCD_moveCursor(1, 0);

		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
    1340:	80 91 28 01 	lds	r24, 0x0128
    1344:	8f 5f       	subi	r24, 0xFF	; 255
    1346:	80 93 28 01 	sts	0x0128, r24
    134a:	80 91 28 01 	lds	r24, 0x0128
    134e:	85 30       	cpi	r24, 0x05	; 5
    1350:	08 f4       	brcc	.+2      	; 0x1354 <open_door+0x174>
    1352:	6a cf       	rjmp	.-300    	; 0x1228 <open_door+0x48>
	do{
		LCD_clearScreen();
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
		LCD_moveCursor(1, 0);

		while(KEYPAD_getPressedKey()!=ENTER_KEY){
    1354:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    1358:	8d 30       	cpi	r24, 0x0D	; 13
    135a:	09 f0       	breq	.+2      	; 0x135e <open_door+0x17e>
    135c:	62 cf       	rjmp	.-316    	; 0x1222 <open_door+0x42>
			}

		}


		while(UART_recieveByte()!=CONTROL_Ready);
    135e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    1362:	8a 3c       	cpi	r24, 0xCA	; 202
    1364:	e1 f7       	brne	.-8      	; 0x135e <open_door+0x17e>
		for(i=0;i<5;i++)
    1366:	10 92 28 01 	sts	0x0128, r1
    136a:	0f c0       	rjmp	.+30     	; 0x138a <open_door+0x1aa>
		{

			UART_sendByte(password_1[i]);
    136c:	80 91 28 01 	lds	r24, 0x0128
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	ed 5d       	subi	r30, 0xDD	; 221
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	80 81       	ld	r24, Z
    137c:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>

		}


		while(UART_recieveByte()!=CONTROL_Ready);
		for(i=0;i<5;i++)
    1380:	80 91 28 01 	lds	r24, 0x0128
    1384:	8f 5f       	subi	r24, 0xFF	; 255
    1386:	80 93 28 01 	sts	0x0128, r24
    138a:	80 91 28 01 	lds	r24, 0x0128
    138e:	85 30       	cpi	r24, 0x05	; 5
    1390:	68 f3       	brcs	.-38     	; 0x136c <open_door+0x18c>
			UART_sendByte(password_1[i]);


		}

		UART_sendByte(HMI_Ready);
    1392:	8c ea       	ldi	r24, 0xAC	; 172
    1394:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>
		password_state=UART_recieveByte();
    1398:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    139c:	80 93 22 01 	sts	0x0122, r24
		if(password_state == Matched)
    13a0:	80 91 22 01 	lds	r24, 0x0122
    13a4:	81 30       	cpi	r24, 0x01	; 1
    13a6:	99 f5       	brne	.+102    	; 0x140e <open_door+0x22e>
		{
			g_ticks=0;
    13a8:	10 92 1e 01 	sts	0x011E, r1
			LCD_clearScreen();
    13ac:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayString("Opennig..");
    13b0:	88 ec       	ldi	r24, 0xC8	; 200
    13b2:	90 e0       	ldi	r25, 0x00	; 0
    13b4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_displayString>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    13b8:	88 e3       	ldi	r24, 0x38	; 56
    13ba:	9b e0       	ldi	r25, 0x0B	; 11
    13bc:	0e 94 22 18 	call	0x3044	; 0x3044 <Timer1_setCallBack>
			while(g_ticks!=15);
    13c0:	80 91 1e 01 	lds	r24, 0x011E
    13c4:	8f 30       	cpi	r24, 0x0F	; 15
    13c6:	e1 f7       	brne	.-8      	; 0x13c0 <open_door+0x1e0>

			g_ticks=0;
    13c8:	10 92 1e 01 	sts	0x011E, r1
			LCD_clearScreen();
    13cc:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayString("WELCOM BACK");
    13d0:	82 ed       	ldi	r24, 0xD2	; 210
    13d2:	90 e0       	ldi	r25, 0x00	; 0
    13d4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_displayString>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    13d8:	88 e3       	ldi	r24, 0x38	; 56
    13da:	9b e0       	ldi	r25, 0x0B	; 11
    13dc:	0e 94 22 18 	call	0x3044	; 0x3044 <Timer1_setCallBack>
			while(g_ticks!=3);
    13e0:	80 91 1e 01 	lds	r24, 0x011E
    13e4:	83 30       	cpi	r24, 0x03	; 3
    13e6:	e1 f7       	brne	.-8      	; 0x13e0 <open_door+0x200>

			g_ticks=0;
    13e8:	10 92 1e 01 	sts	0x011E, r1
			LCD_clearScreen();
    13ec:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayString("Closing..");
    13f0:	8e ed       	ldi	r24, 0xDE	; 222
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_displayString>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    13f8:	88 e3       	ldi	r24, 0x38	; 56
    13fa:	9b e0       	ldi	r25, 0x0B	; 11
    13fc:	0e 94 22 18 	call	0x3044	; 0x3044 <Timer1_setCallBack>
			while(g_ticks!=15);
    1400:	80 91 1e 01 	lds	r24, 0x011E
    1404:	8f 30       	cpi	r24, 0x0F	; 15
    1406:	e1 f7       	brne	.-8      	; 0x1400 <open_door+0x220>
			Timer1_deInit();
    1408:	0e 94 09 18 	call	0x3012	; 0x3012 <Timer1_deInit>
    140c:	0b c1       	rjmp	.+534    	; 0x1624 <open_door+0x444>


		}

		else{
			g_trials++;
    140e:	80 91 1f 01 	lds	r24, 0x011F
    1412:	8f 5f       	subi	r24, 0xFF	; 255
    1414:	80 93 1f 01 	sts	0x011F, r24


		}

		if(g_trials==1){
    1418:	80 91 1f 01 	lds	r24, 0x011F
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	09 f0       	breq	.+2      	; 0x1422 <open_door+0x242>
    1420:	7c c0       	rjmp	.+248    	; 0x151a <open_door+0x33a>
			LCD_clearScreen();
    1422:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "TRIALS=1");
    1426:	28 ee       	ldi	r18, 0xE8	; 232
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	80 e0       	ldi	r24, 0x00	; 0
    142c:	61 e0       	ldi	r22, 0x01	; 1
    142e:	a9 01       	movw	r20, r18
    1430:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	aa ef       	ldi	r26, 0xFA	; 250
    143a:	b3 e4       	ldi	r27, 0x43	; 67
    143c:	89 8f       	std	Y+25, r24	; 0x19
    143e:	9a 8f       	std	Y+26, r25	; 0x1a
    1440:	ab 8f       	std	Y+27, r26	; 0x1b
    1442:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1444:	69 8d       	ldd	r22, Y+25	; 0x19
    1446:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1448:	8b 8d       	ldd	r24, Y+27	; 0x1b
    144a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    144c:	20 e0       	ldi	r18, 0x00	; 0
    144e:	30 e0       	ldi	r19, 0x00	; 0
    1450:	4a e7       	ldi	r20, 0x7A	; 122
    1452:	53 e4       	ldi	r21, 0x43	; 67
    1454:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1458:	dc 01       	movw	r26, r24
    145a:	cb 01       	movw	r24, r22
    145c:	8d 8b       	std	Y+21, r24	; 0x15
    145e:	9e 8b       	std	Y+22, r25	; 0x16
    1460:	af 8b       	std	Y+23, r26	; 0x17
    1462:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1464:	6d 89       	ldd	r22, Y+21	; 0x15
    1466:	7e 89       	ldd	r23, Y+22	; 0x16
    1468:	8f 89       	ldd	r24, Y+23	; 0x17
    146a:	98 8d       	ldd	r25, Y+24	; 0x18
    146c:	20 e0       	ldi	r18, 0x00	; 0
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	40 e8       	ldi	r20, 0x80	; 128
    1472:	5f e3       	ldi	r21, 0x3F	; 63
    1474:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1478:	88 23       	and	r24, r24
    147a:	2c f4       	brge	.+10     	; 0x1486 <open_door+0x2a6>
		__ticks = 1;
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	90 e0       	ldi	r25, 0x00	; 0
    1480:	9c 8b       	std	Y+20, r25	; 0x14
    1482:	8b 8b       	std	Y+19, r24	; 0x13
    1484:	3f c0       	rjmp	.+126    	; 0x1504 <open_door+0x324>
	else if (__tmp > 65535)
    1486:	6d 89       	ldd	r22, Y+21	; 0x15
    1488:	7e 89       	ldd	r23, Y+22	; 0x16
    148a:	8f 89       	ldd	r24, Y+23	; 0x17
    148c:	98 8d       	ldd	r25, Y+24	; 0x18
    148e:	20 e0       	ldi	r18, 0x00	; 0
    1490:	3f ef       	ldi	r19, 0xFF	; 255
    1492:	4f e7       	ldi	r20, 0x7F	; 127
    1494:	57 e4       	ldi	r21, 0x47	; 71
    1496:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    149a:	18 16       	cp	r1, r24
    149c:	4c f5       	brge	.+82     	; 0x14f0 <open_door+0x310>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    149e:	69 8d       	ldd	r22, Y+25	; 0x19
    14a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	40 e2       	ldi	r20, 0x20	; 32
    14ac:	51 e4       	ldi	r21, 0x41	; 65
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	bc 01       	movw	r22, r24
    14b8:	cd 01       	movw	r24, r26
    14ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14be:	dc 01       	movw	r26, r24
    14c0:	cb 01       	movw	r24, r22
    14c2:	9c 8b       	std	Y+20, r25	; 0x14
    14c4:	8b 8b       	std	Y+19, r24	; 0x13
    14c6:	0f c0       	rjmp	.+30     	; 0x14e6 <open_door+0x306>
    14c8:	89 e1       	ldi	r24, 0x19	; 25
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	9a 8b       	std	Y+18, r25	; 0x12
    14ce:	89 8b       	std	Y+17, r24	; 0x11
    14d0:	89 89       	ldd	r24, Y+17	; 0x11
    14d2:	9a 89       	ldd	r25, Y+18	; 0x12
    14d4:	01 97       	sbiw	r24, 0x01	; 1
    14d6:	f1 f7       	brne	.-4      	; 0x14d4 <open_door+0x2f4>
    14d8:	9a 8b       	std	Y+18, r25	; 0x12
    14da:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14dc:	8b 89       	ldd	r24, Y+19	; 0x13
    14de:	9c 89       	ldd	r25, Y+20	; 0x14
    14e0:	01 97       	sbiw	r24, 0x01	; 1
    14e2:	9c 8b       	std	Y+20, r25	; 0x14
    14e4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14e6:	8b 89       	ldd	r24, Y+19	; 0x13
    14e8:	9c 89       	ldd	r25, Y+20	; 0x14
    14ea:	00 97       	sbiw	r24, 0x00	; 0
    14ec:	69 f7       	brne	.-38     	; 0x14c8 <open_door+0x2e8>
    14ee:	95 c0       	rjmp	.+298    	; 0x161a <open_door+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14f0:	6d 89       	ldd	r22, Y+21	; 0x15
    14f2:	7e 89       	ldd	r23, Y+22	; 0x16
    14f4:	8f 89       	ldd	r24, Y+23	; 0x17
    14f6:	98 8d       	ldd	r25, Y+24	; 0x18
    14f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14fc:	dc 01       	movw	r26, r24
    14fe:	cb 01       	movw	r24, r22
    1500:	9c 8b       	std	Y+20, r25	; 0x14
    1502:	8b 8b       	std	Y+19, r24	; 0x13
    1504:	8b 89       	ldd	r24, Y+19	; 0x13
    1506:	9c 89       	ldd	r25, Y+20	; 0x14
    1508:	98 8b       	std	Y+16, r25	; 0x10
    150a:	8f 87       	std	Y+15, r24	; 0x0f
    150c:	8f 85       	ldd	r24, Y+15	; 0x0f
    150e:	98 89       	ldd	r25, Y+16	; 0x10
    1510:	01 97       	sbiw	r24, 0x01	; 1
    1512:	f1 f7       	brne	.-4      	; 0x1510 <open_door+0x330>
    1514:	98 8b       	std	Y+16, r25	; 0x10
    1516:	8f 87       	std	Y+15, r24	; 0x0f
    1518:	80 c0       	rjmp	.+256    	; 0x161a <open_door+0x43a>
			_delay_ms(500);
		}
		else if(g_trials==2){
    151a:	80 91 1f 01 	lds	r24, 0x011F
    151e:	82 30       	cpi	r24, 0x02	; 2
    1520:	09 f0       	breq	.+2      	; 0x1524 <open_door+0x344>
    1522:	7b c0       	rjmp	.+246    	; 0x161a <open_door+0x43a>
			LCD_clearScreen();
    1524:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "TRIALS=2");
    1528:	21 ef       	ldi	r18, 0xF1	; 241
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	80 e0       	ldi	r24, 0x00	; 0
    152e:	61 e0       	ldi	r22, 0x01	; 1
    1530:	a9 01       	movw	r20, r18
    1532:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    1536:	80 e0       	ldi	r24, 0x00	; 0
    1538:	90 e0       	ldi	r25, 0x00	; 0
    153a:	aa ef       	ldi	r26, 0xFA	; 250
    153c:	b3 e4       	ldi	r27, 0x43	; 67
    153e:	8b 87       	std	Y+11, r24	; 0x0b
    1540:	9c 87       	std	Y+12, r25	; 0x0c
    1542:	ad 87       	std	Y+13, r26	; 0x0d
    1544:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1546:	6b 85       	ldd	r22, Y+11	; 0x0b
    1548:	7c 85       	ldd	r23, Y+12	; 0x0c
    154a:	8d 85       	ldd	r24, Y+13	; 0x0d
    154c:	9e 85       	ldd	r25, Y+14	; 0x0e
    154e:	20 e0       	ldi	r18, 0x00	; 0
    1550:	30 e0       	ldi	r19, 0x00	; 0
    1552:	4a e7       	ldi	r20, 0x7A	; 122
    1554:	53 e4       	ldi	r21, 0x43	; 67
    1556:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	8f 83       	std	Y+7, r24	; 0x07
    1560:	98 87       	std	Y+8, r25	; 0x08
    1562:	a9 87       	std	Y+9, r26	; 0x09
    1564:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1566:	6f 81       	ldd	r22, Y+7	; 0x07
    1568:	78 85       	ldd	r23, Y+8	; 0x08
    156a:	89 85       	ldd	r24, Y+9	; 0x09
    156c:	9a 85       	ldd	r25, Y+10	; 0x0a
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	40 e8       	ldi	r20, 0x80	; 128
    1574:	5f e3       	ldi	r21, 0x3F	; 63
    1576:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157a:	88 23       	and	r24, r24
    157c:	2c f4       	brge	.+10     	; 0x1588 <open_door+0x3a8>
		__ticks = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	90 e0       	ldi	r25, 0x00	; 0
    1582:	9e 83       	std	Y+6, r25	; 0x06
    1584:	8d 83       	std	Y+5, r24	; 0x05
    1586:	3f c0       	rjmp	.+126    	; 0x1606 <open_door+0x426>
	else if (__tmp > 65535)
    1588:	6f 81       	ldd	r22, Y+7	; 0x07
    158a:	78 85       	ldd	r23, Y+8	; 0x08
    158c:	89 85       	ldd	r24, Y+9	; 0x09
    158e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1590:	20 e0       	ldi	r18, 0x00	; 0
    1592:	3f ef       	ldi	r19, 0xFF	; 255
    1594:	4f e7       	ldi	r20, 0x7F	; 127
    1596:	57 e4       	ldi	r21, 0x47	; 71
    1598:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    159c:	18 16       	cp	r1, r24
    159e:	4c f5       	brge	.+82     	; 0x15f2 <open_door+0x412>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15a8:	20 e0       	ldi	r18, 0x00	; 0
    15aa:	30 e0       	ldi	r19, 0x00	; 0
    15ac:	40 e2       	ldi	r20, 0x20	; 32
    15ae:	51 e4       	ldi	r21, 0x41	; 65
    15b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b4:	dc 01       	movw	r26, r24
    15b6:	cb 01       	movw	r24, r22
    15b8:	bc 01       	movw	r22, r24
    15ba:	cd 01       	movw	r24, r26
    15bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c0:	dc 01       	movw	r26, r24
    15c2:	cb 01       	movw	r24, r22
    15c4:	9e 83       	std	Y+6, r25	; 0x06
    15c6:	8d 83       	std	Y+5, r24	; 0x05
    15c8:	0f c0       	rjmp	.+30     	; 0x15e8 <open_door+0x408>
    15ca:	89 e1       	ldi	r24, 0x19	; 25
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	9c 83       	std	Y+4, r25	; 0x04
    15d0:	8b 83       	std	Y+3, r24	; 0x03
    15d2:	8b 81       	ldd	r24, Y+3	; 0x03
    15d4:	9c 81       	ldd	r25, Y+4	; 0x04
    15d6:	01 97       	sbiw	r24, 0x01	; 1
    15d8:	f1 f7       	brne	.-4      	; 0x15d6 <open_door+0x3f6>
    15da:	9c 83       	std	Y+4, r25	; 0x04
    15dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15de:	8d 81       	ldd	r24, Y+5	; 0x05
    15e0:	9e 81       	ldd	r25, Y+6	; 0x06
    15e2:	01 97       	sbiw	r24, 0x01	; 1
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15e8:	8d 81       	ldd	r24, Y+5	; 0x05
    15ea:	9e 81       	ldd	r25, Y+6	; 0x06
    15ec:	00 97       	sbiw	r24, 0x00	; 0
    15ee:	69 f7       	brne	.-38     	; 0x15ca <open_door+0x3ea>
    15f0:	14 c0       	rjmp	.+40     	; 0x161a <open_door+0x43a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f2:	6f 81       	ldd	r22, Y+7	; 0x07
    15f4:	78 85       	ldd	r23, Y+8	; 0x08
    15f6:	89 85       	ldd	r24, Y+9	; 0x09
    15f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15fe:	dc 01       	movw	r26, r24
    1600:	cb 01       	movw	r24, r22
    1602:	9e 83       	std	Y+6, r25	; 0x06
    1604:	8d 83       	std	Y+5, r24	; 0x05
    1606:	8d 81       	ldd	r24, Y+5	; 0x05
    1608:	9e 81       	ldd	r25, Y+6	; 0x06
    160a:	9a 83       	std	Y+2, r25	; 0x02
    160c:	89 83       	std	Y+1, r24	; 0x01
    160e:	89 81       	ldd	r24, Y+1	; 0x01
    1610:	9a 81       	ldd	r25, Y+2	; 0x02
    1612:	01 97       	sbiw	r24, 0x01	; 1
    1614:	f1 f7       	brne	.-4      	; 0x1612 <open_door+0x432>
    1616:	9a 83       	std	Y+2, r25	; 0x02
    1618:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);
		}


	}while(g_trials<3);
    161a:	80 91 1f 01 	lds	r24, 0x011F
    161e:	83 30       	cpi	r24, 0x03	; 3
    1620:	08 f4       	brcc	.+2      	; 0x1624 <open_door+0x444>
    1622:	f1 cd       	rjmp	.-1054   	; 0x1206 <open_door+0x26>

	if(g_trials==3){
    1624:	80 91 1f 01 	lds	r24, 0x011F
    1628:	83 30       	cpi	r24, 0x03	; 3
    162a:	b9 f4       	brne	.+46     	; 0x165a <open_door+0x47a>
		g_ticks=0;
    162c:	10 92 1e 01 	sts	0x011E, r1
		LCD_clearScreen();
    1630:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 2, "!!!!ERROR!!!!");
    1634:	2a ef       	ldi	r18, 0xFA	; 250
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	62 e0       	ldi	r22, 0x02	; 2
    163c:	a9 01       	movw	r20, r18
    163e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
    1642:	88 e3       	ldi	r24, 0x38	; 56
    1644:	9b e0       	ldi	r25, 0x0B	; 11
    1646:	0e 94 22 18 	call	0x3044	; 0x3044 <Timer1_setCallBack>
		while(g_ticks!=60);
    164a:	80 91 1e 01 	lds	r24, 0x011E
    164e:	8c 33       	cpi	r24, 0x3C	; 60
    1650:	e1 f7       	brne	.-8      	; 0x164a <open_door+0x46a>
		Timer1_deInit();
    1652:	0e 94 09 18 	call	0x3012	; 0x3012 <Timer1_deInit>
		g_trials=0;
    1656:	10 92 1f 01 	sts	0x011F, r1





}
    165a:	aa 96       	adiw	r28, 0x2a	; 42
    165c:	0f b6       	in	r0, 0x3f	; 63
    165e:	f8 94       	cli
    1660:	de bf       	out	0x3e, r29	; 62
    1662:	0f be       	out	0x3f, r0	; 63
    1664:	cd bf       	out	0x3d, r28	; 61
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	1f 91       	pop	r17
    166c:	0f 91       	pop	r16
    166e:	08 95       	ret

00001670 <TIMER_ISR_COUNTER>:
 * which set to make an interrupt every 1 second
 * so the counter's value will increase every 1 second
 */

void TIMER_ISR_COUNTER(void)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	cd b7       	in	r28, 0x3d	; 61
    1676:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    1678:	80 91 1e 01 	lds	r24, 0x011E
    167c:	8f 5f       	subi	r24, 0xFF	; 255
    167e:	80 93 1e 01 	sts	0x011E, r24
}
    1682:	cf 91       	pop	r28
    1684:	df 91       	pop	r29
    1686:	08 95       	ret

00001688 <Change_pass>:
 */



void Change_pass(void)
{
    1688:	0f 93       	push	r16
    168a:	1f 93       	push	r17
    168c:	df 93       	push	r29
    168e:	cf 93       	push	r28
    1690:	cd b7       	in	r28, 0x3d	; 61
    1692:	de b7       	in	r29, 0x3e	; 62
    1694:	e8 97       	sbiw	r28, 0x38	; 56
    1696:	0f b6       	in	r0, 0x3f	; 63
    1698:	f8 94       	cli
    169a:	de bf       	out	0x3e, r29	; 62
    169c:	0f be       	out	0x3f, r0	; 63
    169e:	cd bf       	out	0x3d, r28	; 61

	while(UART_recieveByte()!=CONTROL_Ready);
    16a0:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    16a4:	8a 3c       	cpi	r24, 0xCA	; 202
    16a6:	e1 f7       	brne	.-8      	; 0x16a0 <Change_pass+0x18>
	UART_sendByte(CHANGE_PASS);
    16a8:	85 e5       	ldi	r24, 0x55	; 85
    16aa:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>

	do{

		LCD_clearScreen();
    16ae:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
    16b2:	28 eb       	ldi	r18, 0xB8	; 184
    16b4:	30 e0       	ldi	r19, 0x00	; 0
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	60 e0       	ldi	r22, 0x00	; 0
    16ba:	a9 01       	movw	r20, r18
    16bc:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		LCD_moveCursor(1, 0);
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <LCD_moveCursor>
    16c8:	99 c0       	rjmp	.+306    	; 0x17fc <Change_pass+0x174>



		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
    16ca:	10 92 28 01 	sts	0x0128, r1
    16ce:	91 c0       	rjmp	.+290    	; 0x17f2 <Change_pass+0x16a>
			{
				password_1[i]=KEYPAD_getPressedKey();
    16d0:	80 91 28 01 	lds	r24, 0x0128
    16d4:	08 2f       	mov	r16, r24
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    16dc:	f8 01       	movw	r30, r16
    16de:	ed 5d       	subi	r30, 0xDD	; 221
    16e0:	fe 4f       	sbci	r31, 0xFE	; 254
    16e2:	80 83       	st	Z, r24
				if(KEYPAD_getPressedKey()<=9 && KEYPAD_getPressedKey()>=0)
    16e4:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    16e8:	8a 30       	cpi	r24, 0x0A	; 10
    16ea:	08 f0       	brcs	.+2      	; 0x16ee <Change_pass+0x66>
    16ec:	78 c0       	rjmp	.+240    	; 0x17de <Change_pass+0x156>
    16ee:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
				{
					LCD_displayCharacter('*');
    16f2:	8a e2       	ldi	r24, 0x2A	; 42
    16f4:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_displayCharacter>
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	90 e0       	ldi	r25, 0x00	; 0
    16fc:	aa ef       	ldi	r26, 0xFA	; 250
    16fe:	b3 e4       	ldi	r27, 0x43	; 67
    1700:	8d ab       	std	Y+53, r24	; 0x35
    1702:	9e ab       	std	Y+54, r25	; 0x36
    1704:	af ab       	std	Y+55, r26	; 0x37
    1706:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1708:	6d a9       	ldd	r22, Y+53	; 0x35
    170a:	7e a9       	ldd	r23, Y+54	; 0x36
    170c:	8f a9       	ldd	r24, Y+55	; 0x37
    170e:	98 ad       	ldd	r25, Y+56	; 0x38
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	4a e7       	ldi	r20, 0x7A	; 122
    1716:	53 e4       	ldi	r21, 0x43	; 67
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	89 ab       	std	Y+49, r24	; 0x31
    1722:	9a ab       	std	Y+50, r25	; 0x32
    1724:	ab ab       	std	Y+51, r26	; 0x33
    1726:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1728:	69 a9       	ldd	r22, Y+49	; 0x31
    172a:	7a a9       	ldd	r23, Y+50	; 0x32
    172c:	8b a9       	ldd	r24, Y+51	; 0x33
    172e:	9c a9       	ldd	r25, Y+52	; 0x34
    1730:	20 e0       	ldi	r18, 0x00	; 0
    1732:	30 e0       	ldi	r19, 0x00	; 0
    1734:	40 e8       	ldi	r20, 0x80	; 128
    1736:	5f e3       	ldi	r21, 0x3F	; 63
    1738:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    173c:	88 23       	and	r24, r24
    173e:	2c f4       	brge	.+10     	; 0x174a <Change_pass+0xc2>
		__ticks = 1;
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	98 ab       	std	Y+48, r25	; 0x30
    1746:	8f a7       	std	Y+47, r24	; 0x2f
    1748:	3f c0       	rjmp	.+126    	; 0x17c8 <Change_pass+0x140>
	else if (__tmp > 65535)
    174a:	69 a9       	ldd	r22, Y+49	; 0x31
    174c:	7a a9       	ldd	r23, Y+50	; 0x32
    174e:	8b a9       	ldd	r24, Y+51	; 0x33
    1750:	9c a9       	ldd	r25, Y+52	; 0x34
    1752:	20 e0       	ldi	r18, 0x00	; 0
    1754:	3f ef       	ldi	r19, 0xFF	; 255
    1756:	4f e7       	ldi	r20, 0x7F	; 127
    1758:	57 e4       	ldi	r21, 0x47	; 71
    175a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    175e:	18 16       	cp	r1, r24
    1760:	4c f5       	brge	.+82     	; 0x17b4 <Change_pass+0x12c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1762:	6d a9       	ldd	r22, Y+53	; 0x35
    1764:	7e a9       	ldd	r23, Y+54	; 0x36
    1766:	8f a9       	ldd	r24, Y+55	; 0x37
    1768:	98 ad       	ldd	r25, Y+56	; 0x38
    176a:	20 e0       	ldi	r18, 0x00	; 0
    176c:	30 e0       	ldi	r19, 0x00	; 0
    176e:	40 e2       	ldi	r20, 0x20	; 32
    1770:	51 e4       	ldi	r21, 0x41	; 65
    1772:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1776:	dc 01       	movw	r26, r24
    1778:	cb 01       	movw	r24, r22
    177a:	bc 01       	movw	r22, r24
    177c:	cd 01       	movw	r24, r26
    177e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1782:	dc 01       	movw	r26, r24
    1784:	cb 01       	movw	r24, r22
    1786:	98 ab       	std	Y+48, r25	; 0x30
    1788:	8f a7       	std	Y+47, r24	; 0x2f
    178a:	0f c0       	rjmp	.+30     	; 0x17aa <Change_pass+0x122>
    178c:	89 e1       	ldi	r24, 0x19	; 25
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	9e a7       	std	Y+46, r25	; 0x2e
    1792:	8d a7       	std	Y+45, r24	; 0x2d
    1794:	8d a5       	ldd	r24, Y+45	; 0x2d
    1796:	9e a5       	ldd	r25, Y+46	; 0x2e
    1798:	01 97       	sbiw	r24, 0x01	; 1
    179a:	f1 f7       	brne	.-4      	; 0x1798 <Change_pass+0x110>
    179c:	9e a7       	std	Y+46, r25	; 0x2e
    179e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17a0:	8f a5       	ldd	r24, Y+47	; 0x2f
    17a2:	98 a9       	ldd	r25, Y+48	; 0x30
    17a4:	01 97       	sbiw	r24, 0x01	; 1
    17a6:	98 ab       	std	Y+48, r25	; 0x30
    17a8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ac:	98 a9       	ldd	r25, Y+48	; 0x30
    17ae:	00 97       	sbiw	r24, 0x00	; 0
    17b0:	69 f7       	brne	.-38     	; 0x178c <Change_pass+0x104>
    17b2:	1a c0       	rjmp	.+52     	; 0x17e8 <Change_pass+0x160>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17b4:	69 a9       	ldd	r22, Y+49	; 0x31
    17b6:	7a a9       	ldd	r23, Y+50	; 0x32
    17b8:	8b a9       	ldd	r24, Y+51	; 0x33
    17ba:	9c a9       	ldd	r25, Y+52	; 0x34
    17bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17c0:	dc 01       	movw	r26, r24
    17c2:	cb 01       	movw	r24, r22
    17c4:	98 ab       	std	Y+48, r25	; 0x30
    17c6:	8f a7       	std	Y+47, r24	; 0x2f
    17c8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17ca:	98 a9       	ldd	r25, Y+48	; 0x30
    17cc:	9c a7       	std	Y+44, r25	; 0x2c
    17ce:	8b a7       	std	Y+43, r24	; 0x2b
    17d0:	8b a5       	ldd	r24, Y+43	; 0x2b
    17d2:	9c a5       	ldd	r25, Y+44	; 0x2c
    17d4:	01 97       	sbiw	r24, 0x01	; 1
    17d6:	f1 f7       	brne	.-4      	; 0x17d4 <Change_pass+0x14c>
    17d8:	9c a7       	std	Y+44, r25	; 0x2c
    17da:	8b a7       	std	Y+43, r24	; 0x2b
    17dc:	05 c0       	rjmp	.+10     	; 0x17e8 <Change_pass+0x160>
				}

				else

				{
					i--;
    17de:	80 91 28 01 	lds	r24, 0x0128
    17e2:	81 50       	subi	r24, 0x01	; 1
    17e4:	80 93 28 01 	sts	0x0128, r24



		while(KEYPAD_getPressedKey()!=ENTER_KEY){

			for(i=0;i<5;i++)
    17e8:	80 91 28 01 	lds	r24, 0x0128
    17ec:	8f 5f       	subi	r24, 0xFF	; 255
    17ee:	80 93 28 01 	sts	0x0128, r24
    17f2:	80 91 28 01 	lds	r24, 0x0128
    17f6:	85 30       	cpi	r24, 0x05	; 5
    17f8:	08 f4       	brcc	.+2      	; 0x17fc <Change_pass+0x174>
    17fa:	6a cf       	rjmp	.-300    	; 0x16d0 <Change_pass+0x48>
		LCD_displayStringRowColumn(0, 0, "PLZ Enter Pass:");
		LCD_moveCursor(1, 0);



		while(KEYPAD_getPressedKey()!=ENTER_KEY){
    17fc:	0e 94 16 11 	call	0x222c	; 0x222c <KEYPAD_getPressedKey>
    1800:	8d 30       	cpi	r24, 0x0D	; 13
    1802:	09 f0       	breq	.+2      	; 0x1806 <Change_pass+0x17e>
    1804:	62 cf       	rjmp	.-316    	; 0x16ca <Change_pass+0x42>


		}


		while(UART_recieveByte()!=CONTROL_Ready);
    1806:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    180a:	8a 3c       	cpi	r24, 0xCA	; 202
    180c:	e1 f7       	brne	.-8      	; 0x1806 <Change_pass+0x17e>
		for(i=0;i<5;i++)
    180e:	10 92 28 01 	sts	0x0128, r1
    1812:	0f c0       	rjmp	.+30     	; 0x1832 <Change_pass+0x1aa>
		{

			UART_sendByte(password_1[i]);
    1814:	80 91 28 01 	lds	r24, 0x0128
    1818:	88 2f       	mov	r24, r24
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	fc 01       	movw	r30, r24
    181e:	ed 5d       	subi	r30, 0xDD	; 221
    1820:	fe 4f       	sbci	r31, 0xFE	; 254
    1822:	80 81       	ld	r24, Z
    1824:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>

		}


		while(UART_recieveByte()!=CONTROL_Ready);
		for(i=0;i<5;i++)
    1828:	80 91 28 01 	lds	r24, 0x0128
    182c:	8f 5f       	subi	r24, 0xFF	; 255
    182e:	80 93 28 01 	sts	0x0128, r24
    1832:	80 91 28 01 	lds	r24, 0x0128
    1836:	85 30       	cpi	r24, 0x05	; 5
    1838:	68 f3       	brcs	.-38     	; 0x1814 <Change_pass+0x18c>
			UART_sendByte(password_1[i]);


		}

		UART_sendByte(HMI_Ready);
    183a:	8c ea       	ldi	r24, 0xAC	; 172
    183c:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>
		password_state=UART_recieveByte();
    1840:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    1844:	80 93 22 01 	sts	0x0122, r24

		if(password_state == Matched)
    1848:	80 91 22 01 	lds	r24, 0x0122
    184c:	81 30       	cpi	r24, 0x01	; 1
    184e:	09 f0       	breq	.+2      	; 0x1852 <Change_pass+0x1ca>
    1850:	7e c0       	rjmp	.+252    	; 0x194e <Change_pass+0x2c6>
		{
			LCD_clearScreen();
    1852:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 4, "Matched");
    1856:	2c e8       	ldi	r18, 0x8C	; 140
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	80 e0       	ldi	r24, 0x00	; 0
    185c:	64 e0       	ldi	r22, 0x04	; 4
    185e:	a9 01       	movw	r20, r18
    1860:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    1864:	80 e0       	ldi	r24, 0x00	; 0
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	aa ef       	ldi	r26, 0xFA	; 250
    186a:	b3 e4       	ldi	r27, 0x43	; 67
    186c:	8f a3       	std	Y+39, r24	; 0x27
    186e:	98 a7       	std	Y+40, r25	; 0x28
    1870:	a9 a7       	std	Y+41, r26	; 0x29
    1872:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1874:	6f a1       	ldd	r22, Y+39	; 0x27
    1876:	78 a5       	ldd	r23, Y+40	; 0x28
    1878:	89 a5       	ldd	r24, Y+41	; 0x29
    187a:	9a a5       	ldd	r25, Y+42	; 0x2a
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	4a e7       	ldi	r20, 0x7A	; 122
    1882:	53 e4       	ldi	r21, 0x43	; 67
    1884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	8b a3       	std	Y+35, r24	; 0x23
    188e:	9c a3       	std	Y+36, r25	; 0x24
    1890:	ad a3       	std	Y+37, r26	; 0x25
    1892:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1894:	6b a1       	ldd	r22, Y+35	; 0x23
    1896:	7c a1       	ldd	r23, Y+36	; 0x24
    1898:	8d a1       	ldd	r24, Y+37	; 0x25
    189a:	9e a1       	ldd	r25, Y+38	; 0x26
    189c:	20 e0       	ldi	r18, 0x00	; 0
    189e:	30 e0       	ldi	r19, 0x00	; 0
    18a0:	40 e8       	ldi	r20, 0x80	; 128
    18a2:	5f e3       	ldi	r21, 0x3F	; 63
    18a4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a8:	88 23       	and	r24, r24
    18aa:	2c f4       	brge	.+10     	; 0x18b6 <Change_pass+0x22e>
		__ticks = 1;
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	90 e0       	ldi	r25, 0x00	; 0
    18b0:	9a a3       	std	Y+34, r25	; 0x22
    18b2:	89 a3       	std	Y+33, r24	; 0x21
    18b4:	3f c0       	rjmp	.+126    	; 0x1934 <Change_pass+0x2ac>
	else if (__tmp > 65535)
    18b6:	6b a1       	ldd	r22, Y+35	; 0x23
    18b8:	7c a1       	ldd	r23, Y+36	; 0x24
    18ba:	8d a1       	ldd	r24, Y+37	; 0x25
    18bc:	9e a1       	ldd	r25, Y+38	; 0x26
    18be:	20 e0       	ldi	r18, 0x00	; 0
    18c0:	3f ef       	ldi	r19, 0xFF	; 255
    18c2:	4f e7       	ldi	r20, 0x7F	; 127
    18c4:	57 e4       	ldi	r21, 0x47	; 71
    18c6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18ca:	18 16       	cp	r1, r24
    18cc:	4c f5       	brge	.+82     	; 0x1920 <Change_pass+0x298>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ce:	6f a1       	ldd	r22, Y+39	; 0x27
    18d0:	78 a5       	ldd	r23, Y+40	; 0x28
    18d2:	89 a5       	ldd	r24, Y+41	; 0x29
    18d4:	9a a5       	ldd	r25, Y+42	; 0x2a
    18d6:	20 e0       	ldi	r18, 0x00	; 0
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	40 e2       	ldi	r20, 0x20	; 32
    18dc:	51 e4       	ldi	r21, 0x41	; 65
    18de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18e2:	dc 01       	movw	r26, r24
    18e4:	cb 01       	movw	r24, r22
    18e6:	bc 01       	movw	r22, r24
    18e8:	cd 01       	movw	r24, r26
    18ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	9a a3       	std	Y+34, r25	; 0x22
    18f4:	89 a3       	std	Y+33, r24	; 0x21
    18f6:	0f c0       	rjmp	.+30     	; 0x1916 <Change_pass+0x28e>
    18f8:	89 e1       	ldi	r24, 0x19	; 25
    18fa:	90 e0       	ldi	r25, 0x00	; 0
    18fc:	98 a3       	std	Y+32, r25	; 0x20
    18fe:	8f 8f       	std	Y+31, r24	; 0x1f
    1900:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1902:	98 a1       	ldd	r25, Y+32	; 0x20
    1904:	01 97       	sbiw	r24, 0x01	; 1
    1906:	f1 f7       	brne	.-4      	; 0x1904 <Change_pass+0x27c>
    1908:	98 a3       	std	Y+32, r25	; 0x20
    190a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    190c:	89 a1       	ldd	r24, Y+33	; 0x21
    190e:	9a a1       	ldd	r25, Y+34	; 0x22
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	9a a3       	std	Y+34, r25	; 0x22
    1914:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1916:	89 a1       	ldd	r24, Y+33	; 0x21
    1918:	9a a1       	ldd	r25, Y+34	; 0x22
    191a:	00 97       	sbiw	r24, 0x00	; 0
    191c:	69 f7       	brne	.-38     	; 0x18f8 <Change_pass+0x270>
    191e:	14 c0       	rjmp	.+40     	; 0x1948 <Change_pass+0x2c0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1920:	6b a1       	ldd	r22, Y+35	; 0x23
    1922:	7c a1       	ldd	r23, Y+36	; 0x24
    1924:	8d a1       	ldd	r24, Y+37	; 0x25
    1926:	9e a1       	ldd	r25, Y+38	; 0x26
    1928:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192c:	dc 01       	movw	r26, r24
    192e:	cb 01       	movw	r24, r22
    1930:	9a a3       	std	Y+34, r25	; 0x22
    1932:	89 a3       	std	Y+33, r24	; 0x21
    1934:	89 a1       	ldd	r24, Y+33	; 0x21
    1936:	9a a1       	ldd	r25, Y+34	; 0x22
    1938:	9e 8f       	std	Y+30, r25	; 0x1e
    193a:	8d 8f       	std	Y+29, r24	; 0x1d
    193c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    193e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1940:	01 97       	sbiw	r24, 0x01	; 1
    1942:	f1 f7       	brne	.-4      	; 0x1940 <Change_pass+0x2b8>
    1944:	9e 8f       	std	Y+30, r25	; 0x1e
    1946:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(500);

			passwor_setting();
    1948:	0e 94 25 06 	call	0xc4a	; 0xc4a <passwor_setting>
    194c:	0b c1       	rjmp	.+534    	; 0x1b64 <Change_pass+0x4dc>
			break;
		}

		else
		{
			g_trials++;
    194e:	80 91 1f 01 	lds	r24, 0x011F
    1952:	8f 5f       	subi	r24, 0xFF	; 255
    1954:	80 93 1f 01 	sts	0x011F, r24
		}
		if(g_trials==1){
    1958:	80 91 1f 01 	lds	r24, 0x011F
    195c:	81 30       	cpi	r24, 0x01	; 1
    195e:	09 f0       	breq	.+2      	; 0x1962 <Change_pass+0x2da>
    1960:	7c c0       	rjmp	.+248    	; 0x1a5a <Change_pass+0x3d2>
			LCD_clearScreen();
    1962:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "TRIALS=1");
    1966:	28 ee       	ldi	r18, 0xE8	; 232
    1968:	30 e0       	ldi	r19, 0x00	; 0
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	61 e0       	ldi	r22, 0x01	; 1
    196e:	a9 01       	movw	r20, r18
    1970:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    1974:	80 e0       	ldi	r24, 0x00	; 0
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	aa ef       	ldi	r26, 0xFA	; 250
    197a:	b3 e4       	ldi	r27, 0x43	; 67
    197c:	89 8f       	std	Y+25, r24	; 0x19
    197e:	9a 8f       	std	Y+26, r25	; 0x1a
    1980:	ab 8f       	std	Y+27, r26	; 0x1b
    1982:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1984:	69 8d       	ldd	r22, Y+25	; 0x19
    1986:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1988:	8b 8d       	ldd	r24, Y+27	; 0x1b
    198a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    198c:	20 e0       	ldi	r18, 0x00	; 0
    198e:	30 e0       	ldi	r19, 0x00	; 0
    1990:	4a e7       	ldi	r20, 0x7A	; 122
    1992:	53 e4       	ldi	r21, 0x43	; 67
    1994:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1998:	dc 01       	movw	r26, r24
    199a:	cb 01       	movw	r24, r22
    199c:	8d 8b       	std	Y+21, r24	; 0x15
    199e:	9e 8b       	std	Y+22, r25	; 0x16
    19a0:	af 8b       	std	Y+23, r26	; 0x17
    19a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19a4:	6d 89       	ldd	r22, Y+21	; 0x15
    19a6:	7e 89       	ldd	r23, Y+22	; 0x16
    19a8:	8f 89       	ldd	r24, Y+23	; 0x17
    19aa:	98 8d       	ldd	r25, Y+24	; 0x18
    19ac:	20 e0       	ldi	r18, 0x00	; 0
    19ae:	30 e0       	ldi	r19, 0x00	; 0
    19b0:	40 e8       	ldi	r20, 0x80	; 128
    19b2:	5f e3       	ldi	r21, 0x3F	; 63
    19b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19b8:	88 23       	and	r24, r24
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <Change_pass+0x33e>
		__ticks = 1;
    19bc:	81 e0       	ldi	r24, 0x01	; 1
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	9c 8b       	std	Y+20, r25	; 0x14
    19c2:	8b 8b       	std	Y+19, r24	; 0x13
    19c4:	3f c0       	rjmp	.+126    	; 0x1a44 <Change_pass+0x3bc>
	else if (__tmp > 65535)
    19c6:	6d 89       	ldd	r22, Y+21	; 0x15
    19c8:	7e 89       	ldd	r23, Y+22	; 0x16
    19ca:	8f 89       	ldd	r24, Y+23	; 0x17
    19cc:	98 8d       	ldd	r25, Y+24	; 0x18
    19ce:	20 e0       	ldi	r18, 0x00	; 0
    19d0:	3f ef       	ldi	r19, 0xFF	; 255
    19d2:	4f e7       	ldi	r20, 0x7F	; 127
    19d4:	57 e4       	ldi	r21, 0x47	; 71
    19d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19da:	18 16       	cp	r1, r24
    19dc:	4c f5       	brge	.+82     	; 0x1a30 <Change_pass+0x3a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19de:	69 8d       	ldd	r22, Y+25	; 0x19
    19e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19e6:	20 e0       	ldi	r18, 0x00	; 0
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	40 e2       	ldi	r20, 0x20	; 32
    19ec:	51 e4       	ldi	r21, 0x41	; 65
    19ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19f2:	dc 01       	movw	r26, r24
    19f4:	cb 01       	movw	r24, r22
    19f6:	bc 01       	movw	r22, r24
    19f8:	cd 01       	movw	r24, r26
    19fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19fe:	dc 01       	movw	r26, r24
    1a00:	cb 01       	movw	r24, r22
    1a02:	9c 8b       	std	Y+20, r25	; 0x14
    1a04:	8b 8b       	std	Y+19, r24	; 0x13
    1a06:	0f c0       	rjmp	.+30     	; 0x1a26 <Change_pass+0x39e>
    1a08:	89 e1       	ldi	r24, 0x19	; 25
    1a0a:	90 e0       	ldi	r25, 0x00	; 0
    1a0c:	9a 8b       	std	Y+18, r25	; 0x12
    1a0e:	89 8b       	std	Y+17, r24	; 0x11
    1a10:	89 89       	ldd	r24, Y+17	; 0x11
    1a12:	9a 89       	ldd	r25, Y+18	; 0x12
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <Change_pass+0x38c>
    1a18:	9a 8b       	std	Y+18, r25	; 0x12
    1a1a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a1c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a1e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a20:	01 97       	sbiw	r24, 0x01	; 1
    1a22:	9c 8b       	std	Y+20, r25	; 0x14
    1a24:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	00 97       	sbiw	r24, 0x00	; 0
    1a2c:	69 f7       	brne	.-38     	; 0x1a08 <Change_pass+0x380>
    1a2e:	95 c0       	rjmp	.+298    	; 0x1b5a <Change_pass+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a30:	6d 89       	ldd	r22, Y+21	; 0x15
    1a32:	7e 89       	ldd	r23, Y+22	; 0x16
    1a34:	8f 89       	ldd	r24, Y+23	; 0x17
    1a36:	98 8d       	ldd	r25, Y+24	; 0x18
    1a38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a3c:	dc 01       	movw	r26, r24
    1a3e:	cb 01       	movw	r24, r22
    1a40:	9c 8b       	std	Y+20, r25	; 0x14
    1a42:	8b 8b       	std	Y+19, r24	; 0x13
    1a44:	8b 89       	ldd	r24, Y+19	; 0x13
    1a46:	9c 89       	ldd	r25, Y+20	; 0x14
    1a48:	98 8b       	std	Y+16, r25	; 0x10
    1a4a:	8f 87       	std	Y+15, r24	; 0x0f
    1a4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a4e:	98 89       	ldd	r25, Y+16	; 0x10
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <Change_pass+0x3c8>
    1a54:	98 8b       	std	Y+16, r25	; 0x10
    1a56:	8f 87       	std	Y+15, r24	; 0x0f
    1a58:	80 c0       	rjmp	.+256    	; 0x1b5a <Change_pass+0x4d2>
			_delay_ms(500);
		}
		else if(g_trials==2){
    1a5a:	80 91 1f 01 	lds	r24, 0x011F
    1a5e:	82 30       	cpi	r24, 0x02	; 2
    1a60:	09 f0       	breq	.+2      	; 0x1a64 <Change_pass+0x3dc>
    1a62:	7b c0       	rjmp	.+246    	; 0x1b5a <Change_pass+0x4d2>
			LCD_clearScreen();
    1a64:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 1, "TRIALS=2");
    1a68:	21 ef       	ldi	r18, 0xF1	; 241
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	80 e0       	ldi	r24, 0x00	; 0
    1a6e:	61 e0       	ldi	r22, 0x01	; 1
    1a70:	a9 01       	movw	r20, r18
    1a72:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
    1a76:	80 e0       	ldi	r24, 0x00	; 0
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	aa ef       	ldi	r26, 0xFA	; 250
    1a7c:	b3 e4       	ldi	r27, 0x43	; 67
    1a7e:	8b 87       	std	Y+11, r24	; 0x0b
    1a80:	9c 87       	std	Y+12, r25	; 0x0c
    1a82:	ad 87       	std	Y+13, r26	; 0x0d
    1a84:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	30 e0       	ldi	r19, 0x00	; 0
    1a92:	4a e7       	ldi	r20, 0x7A	; 122
    1a94:	53 e4       	ldi	r21, 0x43	; 67
    1a96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	cb 01       	movw	r24, r22
    1a9e:	8f 83       	std	Y+7, r24	; 0x07
    1aa0:	98 87       	std	Y+8, r25	; 0x08
    1aa2:	a9 87       	std	Y+9, r26	; 0x09
    1aa4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa6:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa8:	78 85       	ldd	r23, Y+8	; 0x08
    1aaa:	89 85       	ldd	r24, Y+9	; 0x09
    1aac:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aae:	20 e0       	ldi	r18, 0x00	; 0
    1ab0:	30 e0       	ldi	r19, 0x00	; 0
    1ab2:	40 e8       	ldi	r20, 0x80	; 128
    1ab4:	5f e3       	ldi	r21, 0x3F	; 63
    1ab6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aba:	88 23       	and	r24, r24
    1abc:	2c f4       	brge	.+10     	; 0x1ac8 <Change_pass+0x440>
		__ticks = 1;
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	9e 83       	std	Y+6, r25	; 0x06
    1ac4:	8d 83       	std	Y+5, r24	; 0x05
    1ac6:	3f c0       	rjmp	.+126    	; 0x1b46 <Change_pass+0x4be>
	else if (__tmp > 65535)
    1ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    1aca:	78 85       	ldd	r23, Y+8	; 0x08
    1acc:	89 85       	ldd	r24, Y+9	; 0x09
    1ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ad0:	20 e0       	ldi	r18, 0x00	; 0
    1ad2:	3f ef       	ldi	r19, 0xFF	; 255
    1ad4:	4f e7       	ldi	r20, 0x7F	; 127
    1ad6:	57 e4       	ldi	r21, 0x47	; 71
    1ad8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1adc:	18 16       	cp	r1, r24
    1ade:	4c f5       	brge	.+82     	; 0x1b32 <Change_pass+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ae0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae8:	20 e0       	ldi	r18, 0x00	; 0
    1aea:	30 e0       	ldi	r19, 0x00	; 0
    1aec:	40 e2       	ldi	r20, 0x20	; 32
    1aee:	51 e4       	ldi	r21, 0x41	; 65
    1af0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	bc 01       	movw	r22, r24
    1afa:	cd 01       	movw	r24, r26
    1afc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b00:	dc 01       	movw	r26, r24
    1b02:	cb 01       	movw	r24, r22
    1b04:	9e 83       	std	Y+6, r25	; 0x06
    1b06:	8d 83       	std	Y+5, r24	; 0x05
    1b08:	0f c0       	rjmp	.+30     	; 0x1b28 <Change_pass+0x4a0>
    1b0a:	89 e1       	ldi	r24, 0x19	; 25
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
    1b12:	8b 81       	ldd	r24, Y+3	; 0x03
    1b14:	9c 81       	ldd	r25, Y+4	; 0x04
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	f1 f7       	brne	.-4      	; 0x1b16 <Change_pass+0x48e>
    1b1a:	9c 83       	std	Y+4, r25	; 0x04
    1b1c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1b20:	9e 81       	ldd	r25, Y+6	; 0x06
    1b22:	01 97       	sbiw	r24, 0x01	; 1
    1b24:	9e 83       	std	Y+6, r25	; 0x06
    1b26:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b28:	8d 81       	ldd	r24, Y+5	; 0x05
    1b2a:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2c:	00 97       	sbiw	r24, 0x00	; 0
    1b2e:	69 f7       	brne	.-38     	; 0x1b0a <Change_pass+0x482>
    1b30:	14 c0       	rjmp	.+40     	; 0x1b5a <Change_pass+0x4d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b32:	6f 81       	ldd	r22, Y+7	; 0x07
    1b34:	78 85       	ldd	r23, Y+8	; 0x08
    1b36:	89 85       	ldd	r24, Y+9	; 0x09
    1b38:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3e:	dc 01       	movw	r26, r24
    1b40:	cb 01       	movw	r24, r22
    1b42:	9e 83       	std	Y+6, r25	; 0x06
    1b44:	8d 83       	std	Y+5, r24	; 0x05
    1b46:	8d 81       	ldd	r24, Y+5	; 0x05
    1b48:	9e 81       	ldd	r25, Y+6	; 0x06
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
    1b4e:	89 81       	ldd	r24, Y+1	; 0x01
    1b50:	9a 81       	ldd	r25, Y+2	; 0x02
    1b52:	01 97       	sbiw	r24, 0x01	; 1
    1b54:	f1 f7       	brne	.-4      	; 0x1b52 <Change_pass+0x4ca>
    1b56:	9a 83       	std	Y+2, r25	; 0x02
    1b58:	89 83       	std	Y+1, r24	; 0x01
		}




	}while(g_trials<3);
    1b5a:	80 91 1f 01 	lds	r24, 0x011F
    1b5e:	83 30       	cpi	r24, 0x03	; 3
    1b60:	08 f4       	brcc	.+2      	; 0x1b64 <Change_pass+0x4dc>
    1b62:	a5 cd       	rjmp	.-1206   	; 0x16ae <Change_pass+0x26>
	if(g_trials==3){
    1b64:	80 91 1f 01 	lds	r24, 0x011F
    1b68:	83 30       	cpi	r24, 0x03	; 3
    1b6a:	b9 f4       	brne	.+46     	; 0x1b9a <Change_pass+0x512>
		g_ticks=0;
    1b6c:	10 92 1e 01 	sts	0x011E, r1
		LCD_clearScreen();
    1b70:	0e 94 4c 17 	call	0x2e98	; 0x2e98 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 2, "!!!!ERROR!!!!");
    1b74:	2a ef       	ldi	r18, 0xFA	; 250
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	80 e0       	ldi	r24, 0x00	; 0
    1b7a:	62 e0       	ldi	r22, 0x02	; 2
    1b7c:	a9 01       	movw	r20, r18
    1b7e:	0e 94 10 17 	call	0x2e20	; 0x2e20 <LCD_displayStringRowColumn>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
    1b82:	88 e3       	ldi	r24, 0x38	; 56
    1b84:	9b e0       	ldi	r25, 0x0B	; 11
    1b86:	0e 94 22 18 	call	0x3044	; 0x3044 <Timer1_setCallBack>
		while(g_ticks!=60);
    1b8a:	80 91 1e 01 	lds	r24, 0x011E
    1b8e:	8c 33       	cpi	r24, 0x3C	; 60
    1b90:	e1 f7       	brne	.-8      	; 0x1b8a <Change_pass+0x502>
		Timer1_deInit();
    1b92:	0e 94 09 18 	call	0x3012	; 0x3012 <Timer1_deInit>
		g_trials=0;
    1b96:	10 92 1f 01 	sts	0x011F, r1
	}



}
    1b9a:	e8 96       	adiw	r28, 0x38	; 56
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	cf 91       	pop	r28
    1ba8:	df 91       	pop	r29
    1baa:	1f 91       	pop	r17
    1bac:	0f 91       	pop	r16
    1bae:	08 95       	ret

00001bb0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1bb0:	df 93       	push	r29
    1bb2:	cf 93       	push	r28
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <GPIO_setupPinDirection+0x6>
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <GPIO_setupPinDirection+0x8>
    1bb8:	0f 92       	push	r0
    1bba:	cd b7       	in	r28, 0x3d	; 61
    1bbc:	de b7       	in	r29, 0x3e	; 62
    1bbe:	89 83       	std	Y+1, r24	; 0x01
    1bc0:	6a 83       	std	Y+2, r22	; 0x02
    1bc2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	88 30       	cpi	r24, 0x08	; 8
    1bc8:	08 f0       	brcs	.+2      	; 0x1bcc <GPIO_setupPinDirection+0x1c>
    1bca:	d5 c0       	rjmp	.+426    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	84 30       	cpi	r24, 0x04	; 4
    1bd0:	08 f0       	brcs	.+2      	; 0x1bd4 <GPIO_setupPinDirection+0x24>
    1bd2:	d1 c0       	rjmp	.+418    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	28 2f       	mov	r18, r24
    1bd8:	30 e0       	ldi	r19, 0x00	; 0
    1bda:	3d 83       	std	Y+5, r19	; 0x05
    1bdc:	2c 83       	std	Y+4, r18	; 0x04
    1bde:	8c 81       	ldd	r24, Y+4	; 0x04
    1be0:	9d 81       	ldd	r25, Y+5	; 0x05
    1be2:	81 30       	cpi	r24, 0x01	; 1
    1be4:	91 05       	cpc	r25, r1
    1be6:	09 f4       	brne	.+2      	; 0x1bea <GPIO_setupPinDirection+0x3a>
    1be8:	43 c0       	rjmp	.+134    	; 0x1c70 <GPIO_setupPinDirection+0xc0>
    1bea:	2c 81       	ldd	r18, Y+4	; 0x04
    1bec:	3d 81       	ldd	r19, Y+5	; 0x05
    1bee:	22 30       	cpi	r18, 0x02	; 2
    1bf0:	31 05       	cpc	r19, r1
    1bf2:	2c f4       	brge	.+10     	; 0x1bfe <GPIO_setupPinDirection+0x4e>
    1bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    1bf6:	9d 81       	ldd	r25, Y+5	; 0x05
    1bf8:	00 97       	sbiw	r24, 0x00	; 0
    1bfa:	71 f0       	breq	.+28     	; 0x1c18 <GPIO_setupPinDirection+0x68>
    1bfc:	bc c0       	rjmp	.+376    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
    1bfe:	2c 81       	ldd	r18, Y+4	; 0x04
    1c00:	3d 81       	ldd	r19, Y+5	; 0x05
    1c02:	22 30       	cpi	r18, 0x02	; 2
    1c04:	31 05       	cpc	r19, r1
    1c06:	09 f4       	brne	.+2      	; 0x1c0a <GPIO_setupPinDirection+0x5a>
    1c08:	5f c0       	rjmp	.+190    	; 0x1cc8 <GPIO_setupPinDirection+0x118>
    1c0a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c0c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c0e:	83 30       	cpi	r24, 0x03	; 3
    1c10:	91 05       	cpc	r25, r1
    1c12:	09 f4       	brne	.+2      	; 0x1c16 <GPIO_setupPinDirection+0x66>
    1c14:	85 c0       	rjmp	.+266    	; 0x1d20 <GPIO_setupPinDirection+0x170>
    1c16:	af c0       	rjmp	.+350    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c18:	8b 81       	ldd	r24, Y+3	; 0x03
    1c1a:	81 30       	cpi	r24, 0x01	; 1
    1c1c:	a1 f4       	brne	.+40     	; 0x1c46 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c1e:	aa e3       	ldi	r26, 0x3A	; 58
    1c20:	b0 e0       	ldi	r27, 0x00	; 0
    1c22:	ea e3       	ldi	r30, 0x3A	; 58
    1c24:	f0 e0       	ldi	r31, 0x00	; 0
    1c26:	80 81       	ld	r24, Z
    1c28:	48 2f       	mov	r20, r24
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	28 2f       	mov	r18, r24
    1c2e:	30 e0       	ldi	r19, 0x00	; 0
    1c30:	81 e0       	ldi	r24, 0x01	; 1
    1c32:	90 e0       	ldi	r25, 0x00	; 0
    1c34:	02 2e       	mov	r0, r18
    1c36:	02 c0       	rjmp	.+4      	; 0x1c3c <GPIO_setupPinDirection+0x8c>
    1c38:	88 0f       	add	r24, r24
    1c3a:	99 1f       	adc	r25, r25
    1c3c:	0a 94       	dec	r0
    1c3e:	e2 f7       	brpl	.-8      	; 0x1c38 <GPIO_setupPinDirection+0x88>
    1c40:	84 2b       	or	r24, r20
    1c42:	8c 93       	st	X, r24
    1c44:	98 c0       	rjmp	.+304    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1c46:	aa e3       	ldi	r26, 0x3A	; 58
    1c48:	b0 e0       	ldi	r27, 0x00	; 0
    1c4a:	ea e3       	ldi	r30, 0x3A	; 58
    1c4c:	f0 e0       	ldi	r31, 0x00	; 0
    1c4e:	80 81       	ld	r24, Z
    1c50:	48 2f       	mov	r20, r24
    1c52:	8a 81       	ldd	r24, Y+2	; 0x02
    1c54:	28 2f       	mov	r18, r24
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	81 e0       	ldi	r24, 0x01	; 1
    1c5a:	90 e0       	ldi	r25, 0x00	; 0
    1c5c:	02 2e       	mov	r0, r18
    1c5e:	02 c0       	rjmp	.+4      	; 0x1c64 <GPIO_setupPinDirection+0xb4>
    1c60:	88 0f       	add	r24, r24
    1c62:	99 1f       	adc	r25, r25
    1c64:	0a 94       	dec	r0
    1c66:	e2 f7       	brpl	.-8      	; 0x1c60 <GPIO_setupPinDirection+0xb0>
    1c68:	80 95       	com	r24
    1c6a:	84 23       	and	r24, r20
    1c6c:	8c 93       	st	X, r24
    1c6e:	83 c0       	rjmp	.+262    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	a1 f4       	brne	.+40     	; 0x1c9e <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1c76:	a7 e3       	ldi	r26, 0x37	; 55
    1c78:	b0 e0       	ldi	r27, 0x00	; 0
    1c7a:	e7 e3       	ldi	r30, 0x37	; 55
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 81       	ld	r24, Z
    1c80:	48 2f       	mov	r20, r24
    1c82:	8a 81       	ldd	r24, Y+2	; 0x02
    1c84:	28 2f       	mov	r18, r24
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	81 e0       	ldi	r24, 0x01	; 1
    1c8a:	90 e0       	ldi	r25, 0x00	; 0
    1c8c:	02 2e       	mov	r0, r18
    1c8e:	02 c0       	rjmp	.+4      	; 0x1c94 <GPIO_setupPinDirection+0xe4>
    1c90:	88 0f       	add	r24, r24
    1c92:	99 1f       	adc	r25, r25
    1c94:	0a 94       	dec	r0
    1c96:	e2 f7       	brpl	.-8      	; 0x1c90 <GPIO_setupPinDirection+0xe0>
    1c98:	84 2b       	or	r24, r20
    1c9a:	8c 93       	st	X, r24
    1c9c:	6c c0       	rjmp	.+216    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1c9e:	a7 e3       	ldi	r26, 0x37	; 55
    1ca0:	b0 e0       	ldi	r27, 0x00	; 0
    1ca2:	e7 e3       	ldi	r30, 0x37	; 55
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	80 81       	ld	r24, Z
    1ca8:	48 2f       	mov	r20, r24
    1caa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cac:	28 2f       	mov	r18, r24
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	81 e0       	ldi	r24, 0x01	; 1
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	02 2e       	mov	r0, r18
    1cb6:	02 c0       	rjmp	.+4      	; 0x1cbc <GPIO_setupPinDirection+0x10c>
    1cb8:	88 0f       	add	r24, r24
    1cba:	99 1f       	adc	r25, r25
    1cbc:	0a 94       	dec	r0
    1cbe:	e2 f7       	brpl	.-8      	; 0x1cb8 <GPIO_setupPinDirection+0x108>
    1cc0:	80 95       	com	r24
    1cc2:	84 23       	and	r24, r20
    1cc4:	8c 93       	st	X, r24
    1cc6:	57 c0       	rjmp	.+174    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	81 30       	cpi	r24, 0x01	; 1
    1ccc:	a1 f4       	brne	.+40     	; 0x1cf6 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1cce:	a4 e3       	ldi	r26, 0x34	; 52
    1cd0:	b0 e0       	ldi	r27, 0x00	; 0
    1cd2:	e4 e3       	ldi	r30, 0x34	; 52
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	48 2f       	mov	r20, r24
    1cda:	8a 81       	ldd	r24, Y+2	; 0x02
    1cdc:	28 2f       	mov	r18, r24
    1cde:	30 e0       	ldi	r19, 0x00	; 0
    1ce0:	81 e0       	ldi	r24, 0x01	; 1
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	02 2e       	mov	r0, r18
    1ce6:	02 c0       	rjmp	.+4      	; 0x1cec <GPIO_setupPinDirection+0x13c>
    1ce8:	88 0f       	add	r24, r24
    1cea:	99 1f       	adc	r25, r25
    1cec:	0a 94       	dec	r0
    1cee:	e2 f7       	brpl	.-8      	; 0x1ce8 <GPIO_setupPinDirection+0x138>
    1cf0:	84 2b       	or	r24, r20
    1cf2:	8c 93       	st	X, r24
    1cf4:	40 c0       	rjmp	.+128    	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1cf6:	a4 e3       	ldi	r26, 0x34	; 52
    1cf8:	b0 e0       	ldi	r27, 0x00	; 0
    1cfa:	e4 e3       	ldi	r30, 0x34	; 52
    1cfc:	f0 e0       	ldi	r31, 0x00	; 0
    1cfe:	80 81       	ld	r24, Z
    1d00:	48 2f       	mov	r20, r24
    1d02:	8a 81       	ldd	r24, Y+2	; 0x02
    1d04:	28 2f       	mov	r18, r24
    1d06:	30 e0       	ldi	r19, 0x00	; 0
    1d08:	81 e0       	ldi	r24, 0x01	; 1
    1d0a:	90 e0       	ldi	r25, 0x00	; 0
    1d0c:	02 2e       	mov	r0, r18
    1d0e:	02 c0       	rjmp	.+4      	; 0x1d14 <GPIO_setupPinDirection+0x164>
    1d10:	88 0f       	add	r24, r24
    1d12:	99 1f       	adc	r25, r25
    1d14:	0a 94       	dec	r0
    1d16:	e2 f7       	brpl	.-8      	; 0x1d10 <GPIO_setupPinDirection+0x160>
    1d18:	80 95       	com	r24
    1d1a:	84 23       	and	r24, r20
    1d1c:	8c 93       	st	X, r24
    1d1e:	2b c0       	rjmp	.+86     	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d20:	8b 81       	ldd	r24, Y+3	; 0x03
    1d22:	81 30       	cpi	r24, 0x01	; 1
    1d24:	a1 f4       	brne	.+40     	; 0x1d4e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d26:	a1 e3       	ldi	r26, 0x31	; 49
    1d28:	b0 e0       	ldi	r27, 0x00	; 0
    1d2a:	e1 e3       	ldi	r30, 0x31	; 49
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	48 2f       	mov	r20, r24
    1d32:	8a 81       	ldd	r24, Y+2	; 0x02
    1d34:	28 2f       	mov	r18, r24
    1d36:	30 e0       	ldi	r19, 0x00	; 0
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	02 2e       	mov	r0, r18
    1d3e:	02 c0       	rjmp	.+4      	; 0x1d44 <GPIO_setupPinDirection+0x194>
    1d40:	88 0f       	add	r24, r24
    1d42:	99 1f       	adc	r25, r25
    1d44:	0a 94       	dec	r0
    1d46:	e2 f7       	brpl	.-8      	; 0x1d40 <GPIO_setupPinDirection+0x190>
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	14 c0       	rjmp	.+40     	; 0x1d76 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1d4e:	a1 e3       	ldi	r26, 0x31	; 49
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e1 e3       	ldi	r30, 0x31	; 49
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 2e       	mov	r0, r18
    1d66:	02 c0       	rjmp	.+4      	; 0x1d6c <GPIO_setupPinDirection+0x1bc>
    1d68:	88 0f       	add	r24, r24
    1d6a:	99 1f       	adc	r25, r25
    1d6c:	0a 94       	dec	r0
    1d6e:	e2 f7       	brpl	.-8      	; 0x1d68 <GPIO_setupPinDirection+0x1b8>
    1d70:	80 95       	com	r24
    1d72:	84 23       	and	r24, r20
    1d74:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1d76:	0f 90       	pop	r0
    1d78:	0f 90       	pop	r0
    1d7a:	0f 90       	pop	r0
    1d7c:	0f 90       	pop	r0
    1d7e:	0f 90       	pop	r0
    1d80:	cf 91       	pop	r28
    1d82:	df 91       	pop	r29
    1d84:	08 95       	ret

00001d86 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1d86:	df 93       	push	r29
    1d88:	cf 93       	push	r28
    1d8a:	00 d0       	rcall	.+0      	; 0x1d8c <GPIO_writePin+0x6>
    1d8c:	00 d0       	rcall	.+0      	; 0x1d8e <GPIO_writePin+0x8>
    1d8e:	0f 92       	push	r0
    1d90:	cd b7       	in	r28, 0x3d	; 61
    1d92:	de b7       	in	r29, 0x3e	; 62
    1d94:	89 83       	std	Y+1, r24	; 0x01
    1d96:	6a 83       	std	Y+2, r22	; 0x02
    1d98:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1d9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9c:	88 30       	cpi	r24, 0x08	; 8
    1d9e:	08 f0       	brcs	.+2      	; 0x1da2 <GPIO_writePin+0x1c>
    1da0:	d5 c0       	rjmp	.+426    	; 0x1f4c <GPIO_writePin+0x1c6>
    1da2:	89 81       	ldd	r24, Y+1	; 0x01
    1da4:	84 30       	cpi	r24, 0x04	; 4
    1da6:	08 f0       	brcs	.+2      	; 0x1daa <GPIO_writePin+0x24>
    1da8:	d1 c0       	rjmp	.+418    	; 0x1f4c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1daa:	89 81       	ldd	r24, Y+1	; 0x01
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3d 83       	std	Y+5, r19	; 0x05
    1db2:	2c 83       	std	Y+4, r18	; 0x04
    1db4:	8c 81       	ldd	r24, Y+4	; 0x04
    1db6:	9d 81       	ldd	r25, Y+5	; 0x05
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 05       	cpc	r25, r1
    1dbc:	09 f4       	brne	.+2      	; 0x1dc0 <GPIO_writePin+0x3a>
    1dbe:	43 c0       	rjmp	.+134    	; 0x1e46 <GPIO_writePin+0xc0>
    1dc0:	2c 81       	ldd	r18, Y+4	; 0x04
    1dc2:	3d 81       	ldd	r19, Y+5	; 0x05
    1dc4:	22 30       	cpi	r18, 0x02	; 2
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	2c f4       	brge	.+10     	; 0x1dd4 <GPIO_writePin+0x4e>
    1dca:	8c 81       	ldd	r24, Y+4	; 0x04
    1dcc:	9d 81       	ldd	r25, Y+5	; 0x05
    1dce:	00 97       	sbiw	r24, 0x00	; 0
    1dd0:	71 f0       	breq	.+28     	; 0x1dee <GPIO_writePin+0x68>
    1dd2:	bc c0       	rjmp	.+376    	; 0x1f4c <GPIO_writePin+0x1c6>
    1dd4:	2c 81       	ldd	r18, Y+4	; 0x04
    1dd6:	3d 81       	ldd	r19, Y+5	; 0x05
    1dd8:	22 30       	cpi	r18, 0x02	; 2
    1dda:	31 05       	cpc	r19, r1
    1ddc:	09 f4       	brne	.+2      	; 0x1de0 <GPIO_writePin+0x5a>
    1dde:	5f c0       	rjmp	.+190    	; 0x1e9e <GPIO_writePin+0x118>
    1de0:	8c 81       	ldd	r24, Y+4	; 0x04
    1de2:	9d 81       	ldd	r25, Y+5	; 0x05
    1de4:	83 30       	cpi	r24, 0x03	; 3
    1de6:	91 05       	cpc	r25, r1
    1de8:	09 f4       	brne	.+2      	; 0x1dec <GPIO_writePin+0x66>
    1dea:	85 c0       	rjmp	.+266    	; 0x1ef6 <GPIO_writePin+0x170>
    1dec:	af c0       	rjmp	.+350    	; 0x1f4c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1dee:	8b 81       	ldd	r24, Y+3	; 0x03
    1df0:	81 30       	cpi	r24, 0x01	; 1
    1df2:	a1 f4       	brne	.+40     	; 0x1e1c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1df4:	ab e3       	ldi	r26, 0x3B	; 59
    1df6:	b0 e0       	ldi	r27, 0x00	; 0
    1df8:	eb e3       	ldi	r30, 0x3B	; 59
    1dfa:	f0 e0       	ldi	r31, 0x00	; 0
    1dfc:	80 81       	ld	r24, Z
    1dfe:	48 2f       	mov	r20, r24
    1e00:	8a 81       	ldd	r24, Y+2	; 0x02
    1e02:	28 2f       	mov	r18, r24
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	02 2e       	mov	r0, r18
    1e0c:	02 c0       	rjmp	.+4      	; 0x1e12 <GPIO_writePin+0x8c>
    1e0e:	88 0f       	add	r24, r24
    1e10:	99 1f       	adc	r25, r25
    1e12:	0a 94       	dec	r0
    1e14:	e2 f7       	brpl	.-8      	; 0x1e0e <GPIO_writePin+0x88>
    1e16:	84 2b       	or	r24, r20
    1e18:	8c 93       	st	X, r24
    1e1a:	98 c0       	rjmp	.+304    	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e1c:	ab e3       	ldi	r26, 0x3B	; 59
    1e1e:	b0 e0       	ldi	r27, 0x00	; 0
    1e20:	eb e3       	ldi	r30, 0x3B	; 59
    1e22:	f0 e0       	ldi	r31, 0x00	; 0
    1e24:	80 81       	ld	r24, Z
    1e26:	48 2f       	mov	r20, r24
    1e28:	8a 81       	ldd	r24, Y+2	; 0x02
    1e2a:	28 2f       	mov	r18, r24
    1e2c:	30 e0       	ldi	r19, 0x00	; 0
    1e2e:	81 e0       	ldi	r24, 0x01	; 1
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	02 2e       	mov	r0, r18
    1e34:	02 c0       	rjmp	.+4      	; 0x1e3a <GPIO_writePin+0xb4>
    1e36:	88 0f       	add	r24, r24
    1e38:	99 1f       	adc	r25, r25
    1e3a:	0a 94       	dec	r0
    1e3c:	e2 f7       	brpl	.-8      	; 0x1e36 <GPIO_writePin+0xb0>
    1e3e:	80 95       	com	r24
    1e40:	84 23       	and	r24, r20
    1e42:	8c 93       	st	X, r24
    1e44:	83 c0       	rjmp	.+262    	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	81 30       	cpi	r24, 0x01	; 1
    1e4a:	a1 f4       	brne	.+40     	; 0x1e74 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1e4c:	a8 e3       	ldi	r26, 0x38	; 56
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e8 e3       	ldi	r30, 0x38	; 56
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 81       	ld	r24, Z
    1e56:	48 2f       	mov	r20, r24
    1e58:	8a 81       	ldd	r24, Y+2	; 0x02
    1e5a:	28 2f       	mov	r18, r24
    1e5c:	30 e0       	ldi	r19, 0x00	; 0
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	02 2e       	mov	r0, r18
    1e64:	02 c0       	rjmp	.+4      	; 0x1e6a <GPIO_writePin+0xe4>
    1e66:	88 0f       	add	r24, r24
    1e68:	99 1f       	adc	r25, r25
    1e6a:	0a 94       	dec	r0
    1e6c:	e2 f7       	brpl	.-8      	; 0x1e66 <GPIO_writePin+0xe0>
    1e6e:	84 2b       	or	r24, r20
    1e70:	8c 93       	st	X, r24
    1e72:	6c c0       	rjmp	.+216    	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1e74:	a8 e3       	ldi	r26, 0x38	; 56
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e8 e3       	ldi	r30, 0x38	; 56
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	48 2f       	mov	r20, r24
    1e80:	8a 81       	ldd	r24, Y+2	; 0x02
    1e82:	28 2f       	mov	r18, r24
    1e84:	30 e0       	ldi	r19, 0x00	; 0
    1e86:	81 e0       	ldi	r24, 0x01	; 1
    1e88:	90 e0       	ldi	r25, 0x00	; 0
    1e8a:	02 2e       	mov	r0, r18
    1e8c:	02 c0       	rjmp	.+4      	; 0x1e92 <GPIO_writePin+0x10c>
    1e8e:	88 0f       	add	r24, r24
    1e90:	99 1f       	adc	r25, r25
    1e92:	0a 94       	dec	r0
    1e94:	e2 f7       	brpl	.-8      	; 0x1e8e <GPIO_writePin+0x108>
    1e96:	80 95       	com	r24
    1e98:	84 23       	and	r24, r20
    1e9a:	8c 93       	st	X, r24
    1e9c:	57 c0       	rjmp	.+174    	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1e9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1ea0:	81 30       	cpi	r24, 0x01	; 1
    1ea2:	a1 f4       	brne	.+40     	; 0x1ecc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1ea4:	a5 e3       	ldi	r26, 0x35	; 53
    1ea6:	b0 e0       	ldi	r27, 0x00	; 0
    1ea8:	e5 e3       	ldi	r30, 0x35	; 53
    1eaa:	f0 e0       	ldi	r31, 0x00	; 0
    1eac:	80 81       	ld	r24, Z
    1eae:	48 2f       	mov	r20, r24
    1eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb2:	28 2f       	mov	r18, r24
    1eb4:	30 e0       	ldi	r19, 0x00	; 0
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	90 e0       	ldi	r25, 0x00	; 0
    1eba:	02 2e       	mov	r0, r18
    1ebc:	02 c0       	rjmp	.+4      	; 0x1ec2 <GPIO_writePin+0x13c>
    1ebe:	88 0f       	add	r24, r24
    1ec0:	99 1f       	adc	r25, r25
    1ec2:	0a 94       	dec	r0
    1ec4:	e2 f7       	brpl	.-8      	; 0x1ebe <GPIO_writePin+0x138>
    1ec6:	84 2b       	or	r24, r20
    1ec8:	8c 93       	st	X, r24
    1eca:	40 c0       	rjmp	.+128    	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1ecc:	a5 e3       	ldi	r26, 0x35	; 53
    1ece:	b0 e0       	ldi	r27, 0x00	; 0
    1ed0:	e5 e3       	ldi	r30, 0x35	; 53
    1ed2:	f0 e0       	ldi	r31, 0x00	; 0
    1ed4:	80 81       	ld	r24, Z
    1ed6:	48 2f       	mov	r20, r24
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	28 2f       	mov	r18, r24
    1edc:	30 e0       	ldi	r19, 0x00	; 0
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	90 e0       	ldi	r25, 0x00	; 0
    1ee2:	02 2e       	mov	r0, r18
    1ee4:	02 c0       	rjmp	.+4      	; 0x1eea <GPIO_writePin+0x164>
    1ee6:	88 0f       	add	r24, r24
    1ee8:	99 1f       	adc	r25, r25
    1eea:	0a 94       	dec	r0
    1eec:	e2 f7       	brpl	.-8      	; 0x1ee6 <GPIO_writePin+0x160>
    1eee:	80 95       	com	r24
    1ef0:	84 23       	and	r24, r20
    1ef2:	8c 93       	st	X, r24
    1ef4:	2b c0       	rjmp	.+86     	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ef6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef8:	81 30       	cpi	r24, 0x01	; 1
    1efa:	a1 f4       	brne	.+40     	; 0x1f24 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1efc:	a2 e3       	ldi	r26, 0x32	; 50
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e2 e3       	ldi	r30, 0x32	; 50
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	48 2f       	mov	r20, r24
    1f08:	8a 81       	ldd	r24, Y+2	; 0x02
    1f0a:	28 2f       	mov	r18, r24
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	02 2e       	mov	r0, r18
    1f14:	02 c0       	rjmp	.+4      	; 0x1f1a <GPIO_writePin+0x194>
    1f16:	88 0f       	add	r24, r24
    1f18:	99 1f       	adc	r25, r25
    1f1a:	0a 94       	dec	r0
    1f1c:	e2 f7       	brpl	.-8      	; 0x1f16 <GPIO_writePin+0x190>
    1f1e:	84 2b       	or	r24, r20
    1f20:	8c 93       	st	X, r24
    1f22:	14 c0       	rjmp	.+40     	; 0x1f4c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f24:	a2 e3       	ldi	r26, 0x32	; 50
    1f26:	b0 e0       	ldi	r27, 0x00	; 0
    1f28:	e2 e3       	ldi	r30, 0x32	; 50
    1f2a:	f0 e0       	ldi	r31, 0x00	; 0
    1f2c:	80 81       	ld	r24, Z
    1f2e:	48 2f       	mov	r20, r24
    1f30:	8a 81       	ldd	r24, Y+2	; 0x02
    1f32:	28 2f       	mov	r18, r24
    1f34:	30 e0       	ldi	r19, 0x00	; 0
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	02 2e       	mov	r0, r18
    1f3c:	02 c0       	rjmp	.+4      	; 0x1f42 <GPIO_writePin+0x1bc>
    1f3e:	88 0f       	add	r24, r24
    1f40:	99 1f       	adc	r25, r25
    1f42:	0a 94       	dec	r0
    1f44:	e2 f7       	brpl	.-8      	; 0x1f3e <GPIO_writePin+0x1b8>
    1f46:	80 95       	com	r24
    1f48:	84 23       	and	r24, r20
    1f4a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1f4c:	0f 90       	pop	r0
    1f4e:	0f 90       	pop	r0
    1f50:	0f 90       	pop	r0
    1f52:	0f 90       	pop	r0
    1f54:	0f 90       	pop	r0
    1f56:	cf 91       	pop	r28
    1f58:	df 91       	pop	r29
    1f5a:	08 95       	ret

00001f5c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1f5c:	df 93       	push	r29
    1f5e:	cf 93       	push	r28
    1f60:	00 d0       	rcall	.+0      	; 0x1f62 <GPIO_readPin+0x6>
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <GPIO_readPin+0x8>
    1f64:	0f 92       	push	r0
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
    1f6a:	8a 83       	std	Y+2, r24	; 0x02
    1f6c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1f6e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1f70:	8b 81       	ldd	r24, Y+3	; 0x03
    1f72:	88 30       	cpi	r24, 0x08	; 8
    1f74:	08 f0       	brcs	.+2      	; 0x1f78 <GPIO_readPin+0x1c>
    1f76:	84 c0       	rjmp	.+264    	; 0x2080 <GPIO_readPin+0x124>
    1f78:	8a 81       	ldd	r24, Y+2	; 0x02
    1f7a:	84 30       	cpi	r24, 0x04	; 4
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <GPIO_readPin+0x24>
    1f7e:	80 c0       	rjmp	.+256    	; 0x2080 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	3d 83       	std	Y+5, r19	; 0x05
    1f88:	2c 83       	std	Y+4, r18	; 0x04
    1f8a:	4c 81       	ldd	r20, Y+4	; 0x04
    1f8c:	5d 81       	ldd	r21, Y+5	; 0x05
    1f8e:	41 30       	cpi	r20, 0x01	; 1
    1f90:	51 05       	cpc	r21, r1
    1f92:	79 f1       	breq	.+94     	; 0x1ff2 <GPIO_readPin+0x96>
    1f94:	8c 81       	ldd	r24, Y+4	; 0x04
    1f96:	9d 81       	ldd	r25, Y+5	; 0x05
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	91 05       	cpc	r25, r1
    1f9c:	34 f4       	brge	.+12     	; 0x1faa <GPIO_readPin+0x4e>
    1f9e:	2c 81       	ldd	r18, Y+4	; 0x04
    1fa0:	3d 81       	ldd	r19, Y+5	; 0x05
    1fa2:	21 15       	cp	r18, r1
    1fa4:	31 05       	cpc	r19, r1
    1fa6:	69 f0       	breq	.+26     	; 0x1fc2 <GPIO_readPin+0x66>
    1fa8:	6b c0       	rjmp	.+214    	; 0x2080 <GPIO_readPin+0x124>
    1faa:	4c 81       	ldd	r20, Y+4	; 0x04
    1fac:	5d 81       	ldd	r21, Y+5	; 0x05
    1fae:	42 30       	cpi	r20, 0x02	; 2
    1fb0:	51 05       	cpc	r21, r1
    1fb2:	b9 f1       	breq	.+110    	; 0x2022 <GPIO_readPin+0xc6>
    1fb4:	8c 81       	ldd	r24, Y+4	; 0x04
    1fb6:	9d 81       	ldd	r25, Y+5	; 0x05
    1fb8:	83 30       	cpi	r24, 0x03	; 3
    1fba:	91 05       	cpc	r25, r1
    1fbc:	09 f4       	brne	.+2      	; 0x1fc0 <GPIO_readPin+0x64>
    1fbe:	49 c0       	rjmp	.+146    	; 0x2052 <GPIO_readPin+0xf6>
    1fc0:	5f c0       	rjmp	.+190    	; 0x2080 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1fc2:	e9 e3       	ldi	r30, 0x39	; 57
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	28 2f       	mov	r18, r24
    1fca:	30 e0       	ldi	r19, 0x00	; 0
    1fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1fce:	88 2f       	mov	r24, r24
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	a9 01       	movw	r20, r18
    1fd4:	02 c0       	rjmp	.+4      	; 0x1fda <GPIO_readPin+0x7e>
    1fd6:	55 95       	asr	r21
    1fd8:	47 95       	ror	r20
    1fda:	8a 95       	dec	r24
    1fdc:	e2 f7       	brpl	.-8      	; 0x1fd6 <GPIO_readPin+0x7a>
    1fde:	ca 01       	movw	r24, r20
    1fe0:	81 70       	andi	r24, 0x01	; 1
    1fe2:	90 70       	andi	r25, 0x00	; 0
    1fe4:	88 23       	and	r24, r24
    1fe6:	19 f0       	breq	.+6      	; 0x1fee <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	49 c0       	rjmp	.+146    	; 0x2080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1fee:	19 82       	std	Y+1, r1	; 0x01
    1ff0:	47 c0       	rjmp	.+142    	; 0x2080 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1ff2:	e6 e3       	ldi	r30, 0x36	; 54
    1ff4:	f0 e0       	ldi	r31, 0x00	; 0
    1ff6:	80 81       	ld	r24, Z
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    1ffe:	88 2f       	mov	r24, r24
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	a9 01       	movw	r20, r18
    2004:	02 c0       	rjmp	.+4      	; 0x200a <GPIO_readPin+0xae>
    2006:	55 95       	asr	r21
    2008:	47 95       	ror	r20
    200a:	8a 95       	dec	r24
    200c:	e2 f7       	brpl	.-8      	; 0x2006 <GPIO_readPin+0xaa>
    200e:	ca 01       	movw	r24, r20
    2010:	81 70       	andi	r24, 0x01	; 1
    2012:	90 70       	andi	r25, 0x00	; 0
    2014:	88 23       	and	r24, r24
    2016:	19 f0       	breq	.+6      	; 0x201e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2018:	81 e0       	ldi	r24, 0x01	; 1
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	31 c0       	rjmp	.+98     	; 0x2080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    201e:	19 82       	std	Y+1, r1	; 0x01
    2020:	2f c0       	rjmp	.+94     	; 0x2080 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2022:	e3 e3       	ldi	r30, 0x33	; 51
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	80 81       	ld	r24, Z
    2028:	28 2f       	mov	r18, r24
    202a:	30 e0       	ldi	r19, 0x00	; 0
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	88 2f       	mov	r24, r24
    2030:	90 e0       	ldi	r25, 0x00	; 0
    2032:	a9 01       	movw	r20, r18
    2034:	02 c0       	rjmp	.+4      	; 0x203a <GPIO_readPin+0xde>
    2036:	55 95       	asr	r21
    2038:	47 95       	ror	r20
    203a:	8a 95       	dec	r24
    203c:	e2 f7       	brpl	.-8      	; 0x2036 <GPIO_readPin+0xda>
    203e:	ca 01       	movw	r24, r20
    2040:	81 70       	andi	r24, 0x01	; 1
    2042:	90 70       	andi	r25, 0x00	; 0
    2044:	88 23       	and	r24, r24
    2046:	19 f0       	breq	.+6      	; 0x204e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	89 83       	std	Y+1, r24	; 0x01
    204c:	19 c0       	rjmp	.+50     	; 0x2080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    204e:	19 82       	std	Y+1, r1	; 0x01
    2050:	17 c0       	rjmp	.+46     	; 0x2080 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2052:	e0 e3       	ldi	r30, 0x30	; 48
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	80 81       	ld	r24, Z
    2058:	28 2f       	mov	r18, r24
    205a:	30 e0       	ldi	r19, 0x00	; 0
    205c:	8b 81       	ldd	r24, Y+3	; 0x03
    205e:	88 2f       	mov	r24, r24
    2060:	90 e0       	ldi	r25, 0x00	; 0
    2062:	a9 01       	movw	r20, r18
    2064:	02 c0       	rjmp	.+4      	; 0x206a <GPIO_readPin+0x10e>
    2066:	55 95       	asr	r21
    2068:	47 95       	ror	r20
    206a:	8a 95       	dec	r24
    206c:	e2 f7       	brpl	.-8      	; 0x2066 <GPIO_readPin+0x10a>
    206e:	ca 01       	movw	r24, r20
    2070:	81 70       	andi	r24, 0x01	; 1
    2072:	90 70       	andi	r25, 0x00	; 0
    2074:	88 23       	and	r24, r24
    2076:	19 f0       	breq	.+6      	; 0x207e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2078:	81 e0       	ldi	r24, 0x01	; 1
    207a:	89 83       	std	Y+1, r24	; 0x01
    207c:	01 c0       	rjmp	.+2      	; 0x2080 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    207e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2080:	89 81       	ldd	r24, Y+1	; 0x01
}
    2082:	0f 90       	pop	r0
    2084:	0f 90       	pop	r0
    2086:	0f 90       	pop	r0
    2088:	0f 90       	pop	r0
    208a:	0f 90       	pop	r0
    208c:	cf 91       	pop	r28
    208e:	df 91       	pop	r29
    2090:	08 95       	ret

00002092 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    2092:	df 93       	push	r29
    2094:	cf 93       	push	r28
    2096:	00 d0       	rcall	.+0      	; 0x2098 <GPIO_setupPortDirection+0x6>
    2098:	00 d0       	rcall	.+0      	; 0x209a <GPIO_setupPortDirection+0x8>
    209a:	cd b7       	in	r28, 0x3d	; 61
    209c:	de b7       	in	r29, 0x3e	; 62
    209e:	89 83       	std	Y+1, r24	; 0x01
    20a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    20a2:	89 81       	ldd	r24, Y+1	; 0x01
    20a4:	84 30       	cpi	r24, 0x04	; 4
    20a6:	90 f5       	brcc	.+100    	; 0x210c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    20a8:	89 81       	ldd	r24, Y+1	; 0x01
    20aa:	28 2f       	mov	r18, r24
    20ac:	30 e0       	ldi	r19, 0x00	; 0
    20ae:	3c 83       	std	Y+4, r19	; 0x04
    20b0:	2b 83       	std	Y+3, r18	; 0x03
    20b2:	8b 81       	ldd	r24, Y+3	; 0x03
    20b4:	9c 81       	ldd	r25, Y+4	; 0x04
    20b6:	81 30       	cpi	r24, 0x01	; 1
    20b8:	91 05       	cpc	r25, r1
    20ba:	d1 f0       	breq	.+52     	; 0x20f0 <GPIO_setupPortDirection+0x5e>
    20bc:	2b 81       	ldd	r18, Y+3	; 0x03
    20be:	3c 81       	ldd	r19, Y+4	; 0x04
    20c0:	22 30       	cpi	r18, 0x02	; 2
    20c2:	31 05       	cpc	r19, r1
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <GPIO_setupPortDirection+0x3e>
    20c6:	8b 81       	ldd	r24, Y+3	; 0x03
    20c8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ca:	00 97       	sbiw	r24, 0x00	; 0
    20cc:	61 f0       	breq	.+24     	; 0x20e6 <GPIO_setupPortDirection+0x54>
    20ce:	1e c0       	rjmp	.+60     	; 0x210c <GPIO_setupPortDirection+0x7a>
    20d0:	2b 81       	ldd	r18, Y+3	; 0x03
    20d2:	3c 81       	ldd	r19, Y+4	; 0x04
    20d4:	22 30       	cpi	r18, 0x02	; 2
    20d6:	31 05       	cpc	r19, r1
    20d8:	81 f0       	breq	.+32     	; 0x20fa <GPIO_setupPortDirection+0x68>
    20da:	8b 81       	ldd	r24, Y+3	; 0x03
    20dc:	9c 81       	ldd	r25, Y+4	; 0x04
    20de:	83 30       	cpi	r24, 0x03	; 3
    20e0:	91 05       	cpc	r25, r1
    20e2:	81 f0       	breq	.+32     	; 0x2104 <GPIO_setupPortDirection+0x72>
    20e4:	13 c0       	rjmp	.+38     	; 0x210c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    20e6:	ea e3       	ldi	r30, 0x3A	; 58
    20e8:	f0 e0       	ldi	r31, 0x00	; 0
    20ea:	8a 81       	ldd	r24, Y+2	; 0x02
    20ec:	80 83       	st	Z, r24
    20ee:	0e c0       	rjmp	.+28     	; 0x210c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    20f0:	e7 e3       	ldi	r30, 0x37	; 55
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	8a 81       	ldd	r24, Y+2	; 0x02
    20f6:	80 83       	st	Z, r24
    20f8:	09 c0       	rjmp	.+18     	; 0x210c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    20fa:	e4 e3       	ldi	r30, 0x34	; 52
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2100:	80 83       	st	Z, r24
    2102:	04 c0       	rjmp	.+8      	; 0x210c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2104:	e1 e3       	ldi	r30, 0x31	; 49
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	8a 81       	ldd	r24, Y+2	; 0x02
    210a:	80 83       	st	Z, r24
			break;
		}
	}
}
    210c:	0f 90       	pop	r0
    210e:	0f 90       	pop	r0
    2110:	0f 90       	pop	r0
    2112:	0f 90       	pop	r0
    2114:	cf 91       	pop	r28
    2116:	df 91       	pop	r29
    2118:	08 95       	ret

0000211a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    211a:	df 93       	push	r29
    211c:	cf 93       	push	r28
    211e:	00 d0       	rcall	.+0      	; 0x2120 <GPIO_writePort+0x6>
    2120:	00 d0       	rcall	.+0      	; 0x2122 <GPIO_writePort+0x8>
    2122:	cd b7       	in	r28, 0x3d	; 61
    2124:	de b7       	in	r29, 0x3e	; 62
    2126:	89 83       	std	Y+1, r24	; 0x01
    2128:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	84 30       	cpi	r24, 0x04	; 4
    212e:	90 f5       	brcc	.+100    	; 0x2194 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    2130:	89 81       	ldd	r24, Y+1	; 0x01
    2132:	28 2f       	mov	r18, r24
    2134:	30 e0       	ldi	r19, 0x00	; 0
    2136:	3c 83       	std	Y+4, r19	; 0x04
    2138:	2b 83       	std	Y+3, r18	; 0x03
    213a:	8b 81       	ldd	r24, Y+3	; 0x03
    213c:	9c 81       	ldd	r25, Y+4	; 0x04
    213e:	81 30       	cpi	r24, 0x01	; 1
    2140:	91 05       	cpc	r25, r1
    2142:	d1 f0       	breq	.+52     	; 0x2178 <GPIO_writePort+0x5e>
    2144:	2b 81       	ldd	r18, Y+3	; 0x03
    2146:	3c 81       	ldd	r19, Y+4	; 0x04
    2148:	22 30       	cpi	r18, 0x02	; 2
    214a:	31 05       	cpc	r19, r1
    214c:	2c f4       	brge	.+10     	; 0x2158 <GPIO_writePort+0x3e>
    214e:	8b 81       	ldd	r24, Y+3	; 0x03
    2150:	9c 81       	ldd	r25, Y+4	; 0x04
    2152:	00 97       	sbiw	r24, 0x00	; 0
    2154:	61 f0       	breq	.+24     	; 0x216e <GPIO_writePort+0x54>
    2156:	1e c0       	rjmp	.+60     	; 0x2194 <GPIO_writePort+0x7a>
    2158:	2b 81       	ldd	r18, Y+3	; 0x03
    215a:	3c 81       	ldd	r19, Y+4	; 0x04
    215c:	22 30       	cpi	r18, 0x02	; 2
    215e:	31 05       	cpc	r19, r1
    2160:	81 f0       	breq	.+32     	; 0x2182 <GPIO_writePort+0x68>
    2162:	8b 81       	ldd	r24, Y+3	; 0x03
    2164:	9c 81       	ldd	r25, Y+4	; 0x04
    2166:	83 30       	cpi	r24, 0x03	; 3
    2168:	91 05       	cpc	r25, r1
    216a:	81 f0       	breq	.+32     	; 0x218c <GPIO_writePort+0x72>
    216c:	13 c0       	rjmp	.+38     	; 0x2194 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    216e:	eb e3       	ldi	r30, 0x3B	; 59
    2170:	f0 e0       	ldi	r31, 0x00	; 0
    2172:	8a 81       	ldd	r24, Y+2	; 0x02
    2174:	80 83       	st	Z, r24
    2176:	0e c0       	rjmp	.+28     	; 0x2194 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2178:	e8 e3       	ldi	r30, 0x38	; 56
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	80 83       	st	Z, r24
    2180:	09 c0       	rjmp	.+18     	; 0x2194 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    2182:	e5 e3       	ldi	r30, 0x35	; 53
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	8a 81       	ldd	r24, Y+2	; 0x02
    2188:	80 83       	st	Z, r24
    218a:	04 c0       	rjmp	.+8      	; 0x2194 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    218c:	e2 e3       	ldi	r30, 0x32	; 50
    218e:	f0 e0       	ldi	r31, 0x00	; 0
    2190:	8a 81       	ldd	r24, Y+2	; 0x02
    2192:	80 83       	st	Z, r24
			break;
		}
	}
}
    2194:	0f 90       	pop	r0
    2196:	0f 90       	pop	r0
    2198:	0f 90       	pop	r0
    219a:	0f 90       	pop	r0
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <GPIO_readPort+0x6>
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <GPIO_readPort+0x8>
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
    21ae:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    21b0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	84 30       	cpi	r24, 0x04	; 4
    21b6:	90 f5       	brcc	.+100    	; 0x221c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    21b8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ba:	28 2f       	mov	r18, r24
    21bc:	30 e0       	ldi	r19, 0x00	; 0
    21be:	3c 83       	std	Y+4, r19	; 0x04
    21c0:	2b 83       	std	Y+3, r18	; 0x03
    21c2:	8b 81       	ldd	r24, Y+3	; 0x03
    21c4:	9c 81       	ldd	r25, Y+4	; 0x04
    21c6:	81 30       	cpi	r24, 0x01	; 1
    21c8:	91 05       	cpc	r25, r1
    21ca:	d1 f0       	breq	.+52     	; 0x2200 <GPIO_readPort+0x5e>
    21cc:	2b 81       	ldd	r18, Y+3	; 0x03
    21ce:	3c 81       	ldd	r19, Y+4	; 0x04
    21d0:	22 30       	cpi	r18, 0x02	; 2
    21d2:	31 05       	cpc	r19, r1
    21d4:	2c f4       	brge	.+10     	; 0x21e0 <GPIO_readPort+0x3e>
    21d6:	8b 81       	ldd	r24, Y+3	; 0x03
    21d8:	9c 81       	ldd	r25, Y+4	; 0x04
    21da:	00 97       	sbiw	r24, 0x00	; 0
    21dc:	61 f0       	breq	.+24     	; 0x21f6 <GPIO_readPort+0x54>
    21de:	1e c0       	rjmp	.+60     	; 0x221c <GPIO_readPort+0x7a>
    21e0:	2b 81       	ldd	r18, Y+3	; 0x03
    21e2:	3c 81       	ldd	r19, Y+4	; 0x04
    21e4:	22 30       	cpi	r18, 0x02	; 2
    21e6:	31 05       	cpc	r19, r1
    21e8:	81 f0       	breq	.+32     	; 0x220a <GPIO_readPort+0x68>
    21ea:	8b 81       	ldd	r24, Y+3	; 0x03
    21ec:	9c 81       	ldd	r25, Y+4	; 0x04
    21ee:	83 30       	cpi	r24, 0x03	; 3
    21f0:	91 05       	cpc	r25, r1
    21f2:	81 f0       	breq	.+32     	; 0x2214 <GPIO_readPort+0x72>
    21f4:	13 c0       	rjmp	.+38     	; 0x221c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    21f6:	e9 e3       	ldi	r30, 0x39	; 57
    21f8:	f0 e0       	ldi	r31, 0x00	; 0
    21fa:	80 81       	ld	r24, Z
    21fc:	89 83       	std	Y+1, r24	; 0x01
    21fe:	0e c0       	rjmp	.+28     	; 0x221c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2200:	e6 e3       	ldi	r30, 0x36	; 54
    2202:	f0 e0       	ldi	r31, 0x00	; 0
    2204:	80 81       	ld	r24, Z
    2206:	89 83       	std	Y+1, r24	; 0x01
    2208:	09 c0       	rjmp	.+18     	; 0x221c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    220a:	e3 e3       	ldi	r30, 0x33	; 51
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	80 81       	ld	r24, Z
    2210:	89 83       	std	Y+1, r24	; 0x01
    2212:	04 c0       	rjmp	.+8      	; 0x221c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2214:	e0 e3       	ldi	r30, 0x30	; 48
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    221c:	89 81       	ldd	r24, Y+1	; 0x01
}
    221e:	0f 90       	pop	r0
    2220:	0f 90       	pop	r0
    2222:	0f 90       	pop	r0
    2224:	0f 90       	pop	r0
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	08 95       	ret

0000222c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    222c:	df 93       	push	r29
    222e:	cf 93       	push	r28
    2230:	00 d0       	rcall	.+0      	; 0x2232 <KEYPAD_getPressedKey+0x6>
    2232:	cd b7       	in	r28, 0x3d	; 61
    2234:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    2236:	81 e0       	ldi	r24, 0x01	; 1
    2238:	64 e0       	ldi	r22, 0x04	; 4
    223a:	40 e0       	ldi	r20, 0x00	; 0
    223c:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    2240:	81 e0       	ldi	r24, 0x01	; 1
    2242:	65 e0       	ldi	r22, 0x05	; 5
    2244:	40 e0       	ldi	r20, 0x00	; 0
    2246:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	66 e0       	ldi	r22, 0x06	; 6
    224e:	40 e0       	ldi	r20, 0x00	; 0
    2250:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	67 e0       	ldi	r22, 0x07	; 7
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    225e:	81 e0       	ldi	r24, 0x01	; 1
    2260:	60 e0       	ldi	r22, 0x00	; 0
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    2268:	81 e0       	ldi	r24, 0x01	; 1
    226a:	61 e0       	ldi	r22, 0x01	; 1
    226c:	40 e0       	ldi	r20, 0x00	; 0
    226e:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    2272:	81 e0       	ldi	r24, 0x01	; 1
    2274:	62 e0       	ldi	r22, 0x02	; 2
    2276:	40 e0       	ldi	r20, 0x00	; 0
    2278:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	63 e0       	ldi	r22, 0x03	; 3
    2280:	40 e0       	ldi	r20, 0x00	; 0
    2282:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    2286:	19 82       	std	Y+1, r1	; 0x01
    2288:	3b c0       	rjmp	.+118    	; 0x2300 <KEYPAD_getPressedKey+0xd4>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    228a:	89 81       	ldd	r24, Y+1	; 0x01
    228c:	98 2f       	mov	r25, r24
    228e:	9c 5f       	subi	r25, 0xFC	; 252
    2290:	81 e0       	ldi	r24, 0x01	; 1
    2292:	69 2f       	mov	r22, r25
    2294:	41 e0       	ldi	r20, 0x01	; 1
    2296:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    229a:	89 81       	ldd	r24, Y+1	; 0x01
    229c:	98 2f       	mov	r25, r24
    229e:	9c 5f       	subi	r25, 0xFC	; 252
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	69 2f       	mov	r22, r25
    22a4:	40 e0       	ldi	r20, 0x00	; 0
    22a6:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22aa:	1a 82       	std	Y+2, r1	; 0x02
    22ac:	1b c0       	rjmp	.+54     	; 0x22e4 <KEYPAD_getPressedKey+0xb8>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    22ae:	81 e0       	ldi	r24, 0x01	; 1
    22b0:	6a 81       	ldd	r22, Y+2	; 0x02
    22b2:	0e 94 ae 0f 	call	0x1f5c	; 0x1f5c <GPIO_readPin>
    22b6:	88 23       	and	r24, r24
    22b8:	91 f4       	brne	.+36     	; 0x22de <KEYPAD_getPressedKey+0xb2>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
    22ba:	8a 81       	ldd	r24, Y+2	; 0x02
    22bc:	88 2f       	mov	r24, r24
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	88 0f       	add	r24, r24
    22c2:	99 1f       	adc	r25, r25
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	98 2f       	mov	r25, r24
    22ca:	89 81       	ldd	r24, Y+1	; 0x01
    22cc:	89 0f       	add	r24, r25
    22ce:	8f 5f       	subi	r24, 0xFF	; 255
    22d0:	0e 94 84 11 	call	0x2308	; 0x2308 <KEYPAD_4x4_adjustKeyNumber>
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
		}
	}	
}
    22d4:	0f 90       	pop	r0
    22d6:	0f 90       	pop	r0
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    22de:	8a 81       	ldd	r24, Y+2	; 0x02
    22e0:	8f 5f       	subi	r24, 0xFF	; 255
    22e2:	8a 83       	std	Y+2, r24	; 0x02
    22e4:	8a 81       	ldd	r24, Y+2	; 0x02
    22e6:	84 30       	cpi	r24, 0x04	; 4
    22e8:	10 f3       	brcs	.-60     	; 0x22ae <KEYPAD_getPressedKey+0x82>
							return KEYPAD_4x4_adjustKeyNumber((col*KEYPAD_NUM_COLS)+row+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    22ea:	89 81       	ldd	r24, Y+1	; 0x01
    22ec:	98 2f       	mov	r25, r24
    22ee:	9c 5f       	subi	r25, 0xFC	; 252
    22f0:	81 e0       	ldi	r24, 0x01	; 1
    22f2:	69 2f       	mov	r22, r25
    22f4:	40 e0       	ldi	r20, 0x00	; 0
    22f6:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    22fa:	89 81       	ldd	r24, Y+1	; 0x01
    22fc:	8f 5f       	subi	r24, 0xFF	; 255
    22fe:	89 83       	std	Y+1, r24	; 0x01
    2300:	89 81       	ldd	r24, Y+1	; 0x01
    2302:	84 30       	cpi	r24, 0x04	; 4
    2304:	10 f2       	brcs	.-124    	; 0x228a <KEYPAD_getPressedKey+0x5e>
    2306:	bf cf       	rjmp	.-130    	; 0x2286 <KEYPAD_getPressedKey+0x5a>

00002308 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    2308:	df 93       	push	r29
    230a:	cf 93       	push	r28
    230c:	00 d0       	rcall	.+0      	; 0x230e <KEYPAD_4x4_adjustKeyNumber+0x6>
    230e:	00 d0       	rcall	.+0      	; 0x2310 <KEYPAD_4x4_adjustKeyNumber+0x8>
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    2316:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    2318:	8a 81       	ldd	r24, Y+2	; 0x02
    231a:	28 2f       	mov	r18, r24
    231c:	30 e0       	ldi	r19, 0x00	; 0
    231e:	3c 83       	std	Y+4, r19	; 0x04
    2320:	2b 83       	std	Y+3, r18	; 0x03
    2322:	8b 81       	ldd	r24, Y+3	; 0x03
    2324:	9c 81       	ldd	r25, Y+4	; 0x04
    2326:	88 30       	cpi	r24, 0x08	; 8
    2328:	91 05       	cpc	r25, r1
    232a:	09 f4       	brne	.+2      	; 0x232e <KEYPAD_4x4_adjustKeyNumber+0x26>
    232c:	70 c0       	rjmp	.+224    	; 0x240e <KEYPAD_4x4_adjustKeyNumber+0x106>
    232e:	2b 81       	ldd	r18, Y+3	; 0x03
    2330:	3c 81       	ldd	r19, Y+4	; 0x04
    2332:	29 30       	cpi	r18, 0x09	; 9
    2334:	31 05       	cpc	r19, r1
    2336:	5c f5       	brge	.+86     	; 0x238e <KEYPAD_4x4_adjustKeyNumber+0x86>
    2338:	8b 81       	ldd	r24, Y+3	; 0x03
    233a:	9c 81       	ldd	r25, Y+4	; 0x04
    233c:	84 30       	cpi	r24, 0x04	; 4
    233e:	91 05       	cpc	r25, r1
    2340:	09 f4       	brne	.+2      	; 0x2344 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2342:	59 c0       	rjmp	.+178    	; 0x23f6 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2344:	2b 81       	ldd	r18, Y+3	; 0x03
    2346:	3c 81       	ldd	r19, Y+4	; 0x04
    2348:	25 30       	cpi	r18, 0x05	; 5
    234a:	31 05       	cpc	r19, r1
    234c:	9c f4       	brge	.+38     	; 0x2374 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    234e:	8b 81       	ldd	r24, Y+3	; 0x03
    2350:	9c 81       	ldd	r25, Y+4	; 0x04
    2352:	82 30       	cpi	r24, 0x02	; 2
    2354:	91 05       	cpc	r25, r1
    2356:	09 f4       	brne	.+2      	; 0x235a <KEYPAD_4x4_adjustKeyNumber+0x52>
    2358:	48 c0       	rjmp	.+144    	; 0x23ea <KEYPAD_4x4_adjustKeyNumber+0xe2>
    235a:	2b 81       	ldd	r18, Y+3	; 0x03
    235c:	3c 81       	ldd	r19, Y+4	; 0x04
    235e:	23 30       	cpi	r18, 0x03	; 3
    2360:	31 05       	cpc	r19, r1
    2362:	0c f0       	brlt	.+2      	; 0x2366 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2364:	45 c0       	rjmp	.+138    	; 0x23f0 <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2366:	8b 81       	ldd	r24, Y+3	; 0x03
    2368:	9c 81       	ldd	r25, Y+4	; 0x04
    236a:	81 30       	cpi	r24, 0x01	; 1
    236c:	91 05       	cpc	r25, r1
    236e:	09 f4       	brne	.+2      	; 0x2372 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    2370:	39 c0       	rjmp	.+114    	; 0x23e4 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2372:	67 c0       	rjmp	.+206    	; 0x2442 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2374:	2b 81       	ldd	r18, Y+3	; 0x03
    2376:	3c 81       	ldd	r19, Y+4	; 0x04
    2378:	26 30       	cpi	r18, 0x06	; 6
    237a:	31 05       	cpc	r19, r1
    237c:	09 f4       	brne	.+2      	; 0x2380 <KEYPAD_4x4_adjustKeyNumber+0x78>
    237e:	41 c0       	rjmp	.+130    	; 0x2402 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    2380:	8b 81       	ldd	r24, Y+3	; 0x03
    2382:	9c 81       	ldd	r25, Y+4	; 0x04
    2384:	87 30       	cpi	r24, 0x07	; 7
    2386:	91 05       	cpc	r25, r1
    2388:	0c f0       	brlt	.+2      	; 0x238c <KEYPAD_4x4_adjustKeyNumber+0x84>
    238a:	3e c0       	rjmp	.+124    	; 0x2408 <KEYPAD_4x4_adjustKeyNumber+0x100>
    238c:	37 c0       	rjmp	.+110    	; 0x23fc <KEYPAD_4x4_adjustKeyNumber+0xf4>
    238e:	2b 81       	ldd	r18, Y+3	; 0x03
    2390:	3c 81       	ldd	r19, Y+4	; 0x04
    2392:	2c 30       	cpi	r18, 0x0C	; 12
    2394:	31 05       	cpc	r19, r1
    2396:	09 f4       	brne	.+2      	; 0x239a <KEYPAD_4x4_adjustKeyNumber+0x92>
    2398:	46 c0       	rjmp	.+140    	; 0x2426 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    239a:	8b 81       	ldd	r24, Y+3	; 0x03
    239c:	9c 81       	ldd	r25, Y+4	; 0x04
    239e:	8d 30       	cpi	r24, 0x0D	; 13
    23a0:	91 05       	cpc	r25, r1
    23a2:	5c f4       	brge	.+22     	; 0x23ba <KEYPAD_4x4_adjustKeyNumber+0xb2>
    23a4:	2b 81       	ldd	r18, Y+3	; 0x03
    23a6:	3c 81       	ldd	r19, Y+4	; 0x04
    23a8:	2a 30       	cpi	r18, 0x0A	; 10
    23aa:	31 05       	cpc	r19, r1
    23ac:	b1 f1       	breq	.+108    	; 0x241a <KEYPAD_4x4_adjustKeyNumber+0x112>
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	9c 81       	ldd	r25, Y+4	; 0x04
    23b2:	8b 30       	cpi	r24, 0x0B	; 11
    23b4:	91 05       	cpc	r25, r1
    23b6:	a4 f5       	brge	.+104    	; 0x2420 <KEYPAD_4x4_adjustKeyNumber+0x118>
    23b8:	2d c0       	rjmp	.+90     	; 0x2414 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    23ba:	2b 81       	ldd	r18, Y+3	; 0x03
    23bc:	3c 81       	ldd	r19, Y+4	; 0x04
    23be:	2e 30       	cpi	r18, 0x0E	; 14
    23c0:	31 05       	cpc	r19, r1
    23c2:	b9 f1       	breq	.+110    	; 0x2432 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    23c4:	8b 81       	ldd	r24, Y+3	; 0x03
    23c6:	9c 81       	ldd	r25, Y+4	; 0x04
    23c8:	8e 30       	cpi	r24, 0x0E	; 14
    23ca:	91 05       	cpc	r25, r1
    23cc:	7c f1       	brlt	.+94     	; 0x242c <KEYPAD_4x4_adjustKeyNumber+0x124>
    23ce:	2b 81       	ldd	r18, Y+3	; 0x03
    23d0:	3c 81       	ldd	r19, Y+4	; 0x04
    23d2:	2f 30       	cpi	r18, 0x0F	; 15
    23d4:	31 05       	cpc	r19, r1
    23d6:	79 f1       	breq	.+94     	; 0x2436 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    23d8:	8b 81       	ldd	r24, Y+3	; 0x03
    23da:	9c 81       	ldd	r25, Y+4	; 0x04
    23dc:	80 31       	cpi	r24, 0x10	; 16
    23de:	91 05       	cpc	r25, r1
    23e0:	69 f1       	breq	.+90     	; 0x243c <KEYPAD_4x4_adjustKeyNumber+0x134>
    23e2:	2f c0       	rjmp	.+94     	; 0x2442 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    23e4:	87 e0       	ldi	r24, 0x07	; 7
    23e6:	89 83       	std	Y+1, r24	; 0x01
    23e8:	2e c0       	rjmp	.+92     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    23ea:	88 e0       	ldi	r24, 0x08	; 8
    23ec:	89 83       	std	Y+1, r24	; 0x01
    23ee:	2b c0       	rjmp	.+86     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    23f0:	89 e0       	ldi	r24, 0x09	; 9
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	28 c0       	rjmp	.+80     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    23f6:	85 e2       	ldi	r24, 0x25	; 37
    23f8:	89 83       	std	Y+1, r24	; 0x01
    23fa:	25 c0       	rjmp	.+74     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    23fc:	84 e0       	ldi	r24, 0x04	; 4
    23fe:	89 83       	std	Y+1, r24	; 0x01
    2400:	22 c0       	rjmp	.+68     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    2402:	85 e0       	ldi	r24, 0x05	; 5
    2404:	89 83       	std	Y+1, r24	; 0x01
    2406:	1f c0       	rjmp	.+62     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    2408:	86 e0       	ldi	r24, 0x06	; 6
    240a:	89 83       	std	Y+1, r24	; 0x01
    240c:	1c c0       	rjmp	.+56     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    240e:	8a e2       	ldi	r24, 0x2A	; 42
    2410:	89 83       	std	Y+1, r24	; 0x01
    2412:	19 c0       	rjmp	.+50     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    2414:	81 e0       	ldi	r24, 0x01	; 1
    2416:	89 83       	std	Y+1, r24	; 0x01
    2418:	16 c0       	rjmp	.+44     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    241a:	82 e0       	ldi	r24, 0x02	; 2
    241c:	89 83       	std	Y+1, r24	; 0x01
    241e:	13 c0       	rjmp	.+38     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    2420:	83 e0       	ldi	r24, 0x03	; 3
    2422:	89 83       	std	Y+1, r24	; 0x01
    2424:	10 c0       	rjmp	.+32     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2426:	8d e2       	ldi	r24, 0x2D	; 45
    2428:	89 83       	std	Y+1, r24	; 0x01
    242a:	0d c0       	rjmp	.+26     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    242c:	8d e0       	ldi	r24, 0x0D	; 13
    242e:	89 83       	std	Y+1, r24	; 0x01
    2430:	0a c0       	rjmp	.+20     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2432:	19 82       	std	Y+1, r1	; 0x01
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2436:	8d e3       	ldi	r24, 0x3D	; 61
    2438:	89 83       	std	Y+1, r24	; 0x01
    243a:	05 c0       	rjmp	.+10     	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    243c:	8b e2       	ldi	r24, 0x2B	; 43
    243e:	89 83       	std	Y+1, r24	; 0x01
    2440:	02 c0       	rjmp	.+4      	; 0x2446 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2442:	8a 81       	ldd	r24, Y+2	; 0x02
    2444:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2446:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2448:	0f 90       	pop	r0
    244a:	0f 90       	pop	r0
    244c:	0f 90       	pop	r0
    244e:	0f 90       	pop	r0
    2450:	cf 91       	pop	r28
    2452:	df 91       	pop	r29
    2454:	08 95       	ret

00002456 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2456:	df 93       	push	r29
    2458:	cf 93       	push	r28
    245a:	cd b7       	in	r28, 0x3d	; 61
    245c:	de b7       	in	r29, 0x3e	; 62
    245e:	2e 97       	sbiw	r28, 0x0e	; 14
    2460:	0f b6       	in	r0, 0x3f	; 63
    2462:	f8 94       	cli
    2464:	de bf       	out	0x3e, r29	; 62
    2466:	0f be       	out	0x3f, r0	; 63
    2468:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    246a:	83 e0       	ldi	r24, 0x03	; 3
    246c:	66 e0       	ldi	r22, 0x06	; 6
    246e:	41 e0       	ldi	r20, 0x01	; 1
    2470:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2474:	83 e0       	ldi	r24, 0x03	; 3
    2476:	67 e0       	ldi	r22, 0x07	; 7
    2478:	41 e0       	ldi	r20, 0x01	; 1
    247a:	0e 94 d8 0d 	call	0x1bb0	; 0x1bb0 <GPIO_setupPinDirection>
    247e:	80 e0       	ldi	r24, 0x00	; 0
    2480:	90 e0       	ldi	r25, 0x00	; 0
    2482:	a0 ea       	ldi	r26, 0xA0	; 160
    2484:	b1 e4       	ldi	r27, 0x41	; 65
    2486:	8b 87       	std	Y+11, r24	; 0x0b
    2488:	9c 87       	std	Y+12, r25	; 0x0c
    248a:	ad 87       	std	Y+13, r26	; 0x0d
    248c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    248e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2490:	7c 85       	ldd	r23, Y+12	; 0x0c
    2492:	8d 85       	ldd	r24, Y+13	; 0x0d
    2494:	9e 85       	ldd	r25, Y+14	; 0x0e
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	4a e7       	ldi	r20, 0x7A	; 122
    249c:	53 e4       	ldi	r21, 0x43	; 67
    249e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24a2:	dc 01       	movw	r26, r24
    24a4:	cb 01       	movw	r24, r22
    24a6:	8f 83       	std	Y+7, r24	; 0x07
    24a8:	98 87       	std	Y+8, r25	; 0x08
    24aa:	a9 87       	std	Y+9, r26	; 0x09
    24ac:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    24ae:	6f 81       	ldd	r22, Y+7	; 0x07
    24b0:	78 85       	ldd	r23, Y+8	; 0x08
    24b2:	89 85       	ldd	r24, Y+9	; 0x09
    24b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	40 e8       	ldi	r20, 0x80	; 128
    24bc:	5f e3       	ldi	r21, 0x3F	; 63
    24be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24c2:	88 23       	and	r24, r24
    24c4:	2c f4       	brge	.+10     	; 0x24d0 <LCD_init+0x7a>
		__ticks = 1;
    24c6:	81 e0       	ldi	r24, 0x01	; 1
    24c8:	90 e0       	ldi	r25, 0x00	; 0
    24ca:	9e 83       	std	Y+6, r25	; 0x06
    24cc:	8d 83       	std	Y+5, r24	; 0x05
    24ce:	3f c0       	rjmp	.+126    	; 0x254e <LCD_init+0xf8>
	else if (__tmp > 65535)
    24d0:	6f 81       	ldd	r22, Y+7	; 0x07
    24d2:	78 85       	ldd	r23, Y+8	; 0x08
    24d4:	89 85       	ldd	r24, Y+9	; 0x09
    24d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	3f ef       	ldi	r19, 0xFF	; 255
    24dc:	4f e7       	ldi	r20, 0x7F	; 127
    24de:	57 e4       	ldi	r21, 0x47	; 71
    24e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	4c f5       	brge	.+82     	; 0x253a <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e8:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ea:	7c 85       	ldd	r23, Y+12	; 0x0c
    24ec:	8d 85       	ldd	r24, Y+13	; 0x0d
    24ee:	9e 85       	ldd	r25, Y+14	; 0x0e
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	30 e0       	ldi	r19, 0x00	; 0
    24f4:	40 e2       	ldi	r20, 0x20	; 32
    24f6:	51 e4       	ldi	r21, 0x41	; 65
    24f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
    2500:	bc 01       	movw	r22, r24
    2502:	cd 01       	movw	r24, r26
    2504:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2508:	dc 01       	movw	r26, r24
    250a:	cb 01       	movw	r24, r22
    250c:	9e 83       	std	Y+6, r25	; 0x06
    250e:	8d 83       	std	Y+5, r24	; 0x05
    2510:	0f c0       	rjmp	.+30     	; 0x2530 <LCD_init+0xda>
    2512:	89 e1       	ldi	r24, 0x19	; 25
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	9c 83       	std	Y+4, r25	; 0x04
    2518:	8b 83       	std	Y+3, r24	; 0x03
    251a:	8b 81       	ldd	r24, Y+3	; 0x03
    251c:	9c 81       	ldd	r25, Y+4	; 0x04
    251e:	01 97       	sbiw	r24, 0x01	; 1
    2520:	f1 f7       	brne	.-4      	; 0x251e <LCD_init+0xc8>
    2522:	9c 83       	std	Y+4, r25	; 0x04
    2524:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2526:	8d 81       	ldd	r24, Y+5	; 0x05
    2528:	9e 81       	ldd	r25, Y+6	; 0x06
    252a:	01 97       	sbiw	r24, 0x01	; 1
    252c:	9e 83       	std	Y+6, r25	; 0x06
    252e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2530:	8d 81       	ldd	r24, Y+5	; 0x05
    2532:	9e 81       	ldd	r25, Y+6	; 0x06
    2534:	00 97       	sbiw	r24, 0x00	; 0
    2536:	69 f7       	brne	.-38     	; 0x2512 <LCD_init+0xbc>
    2538:	14 c0       	rjmp	.+40     	; 0x2562 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    253a:	6f 81       	ldd	r22, Y+7	; 0x07
    253c:	78 85       	ldd	r23, Y+8	; 0x08
    253e:	89 85       	ldd	r24, Y+9	; 0x09
    2540:	9a 85       	ldd	r25, Y+10	; 0x0a
    2542:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2546:	dc 01       	movw	r26, r24
    2548:	cb 01       	movw	r24, r22
    254a:	9e 83       	std	Y+6, r25	; 0x06
    254c:	8d 83       	std	Y+5, r24	; 0x05
    254e:	8d 81       	ldd	r24, Y+5	; 0x05
    2550:	9e 81       	ldd	r25, Y+6	; 0x06
    2552:	9a 83       	std	Y+2, r25	; 0x02
    2554:	89 83       	std	Y+1, r24	; 0x01
    2556:	89 81       	ldd	r24, Y+1	; 0x01
    2558:	9a 81       	ldd	r25, Y+2	; 0x02
    255a:	01 97       	sbiw	r24, 0x01	; 1
    255c:	f1 f7       	brne	.-4      	; 0x255a <LCD_init+0x104>
    255e:	9a 83       	std	Y+2, r25	; 0x02
    2560:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2562:	80 e0       	ldi	r24, 0x00	; 0
    2564:	6f ef       	ldi	r22, 0xFF	; 255
    2566:	0e 94 49 10 	call	0x2092	; 0x2092 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    256a:	88 e3       	ldi	r24, 0x38	; 56
    256c:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    2570:	8c e0       	ldi	r24, 0x0C	; 12
    2572:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_sendCommand>
}
    257c:	2e 96       	adiw	r28, 0x0e	; 14
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	e9 97       	sbiw	r28, 0x39	; 57
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    25a4:	83 e0       	ldi	r24, 0x03	; 3
    25a6:	66 e0       	ldi	r22, 0x06	; 6
    25a8:	40 e0       	ldi	r20, 0x00	; 0
    25aa:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    25ae:	80 e0       	ldi	r24, 0x00	; 0
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	a0 e8       	ldi	r26, 0x80	; 128
    25b4:	bf e3       	ldi	r27, 0x3F	; 63
    25b6:	8d ab       	std	Y+53, r24	; 0x35
    25b8:	9e ab       	std	Y+54, r25	; 0x36
    25ba:	af ab       	std	Y+55, r26	; 0x37
    25bc:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25be:	6d a9       	ldd	r22, Y+53	; 0x35
    25c0:	7e a9       	ldd	r23, Y+54	; 0x36
    25c2:	8f a9       	ldd	r24, Y+55	; 0x37
    25c4:	98 ad       	ldd	r25, Y+56	; 0x38
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	4a e7       	ldi	r20, 0x7A	; 122
    25cc:	53 e4       	ldi	r21, 0x43	; 67
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	89 ab       	std	Y+49, r24	; 0x31
    25d8:	9a ab       	std	Y+50, r25	; 0x32
    25da:	ab ab       	std	Y+51, r26	; 0x33
    25dc:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25de:	69 a9       	ldd	r22, Y+49	; 0x31
    25e0:	7a a9       	ldd	r23, Y+50	; 0x32
    25e2:	8b a9       	ldd	r24, Y+51	; 0x33
    25e4:	9c a9       	ldd	r25, Y+52	; 0x34
    25e6:	20 e0       	ldi	r18, 0x00	; 0
    25e8:	30 e0       	ldi	r19, 0x00	; 0
    25ea:	40 e8       	ldi	r20, 0x80	; 128
    25ec:	5f e3       	ldi	r21, 0x3F	; 63
    25ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f2:	88 23       	and	r24, r24
    25f4:	2c f4       	brge	.+10     	; 0x2600 <LCD_sendCommand+0x72>
		__ticks = 1;
    25f6:	81 e0       	ldi	r24, 0x01	; 1
    25f8:	90 e0       	ldi	r25, 0x00	; 0
    25fa:	98 ab       	std	Y+48, r25	; 0x30
    25fc:	8f a7       	std	Y+47, r24	; 0x2f
    25fe:	3f c0       	rjmp	.+126    	; 0x267e <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    2600:	69 a9       	ldd	r22, Y+49	; 0x31
    2602:	7a a9       	ldd	r23, Y+50	; 0x32
    2604:	8b a9       	ldd	r24, Y+51	; 0x33
    2606:	9c a9       	ldd	r25, Y+52	; 0x34
    2608:	20 e0       	ldi	r18, 0x00	; 0
    260a:	3f ef       	ldi	r19, 0xFF	; 255
    260c:	4f e7       	ldi	r20, 0x7F	; 127
    260e:	57 e4       	ldi	r21, 0x47	; 71
    2610:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2614:	18 16       	cp	r1, r24
    2616:	4c f5       	brge	.+82     	; 0x266a <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2618:	6d a9       	ldd	r22, Y+53	; 0x35
    261a:	7e a9       	ldd	r23, Y+54	; 0x36
    261c:	8f a9       	ldd	r24, Y+55	; 0x37
    261e:	98 ad       	ldd	r25, Y+56	; 0x38
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e2       	ldi	r20, 0x20	; 32
    2626:	51 e4       	ldi	r21, 0x41	; 65
    2628:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262c:	dc 01       	movw	r26, r24
    262e:	cb 01       	movw	r24, r22
    2630:	bc 01       	movw	r22, r24
    2632:	cd 01       	movw	r24, r26
    2634:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2638:	dc 01       	movw	r26, r24
    263a:	cb 01       	movw	r24, r22
    263c:	98 ab       	std	Y+48, r25	; 0x30
    263e:	8f a7       	std	Y+47, r24	; 0x2f
    2640:	0f c0       	rjmp	.+30     	; 0x2660 <LCD_sendCommand+0xd2>
    2642:	89 e1       	ldi	r24, 0x19	; 25
    2644:	90 e0       	ldi	r25, 0x00	; 0
    2646:	9e a7       	std	Y+46, r25	; 0x2e
    2648:	8d a7       	std	Y+45, r24	; 0x2d
    264a:	8d a5       	ldd	r24, Y+45	; 0x2d
    264c:	9e a5       	ldd	r25, Y+46	; 0x2e
    264e:	01 97       	sbiw	r24, 0x01	; 1
    2650:	f1 f7       	brne	.-4      	; 0x264e <LCD_sendCommand+0xc0>
    2652:	9e a7       	std	Y+46, r25	; 0x2e
    2654:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2656:	8f a5       	ldd	r24, Y+47	; 0x2f
    2658:	98 a9       	ldd	r25, Y+48	; 0x30
    265a:	01 97       	sbiw	r24, 0x01	; 1
    265c:	98 ab       	std	Y+48, r25	; 0x30
    265e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2660:	8f a5       	ldd	r24, Y+47	; 0x2f
    2662:	98 a9       	ldd	r25, Y+48	; 0x30
    2664:	00 97       	sbiw	r24, 0x00	; 0
    2666:	69 f7       	brne	.-38     	; 0x2642 <LCD_sendCommand+0xb4>
    2668:	14 c0       	rjmp	.+40     	; 0x2692 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266a:	69 a9       	ldd	r22, Y+49	; 0x31
    266c:	7a a9       	ldd	r23, Y+50	; 0x32
    266e:	8b a9       	ldd	r24, Y+51	; 0x33
    2670:	9c a9       	ldd	r25, Y+52	; 0x34
    2672:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	98 ab       	std	Y+48, r25	; 0x30
    267c:	8f a7       	std	Y+47, r24	; 0x2f
    267e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2680:	98 a9       	ldd	r25, Y+48	; 0x30
    2682:	9c a7       	std	Y+44, r25	; 0x2c
    2684:	8b a7       	std	Y+43, r24	; 0x2b
    2686:	8b a5       	ldd	r24, Y+43	; 0x2b
    2688:	9c a5       	ldd	r25, Y+44	; 0x2c
    268a:	01 97       	sbiw	r24, 0x01	; 1
    268c:	f1 f7       	brne	.-4      	; 0x268a <LCD_sendCommand+0xfc>
    268e:	9c a7       	std	Y+44, r25	; 0x2c
    2690:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2692:	83 e0       	ldi	r24, 0x03	; 3
    2694:	67 e0       	ldi	r22, 0x07	; 7
    2696:	41 e0       	ldi	r20, 0x01	; 1
    2698:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    269c:	80 e0       	ldi	r24, 0x00	; 0
    269e:	90 e0       	ldi	r25, 0x00	; 0
    26a0:	a0 e8       	ldi	r26, 0x80	; 128
    26a2:	bf e3       	ldi	r27, 0x3F	; 63
    26a4:	8f a3       	std	Y+39, r24	; 0x27
    26a6:	98 a7       	std	Y+40, r25	; 0x28
    26a8:	a9 a7       	std	Y+41, r26	; 0x29
    26aa:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26ac:	6f a1       	ldd	r22, Y+39	; 0x27
    26ae:	78 a5       	ldd	r23, Y+40	; 0x28
    26b0:	89 a5       	ldd	r24, Y+41	; 0x29
    26b2:	9a a5       	ldd	r25, Y+42	; 0x2a
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	4a e7       	ldi	r20, 0x7A	; 122
    26ba:	53 e4       	ldi	r21, 0x43	; 67
    26bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	8b a3       	std	Y+35, r24	; 0x23
    26c6:	9c a3       	std	Y+36, r25	; 0x24
    26c8:	ad a3       	std	Y+37, r26	; 0x25
    26ca:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26cc:	6b a1       	ldd	r22, Y+35	; 0x23
    26ce:	7c a1       	ldd	r23, Y+36	; 0x24
    26d0:	8d a1       	ldd	r24, Y+37	; 0x25
    26d2:	9e a1       	ldd	r25, Y+38	; 0x26
    26d4:	20 e0       	ldi	r18, 0x00	; 0
    26d6:	30 e0       	ldi	r19, 0x00	; 0
    26d8:	40 e8       	ldi	r20, 0x80	; 128
    26da:	5f e3       	ldi	r21, 0x3F	; 63
    26dc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26e0:	88 23       	and	r24, r24
    26e2:	2c f4       	brge	.+10     	; 0x26ee <LCD_sendCommand+0x160>
		__ticks = 1;
    26e4:	81 e0       	ldi	r24, 0x01	; 1
    26e6:	90 e0       	ldi	r25, 0x00	; 0
    26e8:	9a a3       	std	Y+34, r25	; 0x22
    26ea:	89 a3       	std	Y+33, r24	; 0x21
    26ec:	3f c0       	rjmp	.+126    	; 0x276c <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    26ee:	6b a1       	ldd	r22, Y+35	; 0x23
    26f0:	7c a1       	ldd	r23, Y+36	; 0x24
    26f2:	8d a1       	ldd	r24, Y+37	; 0x25
    26f4:	9e a1       	ldd	r25, Y+38	; 0x26
    26f6:	20 e0       	ldi	r18, 0x00	; 0
    26f8:	3f ef       	ldi	r19, 0xFF	; 255
    26fa:	4f e7       	ldi	r20, 0x7F	; 127
    26fc:	57 e4       	ldi	r21, 0x47	; 71
    26fe:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2702:	18 16       	cp	r1, r24
    2704:	4c f5       	brge	.+82     	; 0x2758 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2706:	6f a1       	ldd	r22, Y+39	; 0x27
    2708:	78 a5       	ldd	r23, Y+40	; 0x28
    270a:	89 a5       	ldd	r24, Y+41	; 0x29
    270c:	9a a5       	ldd	r25, Y+42	; 0x2a
    270e:	20 e0       	ldi	r18, 0x00	; 0
    2710:	30 e0       	ldi	r19, 0x00	; 0
    2712:	40 e2       	ldi	r20, 0x20	; 32
    2714:	51 e4       	ldi	r21, 0x41	; 65
    2716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    271a:	dc 01       	movw	r26, r24
    271c:	cb 01       	movw	r24, r22
    271e:	bc 01       	movw	r22, r24
    2720:	cd 01       	movw	r24, r26
    2722:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	9a a3       	std	Y+34, r25	; 0x22
    272c:	89 a3       	std	Y+33, r24	; 0x21
    272e:	0f c0       	rjmp	.+30     	; 0x274e <LCD_sendCommand+0x1c0>
    2730:	89 e1       	ldi	r24, 0x19	; 25
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	98 a3       	std	Y+32, r25	; 0x20
    2736:	8f 8f       	std	Y+31, r24	; 0x1f
    2738:	8f 8d       	ldd	r24, Y+31	; 0x1f
    273a:	98 a1       	ldd	r25, Y+32	; 0x20
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <LCD_sendCommand+0x1ae>
    2740:	98 a3       	std	Y+32, r25	; 0x20
    2742:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2744:	89 a1       	ldd	r24, Y+33	; 0x21
    2746:	9a a1       	ldd	r25, Y+34	; 0x22
    2748:	01 97       	sbiw	r24, 0x01	; 1
    274a:	9a a3       	std	Y+34, r25	; 0x22
    274c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274e:	89 a1       	ldd	r24, Y+33	; 0x21
    2750:	9a a1       	ldd	r25, Y+34	; 0x22
    2752:	00 97       	sbiw	r24, 0x00	; 0
    2754:	69 f7       	brne	.-38     	; 0x2730 <LCD_sendCommand+0x1a2>
    2756:	14 c0       	rjmp	.+40     	; 0x2780 <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2758:	6b a1       	ldd	r22, Y+35	; 0x23
    275a:	7c a1       	ldd	r23, Y+36	; 0x24
    275c:	8d a1       	ldd	r24, Y+37	; 0x25
    275e:	9e a1       	ldd	r25, Y+38	; 0x26
    2760:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2764:	dc 01       	movw	r26, r24
    2766:	cb 01       	movw	r24, r22
    2768:	9a a3       	std	Y+34, r25	; 0x22
    276a:	89 a3       	std	Y+33, r24	; 0x21
    276c:	89 a1       	ldd	r24, Y+33	; 0x21
    276e:	9a a1       	ldd	r25, Y+34	; 0x22
    2770:	9e 8f       	std	Y+30, r25	; 0x1e
    2772:	8d 8f       	std	Y+29, r24	; 0x1d
    2774:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2776:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2778:	01 97       	sbiw	r24, 0x01	; 1
    277a:	f1 f7       	brne	.-4      	; 0x2778 <LCD_sendCommand+0x1ea>
    277c:	9e 8f       	std	Y+30, r25	; 0x1e
    277e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2780:	80 e0       	ldi	r24, 0x00	; 0
    2782:	69 ad       	ldd	r22, Y+57	; 0x39
    2784:	0e 94 8d 10 	call	0x211a	; 0x211a <GPIO_writePort>
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	a0 e8       	ldi	r26, 0x80	; 128
    278e:	bf e3       	ldi	r27, 0x3F	; 63
    2790:	89 8f       	std	Y+25, r24	; 0x19
    2792:	9a 8f       	std	Y+26, r25	; 0x1a
    2794:	ab 8f       	std	Y+27, r26	; 0x1b
    2796:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2798:	69 8d       	ldd	r22, Y+25	; 0x19
    279a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    279c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    279e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27a0:	20 e0       	ldi	r18, 0x00	; 0
    27a2:	30 e0       	ldi	r19, 0x00	; 0
    27a4:	4a e7       	ldi	r20, 0x7A	; 122
    27a6:	53 e4       	ldi	r21, 0x43	; 67
    27a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ac:	dc 01       	movw	r26, r24
    27ae:	cb 01       	movw	r24, r22
    27b0:	8d 8b       	std	Y+21, r24	; 0x15
    27b2:	9e 8b       	std	Y+22, r25	; 0x16
    27b4:	af 8b       	std	Y+23, r26	; 0x17
    27b6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	40 e8       	ldi	r20, 0x80	; 128
    27c6:	5f e3       	ldi	r21, 0x3F	; 63
    27c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27cc:	88 23       	and	r24, r24
    27ce:	2c f4       	brge	.+10     	; 0x27da <LCD_sendCommand+0x24c>
		__ticks = 1;
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	9c 8b       	std	Y+20, r25	; 0x14
    27d6:	8b 8b       	std	Y+19, r24	; 0x13
    27d8:	3f c0       	rjmp	.+126    	; 0x2858 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    27da:	6d 89       	ldd	r22, Y+21	; 0x15
    27dc:	7e 89       	ldd	r23, Y+22	; 0x16
    27de:	8f 89       	ldd	r24, Y+23	; 0x17
    27e0:	98 8d       	ldd	r25, Y+24	; 0x18
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	3f ef       	ldi	r19, 0xFF	; 255
    27e6:	4f e7       	ldi	r20, 0x7F	; 127
    27e8:	57 e4       	ldi	r21, 0x47	; 71
    27ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27ee:	18 16       	cp	r1, r24
    27f0:	4c f5       	brge	.+82     	; 0x2844 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27f2:	69 8d       	ldd	r22, Y+25	; 0x19
    27f4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27f6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27f8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	40 e2       	ldi	r20, 0x20	; 32
    2800:	51 e4       	ldi	r21, 0x41	; 65
    2802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	bc 01       	movw	r22, r24
    280c:	cd 01       	movw	r24, r26
    280e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2812:	dc 01       	movw	r26, r24
    2814:	cb 01       	movw	r24, r22
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	0f c0       	rjmp	.+30     	; 0x283a <LCD_sendCommand+0x2ac>
    281c:	89 e1       	ldi	r24, 0x19	; 25
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	9a 8b       	std	Y+18, r25	; 0x12
    2822:	89 8b       	std	Y+17, r24	; 0x11
    2824:	89 89       	ldd	r24, Y+17	; 0x11
    2826:	9a 89       	ldd	r25, Y+18	; 0x12
    2828:	01 97       	sbiw	r24, 0x01	; 1
    282a:	f1 f7       	brne	.-4      	; 0x2828 <LCD_sendCommand+0x29a>
    282c:	9a 8b       	std	Y+18, r25	; 0x12
    282e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2830:	8b 89       	ldd	r24, Y+19	; 0x13
    2832:	9c 89       	ldd	r25, Y+20	; 0x14
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	9c 8b       	std	Y+20, r25	; 0x14
    2838:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    283a:	8b 89       	ldd	r24, Y+19	; 0x13
    283c:	9c 89       	ldd	r25, Y+20	; 0x14
    283e:	00 97       	sbiw	r24, 0x00	; 0
    2840:	69 f7       	brne	.-38     	; 0x281c <LCD_sendCommand+0x28e>
    2842:	14 c0       	rjmp	.+40     	; 0x286c <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2844:	6d 89       	ldd	r22, Y+21	; 0x15
    2846:	7e 89       	ldd	r23, Y+22	; 0x16
    2848:	8f 89       	ldd	r24, Y+23	; 0x17
    284a:	98 8d       	ldd	r25, Y+24	; 0x18
    284c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2850:	dc 01       	movw	r26, r24
    2852:	cb 01       	movw	r24, r22
    2854:	9c 8b       	std	Y+20, r25	; 0x14
    2856:	8b 8b       	std	Y+19, r24	; 0x13
    2858:	8b 89       	ldd	r24, Y+19	; 0x13
    285a:	9c 89       	ldd	r25, Y+20	; 0x14
    285c:	98 8b       	std	Y+16, r25	; 0x10
    285e:	8f 87       	std	Y+15, r24	; 0x0f
    2860:	8f 85       	ldd	r24, Y+15	; 0x0f
    2862:	98 89       	ldd	r25, Y+16	; 0x10
    2864:	01 97       	sbiw	r24, 0x01	; 1
    2866:	f1 f7       	brne	.-4      	; 0x2864 <LCD_sendCommand+0x2d6>
    2868:	98 8b       	std	Y+16, r25	; 0x10
    286a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    286c:	83 e0       	ldi	r24, 0x03	; 3
    286e:	67 e0       	ldi	r22, 0x07	; 7
    2870:	40 e0       	ldi	r20, 0x00	; 0
    2872:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    2876:	80 e0       	ldi	r24, 0x00	; 0
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	a0 e8       	ldi	r26, 0x80	; 128
    287c:	bf e3       	ldi	r27, 0x3F	; 63
    287e:	8b 87       	std	Y+11, r24	; 0x0b
    2880:	9c 87       	std	Y+12, r25	; 0x0c
    2882:	ad 87       	std	Y+13, r26	; 0x0d
    2884:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2886:	6b 85       	ldd	r22, Y+11	; 0x0b
    2888:	7c 85       	ldd	r23, Y+12	; 0x0c
    288a:	8d 85       	ldd	r24, Y+13	; 0x0d
    288c:	9e 85       	ldd	r25, Y+14	; 0x0e
    288e:	20 e0       	ldi	r18, 0x00	; 0
    2890:	30 e0       	ldi	r19, 0x00	; 0
    2892:	4a e7       	ldi	r20, 0x7A	; 122
    2894:	53 e4       	ldi	r21, 0x43	; 67
    2896:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	8f 83       	std	Y+7, r24	; 0x07
    28a0:	98 87       	std	Y+8, r25	; 0x08
    28a2:	a9 87       	std	Y+9, r26	; 0x09
    28a4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a6:	6f 81       	ldd	r22, Y+7	; 0x07
    28a8:	78 85       	ldd	r23, Y+8	; 0x08
    28aa:	89 85       	ldd	r24, Y+9	; 0x09
    28ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    28ae:	20 e0       	ldi	r18, 0x00	; 0
    28b0:	30 e0       	ldi	r19, 0x00	; 0
    28b2:	40 e8       	ldi	r20, 0x80	; 128
    28b4:	5f e3       	ldi	r21, 0x3F	; 63
    28b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ba:	88 23       	and	r24, r24
    28bc:	2c f4       	brge	.+10     	; 0x28c8 <LCD_sendCommand+0x33a>
		__ticks = 1;
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	90 e0       	ldi	r25, 0x00	; 0
    28c2:	9e 83       	std	Y+6, r25	; 0x06
    28c4:	8d 83       	std	Y+5, r24	; 0x05
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    28c8:	6f 81       	ldd	r22, Y+7	; 0x07
    28ca:	78 85       	ldd	r23, Y+8	; 0x08
    28cc:	89 85       	ldd	r24, Y+9	; 0x09
    28ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	3f ef       	ldi	r19, 0xFF	; 255
    28d4:	4f e7       	ldi	r20, 0x7F	; 127
    28d6:	57 e4       	ldi	r21, 0x47	; 71
    28d8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28dc:	18 16       	cp	r1, r24
    28de:	4c f5       	brge	.+82     	; 0x2932 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e4:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e6:	9e 85       	ldd	r25, Y+14	; 0x0e
    28e8:	20 e0       	ldi	r18, 0x00	; 0
    28ea:	30 e0       	ldi	r19, 0x00	; 0
    28ec:	40 e2       	ldi	r20, 0x20	; 32
    28ee:	51 e4       	ldi	r21, 0x41	; 65
    28f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	bc 01       	movw	r22, r24
    28fa:	cd 01       	movw	r24, r26
    28fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2900:	dc 01       	movw	r26, r24
    2902:	cb 01       	movw	r24, r22
    2904:	9e 83       	std	Y+6, r25	; 0x06
    2906:	8d 83       	std	Y+5, r24	; 0x05
    2908:	0f c0       	rjmp	.+30     	; 0x2928 <LCD_sendCommand+0x39a>
    290a:	89 e1       	ldi	r24, 0x19	; 25
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
    2912:	8b 81       	ldd	r24, Y+3	; 0x03
    2914:	9c 81       	ldd	r25, Y+4	; 0x04
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	f1 f7       	brne	.-4      	; 0x2916 <LCD_sendCommand+0x388>
    291a:	9c 83       	std	Y+4, r25	; 0x04
    291c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    291e:	8d 81       	ldd	r24, Y+5	; 0x05
    2920:	9e 81       	ldd	r25, Y+6	; 0x06
    2922:	01 97       	sbiw	r24, 0x01	; 1
    2924:	9e 83       	std	Y+6, r25	; 0x06
    2926:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2928:	8d 81       	ldd	r24, Y+5	; 0x05
    292a:	9e 81       	ldd	r25, Y+6	; 0x06
    292c:	00 97       	sbiw	r24, 0x00	; 0
    292e:	69 f7       	brne	.-38     	; 0x290a <LCD_sendCommand+0x37c>
    2930:	14 c0       	rjmp	.+40     	; 0x295a <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2932:	6f 81       	ldd	r22, Y+7	; 0x07
    2934:	78 85       	ldd	r23, Y+8	; 0x08
    2936:	89 85       	ldd	r24, Y+9	; 0x09
    2938:	9a 85       	ldd	r25, Y+10	; 0x0a
    293a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    293e:	dc 01       	movw	r26, r24
    2940:	cb 01       	movw	r24, r22
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	8d 81       	ldd	r24, Y+5	; 0x05
    2948:	9e 81       	ldd	r25, Y+6	; 0x06
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
    294e:	89 81       	ldd	r24, Y+1	; 0x01
    2950:	9a 81       	ldd	r25, Y+2	; 0x02
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	f1 f7       	brne	.-4      	; 0x2952 <LCD_sendCommand+0x3c4>
    2956:	9a 83       	std	Y+2, r25	; 0x02
    2958:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    295a:	e9 96       	adiw	r28, 0x39	; 57
    295c:	0f b6       	in	r0, 0x3f	; 63
    295e:	f8 94       	cli
    2960:	de bf       	out	0x3e, r29	; 62
    2962:	0f be       	out	0x3f, r0	; 63
    2964:	cd bf       	out	0x3d, r28	; 61
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	cd b7       	in	r28, 0x3d	; 61
    2972:	de b7       	in	r29, 0x3e	; 62
    2974:	e9 97       	sbiw	r28, 0x39	; 57
    2976:	0f b6       	in	r0, 0x3f	; 63
    2978:	f8 94       	cli
    297a:	de bf       	out	0x3e, r29	; 62
    297c:	0f be       	out	0x3f, r0	; 63
    297e:	cd bf       	out	0x3d, r28	; 61
    2980:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2982:	83 e0       	ldi	r24, 0x03	; 3
    2984:	66 e0       	ldi	r22, 0x06	; 6
    2986:	41 e0       	ldi	r20, 0x01	; 1
    2988:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    298c:	80 e0       	ldi	r24, 0x00	; 0
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	a0 e8       	ldi	r26, 0x80	; 128
    2992:	bf e3       	ldi	r27, 0x3F	; 63
    2994:	8d ab       	std	Y+53, r24	; 0x35
    2996:	9e ab       	std	Y+54, r25	; 0x36
    2998:	af ab       	std	Y+55, r26	; 0x37
    299a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299c:	6d a9       	ldd	r22, Y+53	; 0x35
    299e:	7e a9       	ldd	r23, Y+54	; 0x36
    29a0:	8f a9       	ldd	r24, Y+55	; 0x37
    29a2:	98 ad       	ldd	r25, Y+56	; 0x38
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	4a e7       	ldi	r20, 0x7A	; 122
    29aa:	53 e4       	ldi	r21, 0x43	; 67
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	89 ab       	std	Y+49, r24	; 0x31
    29b6:	9a ab       	std	Y+50, r25	; 0x32
    29b8:	ab ab       	std	Y+51, r26	; 0x33
    29ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    29bc:	69 a9       	ldd	r22, Y+49	; 0x31
    29be:	7a a9       	ldd	r23, Y+50	; 0x32
    29c0:	8b a9       	ldd	r24, Y+51	; 0x33
    29c2:	9c a9       	ldd	r25, Y+52	; 0x34
    29c4:	20 e0       	ldi	r18, 0x00	; 0
    29c6:	30 e0       	ldi	r19, 0x00	; 0
    29c8:	40 e8       	ldi	r20, 0x80	; 128
    29ca:	5f e3       	ldi	r21, 0x3F	; 63
    29cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29d0:	88 23       	and	r24, r24
    29d2:	2c f4       	brge	.+10     	; 0x29de <LCD_displayCharacter+0x72>
		__ticks = 1;
    29d4:	81 e0       	ldi	r24, 0x01	; 1
    29d6:	90 e0       	ldi	r25, 0x00	; 0
    29d8:	98 ab       	std	Y+48, r25	; 0x30
    29da:	8f a7       	std	Y+47, r24	; 0x2f
    29dc:	3f c0       	rjmp	.+126    	; 0x2a5c <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    29de:	69 a9       	ldd	r22, Y+49	; 0x31
    29e0:	7a a9       	ldd	r23, Y+50	; 0x32
    29e2:	8b a9       	ldd	r24, Y+51	; 0x33
    29e4:	9c a9       	ldd	r25, Y+52	; 0x34
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	3f ef       	ldi	r19, 0xFF	; 255
    29ea:	4f e7       	ldi	r20, 0x7F	; 127
    29ec:	57 e4       	ldi	r21, 0x47	; 71
    29ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    29f2:	18 16       	cp	r1, r24
    29f4:	4c f5       	brge	.+82     	; 0x2a48 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f6:	6d a9       	ldd	r22, Y+53	; 0x35
    29f8:	7e a9       	ldd	r23, Y+54	; 0x36
    29fa:	8f a9       	ldd	r24, Y+55	; 0x37
    29fc:	98 ad       	ldd	r25, Y+56	; 0x38
    29fe:	20 e0       	ldi	r18, 0x00	; 0
    2a00:	30 e0       	ldi	r19, 0x00	; 0
    2a02:	40 e2       	ldi	r20, 0x20	; 32
    2a04:	51 e4       	ldi	r21, 0x41	; 65
    2a06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0a:	dc 01       	movw	r26, r24
    2a0c:	cb 01       	movw	r24, r22
    2a0e:	bc 01       	movw	r22, r24
    2a10:	cd 01       	movw	r24, r26
    2a12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a16:	dc 01       	movw	r26, r24
    2a18:	cb 01       	movw	r24, r22
    2a1a:	98 ab       	std	Y+48, r25	; 0x30
    2a1c:	8f a7       	std	Y+47, r24	; 0x2f
    2a1e:	0f c0       	rjmp	.+30     	; 0x2a3e <LCD_displayCharacter+0xd2>
    2a20:	89 e1       	ldi	r24, 0x19	; 25
    2a22:	90 e0       	ldi	r25, 0x00	; 0
    2a24:	9e a7       	std	Y+46, r25	; 0x2e
    2a26:	8d a7       	std	Y+45, r24	; 0x2d
    2a28:	8d a5       	ldd	r24, Y+45	; 0x2d
    2a2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2a2c:	01 97       	sbiw	r24, 0x01	; 1
    2a2e:	f1 f7       	brne	.-4      	; 0x2a2c <LCD_displayCharacter+0xc0>
    2a30:	9e a7       	std	Y+46, r25	; 0x2e
    2a32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a34:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a36:	98 a9       	ldd	r25, Y+48	; 0x30
    2a38:	01 97       	sbiw	r24, 0x01	; 1
    2a3a:	98 ab       	std	Y+48, r25	; 0x30
    2a3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a40:	98 a9       	ldd	r25, Y+48	; 0x30
    2a42:	00 97       	sbiw	r24, 0x00	; 0
    2a44:	69 f7       	brne	.-38     	; 0x2a20 <LCD_displayCharacter+0xb4>
    2a46:	14 c0       	rjmp	.+40     	; 0x2a70 <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a48:	69 a9       	ldd	r22, Y+49	; 0x31
    2a4a:	7a a9       	ldd	r23, Y+50	; 0x32
    2a4c:	8b a9       	ldd	r24, Y+51	; 0x33
    2a4e:	9c a9       	ldd	r25, Y+52	; 0x34
    2a50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a54:	dc 01       	movw	r26, r24
    2a56:	cb 01       	movw	r24, r22
    2a58:	98 ab       	std	Y+48, r25	; 0x30
    2a5a:	8f a7       	std	Y+47, r24	; 0x2f
    2a5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2a5e:	98 a9       	ldd	r25, Y+48	; 0x30
    2a60:	9c a7       	std	Y+44, r25	; 0x2c
    2a62:	8b a7       	std	Y+43, r24	; 0x2b
    2a64:	8b a5       	ldd	r24, Y+43	; 0x2b
    2a66:	9c a5       	ldd	r25, Y+44	; 0x2c
    2a68:	01 97       	sbiw	r24, 0x01	; 1
    2a6a:	f1 f7       	brne	.-4      	; 0x2a68 <LCD_displayCharacter+0xfc>
    2a6c:	9c a7       	std	Y+44, r25	; 0x2c
    2a6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2a70:	83 e0       	ldi	r24, 0x03	; 3
    2a72:	67 e0       	ldi	r22, 0x07	; 7
    2a74:	41 e0       	ldi	r20, 0x01	; 1
    2a76:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    2a7a:	80 e0       	ldi	r24, 0x00	; 0
    2a7c:	90 e0       	ldi	r25, 0x00	; 0
    2a7e:	a0 e8       	ldi	r26, 0x80	; 128
    2a80:	bf e3       	ldi	r27, 0x3F	; 63
    2a82:	8f a3       	std	Y+39, r24	; 0x27
    2a84:	98 a7       	std	Y+40, r25	; 0x28
    2a86:	a9 a7       	std	Y+41, r26	; 0x29
    2a88:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a8a:	6f a1       	ldd	r22, Y+39	; 0x27
    2a8c:	78 a5       	ldd	r23, Y+40	; 0x28
    2a8e:	89 a5       	ldd	r24, Y+41	; 0x29
    2a90:	9a a5       	ldd	r25, Y+42	; 0x2a
    2a92:	20 e0       	ldi	r18, 0x00	; 0
    2a94:	30 e0       	ldi	r19, 0x00	; 0
    2a96:	4a e7       	ldi	r20, 0x7A	; 122
    2a98:	53 e4       	ldi	r21, 0x43	; 67
    2a9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	8b a3       	std	Y+35, r24	; 0x23
    2aa4:	9c a3       	std	Y+36, r25	; 0x24
    2aa6:	ad a3       	std	Y+37, r26	; 0x25
    2aa8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aaa:	6b a1       	ldd	r22, Y+35	; 0x23
    2aac:	7c a1       	ldd	r23, Y+36	; 0x24
    2aae:	8d a1       	ldd	r24, Y+37	; 0x25
    2ab0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	40 e8       	ldi	r20, 0x80	; 128
    2ab8:	5f e3       	ldi	r21, 0x3F	; 63
    2aba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2abe:	88 23       	and	r24, r24
    2ac0:	2c f4       	brge	.+10     	; 0x2acc <LCD_displayCharacter+0x160>
		__ticks = 1;
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	9a a3       	std	Y+34, r25	; 0x22
    2ac8:	89 a3       	std	Y+33, r24	; 0x21
    2aca:	3f c0       	rjmp	.+126    	; 0x2b4a <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    2acc:	6b a1       	ldd	r22, Y+35	; 0x23
    2ace:	7c a1       	ldd	r23, Y+36	; 0x24
    2ad0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad4:	20 e0       	ldi	r18, 0x00	; 0
    2ad6:	3f ef       	ldi	r19, 0xFF	; 255
    2ad8:	4f e7       	ldi	r20, 0x7F	; 127
    2ada:	57 e4       	ldi	r21, 0x47	; 71
    2adc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ae0:	18 16       	cp	r1, r24
    2ae2:	4c f5       	brge	.+82     	; 0x2b36 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ae4:	6f a1       	ldd	r22, Y+39	; 0x27
    2ae6:	78 a5       	ldd	r23, Y+40	; 0x28
    2ae8:	89 a5       	ldd	r24, Y+41	; 0x29
    2aea:	9a a5       	ldd	r25, Y+42	; 0x2a
    2aec:	20 e0       	ldi	r18, 0x00	; 0
    2aee:	30 e0       	ldi	r19, 0x00	; 0
    2af0:	40 e2       	ldi	r20, 0x20	; 32
    2af2:	51 e4       	ldi	r21, 0x41	; 65
    2af4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af8:	dc 01       	movw	r26, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	bc 01       	movw	r22, r24
    2afe:	cd 01       	movw	r24, r26
    2b00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b04:	dc 01       	movw	r26, r24
    2b06:	cb 01       	movw	r24, r22
    2b08:	9a a3       	std	Y+34, r25	; 0x22
    2b0a:	89 a3       	std	Y+33, r24	; 0x21
    2b0c:	0f c0       	rjmp	.+30     	; 0x2b2c <LCD_displayCharacter+0x1c0>
    2b0e:	89 e1       	ldi	r24, 0x19	; 25
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	98 a3       	std	Y+32, r25	; 0x20
    2b14:	8f 8f       	std	Y+31, r24	; 0x1f
    2b16:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b18:	98 a1       	ldd	r25, Y+32	; 0x20
    2b1a:	01 97       	sbiw	r24, 0x01	; 1
    2b1c:	f1 f7       	brne	.-4      	; 0x2b1a <LCD_displayCharacter+0x1ae>
    2b1e:	98 a3       	std	Y+32, r25	; 0x20
    2b20:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b22:	89 a1       	ldd	r24, Y+33	; 0x21
    2b24:	9a a1       	ldd	r25, Y+34	; 0x22
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	9a a3       	std	Y+34, r25	; 0x22
    2b2a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b2c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b2e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b30:	00 97       	sbiw	r24, 0x00	; 0
    2b32:	69 f7       	brne	.-38     	; 0x2b0e <LCD_displayCharacter+0x1a2>
    2b34:	14 c0       	rjmp	.+40     	; 0x2b5e <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b36:	6b a1       	ldd	r22, Y+35	; 0x23
    2b38:	7c a1       	ldd	r23, Y+36	; 0x24
    2b3a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b3c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	9a a3       	std	Y+34, r25	; 0x22
    2b48:	89 a3       	std	Y+33, r24	; 0x21
    2b4a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b4e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b50:	8d 8f       	std	Y+29, r24	; 0x1d
    2b52:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b54:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b56:	01 97       	sbiw	r24, 0x01	; 1
    2b58:	f1 f7       	brne	.-4      	; 0x2b56 <LCD_displayCharacter+0x1ea>
    2b5a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b5c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	69 ad       	ldd	r22, Y+57	; 0x39
    2b62:	0e 94 8d 10 	call	0x211a	; 0x211a <GPIO_writePort>
    2b66:	80 e0       	ldi	r24, 0x00	; 0
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	a0 e8       	ldi	r26, 0x80	; 128
    2b6c:	bf e3       	ldi	r27, 0x3F	; 63
    2b6e:	89 8f       	std	Y+25, r24	; 0x19
    2b70:	9a 8f       	std	Y+26, r25	; 0x1a
    2b72:	ab 8f       	std	Y+27, r26	; 0x1b
    2b74:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b76:	69 8d       	ldd	r22, Y+25	; 0x19
    2b78:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b7a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2b7c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2b7e:	20 e0       	ldi	r18, 0x00	; 0
    2b80:	30 e0       	ldi	r19, 0x00	; 0
    2b82:	4a e7       	ldi	r20, 0x7A	; 122
    2b84:	53 e4       	ldi	r21, 0x43	; 67
    2b86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b8a:	dc 01       	movw	r26, r24
    2b8c:	cb 01       	movw	r24, r22
    2b8e:	8d 8b       	std	Y+21, r24	; 0x15
    2b90:	9e 8b       	std	Y+22, r25	; 0x16
    2b92:	af 8b       	std	Y+23, r26	; 0x17
    2b94:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2b96:	6d 89       	ldd	r22, Y+21	; 0x15
    2b98:	7e 89       	ldd	r23, Y+22	; 0x16
    2b9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b9e:	20 e0       	ldi	r18, 0x00	; 0
    2ba0:	30 e0       	ldi	r19, 0x00	; 0
    2ba2:	40 e8       	ldi	r20, 0x80	; 128
    2ba4:	5f e3       	ldi	r21, 0x3F	; 63
    2ba6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2baa:	88 23       	and	r24, r24
    2bac:	2c f4       	brge	.+10     	; 0x2bb8 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2bae:	81 e0       	ldi	r24, 0x01	; 1
    2bb0:	90 e0       	ldi	r25, 0x00	; 0
    2bb2:	9c 8b       	std	Y+20, r25	; 0x14
    2bb4:	8b 8b       	std	Y+19, r24	; 0x13
    2bb6:	3f c0       	rjmp	.+126    	; 0x2c36 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2bb8:	6d 89       	ldd	r22, Y+21	; 0x15
    2bba:	7e 89       	ldd	r23, Y+22	; 0x16
    2bbc:	8f 89       	ldd	r24, Y+23	; 0x17
    2bbe:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc0:	20 e0       	ldi	r18, 0x00	; 0
    2bc2:	3f ef       	ldi	r19, 0xFF	; 255
    2bc4:	4f e7       	ldi	r20, 0x7F	; 127
    2bc6:	57 e4       	ldi	r21, 0x47	; 71
    2bc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2bcc:	18 16       	cp	r1, r24
    2bce:	4c f5       	brge	.+82     	; 0x2c22 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bd0:	69 8d       	ldd	r22, Y+25	; 0x19
    2bd2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bd4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bd6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bd8:	20 e0       	ldi	r18, 0x00	; 0
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	40 e2       	ldi	r20, 0x20	; 32
    2bde:	51 e4       	ldi	r21, 0x41	; 65
    2be0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2be4:	dc 01       	movw	r26, r24
    2be6:	cb 01       	movw	r24, r22
    2be8:	bc 01       	movw	r22, r24
    2bea:	cd 01       	movw	r24, r26
    2bec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bf0:	dc 01       	movw	r26, r24
    2bf2:	cb 01       	movw	r24, r22
    2bf4:	9c 8b       	std	Y+20, r25	; 0x14
    2bf6:	8b 8b       	std	Y+19, r24	; 0x13
    2bf8:	0f c0       	rjmp	.+30     	; 0x2c18 <LCD_displayCharacter+0x2ac>
    2bfa:	89 e1       	ldi	r24, 0x19	; 25
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9a 8b       	std	Y+18, r25	; 0x12
    2c00:	89 8b       	std	Y+17, r24	; 0x11
    2c02:	89 89       	ldd	r24, Y+17	; 0x11
    2c04:	9a 89       	ldd	r25, Y+18	; 0x12
    2c06:	01 97       	sbiw	r24, 0x01	; 1
    2c08:	f1 f7       	brne	.-4      	; 0x2c06 <LCD_displayCharacter+0x29a>
    2c0a:	9a 8b       	std	Y+18, r25	; 0x12
    2c0c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c0e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c10:	9c 89       	ldd	r25, Y+20	; 0x14
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	9c 8b       	std	Y+20, r25	; 0x14
    2c16:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c18:	8b 89       	ldd	r24, Y+19	; 0x13
    2c1a:	9c 89       	ldd	r25, Y+20	; 0x14
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	69 f7       	brne	.-38     	; 0x2bfa <LCD_displayCharacter+0x28e>
    2c20:	14 c0       	rjmp	.+40     	; 0x2c4a <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c22:	6d 89       	ldd	r22, Y+21	; 0x15
    2c24:	7e 89       	ldd	r23, Y+22	; 0x16
    2c26:	8f 89       	ldd	r24, Y+23	; 0x17
    2c28:	98 8d       	ldd	r25, Y+24	; 0x18
    2c2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c2e:	dc 01       	movw	r26, r24
    2c30:	cb 01       	movw	r24, r22
    2c32:	9c 8b       	std	Y+20, r25	; 0x14
    2c34:	8b 8b       	std	Y+19, r24	; 0x13
    2c36:	8b 89       	ldd	r24, Y+19	; 0x13
    2c38:	9c 89       	ldd	r25, Y+20	; 0x14
    2c3a:	98 8b       	std	Y+16, r25	; 0x10
    2c3c:	8f 87       	std	Y+15, r24	; 0x0f
    2c3e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c40:	98 89       	ldd	r25, Y+16	; 0x10
    2c42:	01 97       	sbiw	r24, 0x01	; 1
    2c44:	f1 f7       	brne	.-4      	; 0x2c42 <LCD_displayCharacter+0x2d6>
    2c46:	98 8b       	std	Y+16, r25	; 0x10
    2c48:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2c4a:	83 e0       	ldi	r24, 0x03	; 3
    2c4c:	67 e0       	ldi	r22, 0x07	; 7
    2c4e:	40 e0       	ldi	r20, 0x00	; 0
    2c50:	0e 94 c3 0e 	call	0x1d86	; 0x1d86 <GPIO_writePin>
    2c54:	80 e0       	ldi	r24, 0x00	; 0
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	a0 e8       	ldi	r26, 0x80	; 128
    2c5a:	bf e3       	ldi	r27, 0x3F	; 63
    2c5c:	8b 87       	std	Y+11, r24	; 0x0b
    2c5e:	9c 87       	std	Y+12, r25	; 0x0c
    2c60:	ad 87       	std	Y+13, r26	; 0x0d
    2c62:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c64:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c66:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c68:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c6a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c6c:	20 e0       	ldi	r18, 0x00	; 0
    2c6e:	30 e0       	ldi	r19, 0x00	; 0
    2c70:	4a e7       	ldi	r20, 0x7A	; 122
    2c72:	53 e4       	ldi	r21, 0x43	; 67
    2c74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c78:	dc 01       	movw	r26, r24
    2c7a:	cb 01       	movw	r24, r22
    2c7c:	8f 83       	std	Y+7, r24	; 0x07
    2c7e:	98 87       	std	Y+8, r25	; 0x08
    2c80:	a9 87       	std	Y+9, r26	; 0x09
    2c82:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c84:	6f 81       	ldd	r22, Y+7	; 0x07
    2c86:	78 85       	ldd	r23, Y+8	; 0x08
    2c88:	89 85       	ldd	r24, Y+9	; 0x09
    2c8a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c8c:	20 e0       	ldi	r18, 0x00	; 0
    2c8e:	30 e0       	ldi	r19, 0x00	; 0
    2c90:	40 e8       	ldi	r20, 0x80	; 128
    2c92:	5f e3       	ldi	r21, 0x3F	; 63
    2c94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c98:	88 23       	and	r24, r24
    2c9a:	2c f4       	brge	.+10     	; 0x2ca6 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	9e 83       	std	Y+6, r25	; 0x06
    2ca2:	8d 83       	std	Y+5, r24	; 0x05
    2ca4:	3f c0       	rjmp	.+126    	; 0x2d24 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2ca6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca8:	78 85       	ldd	r23, Y+8	; 0x08
    2caa:	89 85       	ldd	r24, Y+9	; 0x09
    2cac:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cae:	20 e0       	ldi	r18, 0x00	; 0
    2cb0:	3f ef       	ldi	r19, 0xFF	; 255
    2cb2:	4f e7       	ldi	r20, 0x7F	; 127
    2cb4:	57 e4       	ldi	r21, 0x47	; 71
    2cb6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2cba:	18 16       	cp	r1, r24
    2cbc:	4c f5       	brge	.+82     	; 0x2d10 <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2cc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2cc6:	20 e0       	ldi	r18, 0x00	; 0
    2cc8:	30 e0       	ldi	r19, 0x00	; 0
    2cca:	40 e2       	ldi	r20, 0x20	; 32
    2ccc:	51 e4       	ldi	r21, 0x41	; 65
    2cce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cd2:	dc 01       	movw	r26, r24
    2cd4:	cb 01       	movw	r24, r22
    2cd6:	bc 01       	movw	r22, r24
    2cd8:	cd 01       	movw	r24, r26
    2cda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cde:	dc 01       	movw	r26, r24
    2ce0:	cb 01       	movw	r24, r22
    2ce2:	9e 83       	std	Y+6, r25	; 0x06
    2ce4:	8d 83       	std	Y+5, r24	; 0x05
    2ce6:	0f c0       	rjmp	.+30     	; 0x2d06 <LCD_displayCharacter+0x39a>
    2ce8:	89 e1       	ldi	r24, 0x19	; 25
    2cea:	90 e0       	ldi	r25, 0x00	; 0
    2cec:	9c 83       	std	Y+4, r25	; 0x04
    2cee:	8b 83       	std	Y+3, r24	; 0x03
    2cf0:	8b 81       	ldd	r24, Y+3	; 0x03
    2cf2:	9c 81       	ldd	r25, Y+4	; 0x04
    2cf4:	01 97       	sbiw	r24, 0x01	; 1
    2cf6:	f1 f7       	brne	.-4      	; 0x2cf4 <LCD_displayCharacter+0x388>
    2cf8:	9c 83       	std	Y+4, r25	; 0x04
    2cfa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cfc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cfe:	9e 81       	ldd	r25, Y+6	; 0x06
    2d00:	01 97       	sbiw	r24, 0x01	; 1
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	00 97       	sbiw	r24, 0x00	; 0
    2d0c:	69 f7       	brne	.-38     	; 0x2ce8 <LCD_displayCharacter+0x37c>
    2d0e:	14 c0       	rjmp	.+40     	; 0x2d38 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d10:	6f 81       	ldd	r22, Y+7	; 0x07
    2d12:	78 85       	ldd	r23, Y+8	; 0x08
    2d14:	89 85       	ldd	r24, Y+9	; 0x09
    2d16:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d1c:	dc 01       	movw	r26, r24
    2d1e:	cb 01       	movw	r24, r22
    2d20:	9e 83       	std	Y+6, r25	; 0x06
    2d22:	8d 83       	std	Y+5, r24	; 0x05
    2d24:	8d 81       	ldd	r24, Y+5	; 0x05
    2d26:	9e 81       	ldd	r25, Y+6	; 0x06
    2d28:	9a 83       	std	Y+2, r25	; 0x02
    2d2a:	89 83       	std	Y+1, r24	; 0x01
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	9a 81       	ldd	r25, Y+2	; 0x02
    2d30:	01 97       	sbiw	r24, 0x01	; 1
    2d32:	f1 f7       	brne	.-4      	; 0x2d30 <LCD_displayCharacter+0x3c4>
    2d34:	9a 83       	std	Y+2, r25	; 0x02
    2d36:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2d38:	e9 96       	adiw	r28, 0x39	; 57
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	00 d0       	rcall	.+0      	; 0x2d50 <LCD_displayString+0x6>
    2d50:	0f 92       	push	r0
    2d52:	cd b7       	in	r28, 0x3d	; 61
    2d54:	de b7       	in	r29, 0x3e	; 62
    2d56:	9b 83       	std	Y+3, r25	; 0x03
    2d58:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d5a:	19 82       	std	Y+1, r1	; 0x01
    2d5c:	0e c0       	rjmp	.+28     	; 0x2d7a <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2d5e:	89 81       	ldd	r24, Y+1	; 0x01
    2d60:	28 2f       	mov	r18, r24
    2d62:	30 e0       	ldi	r19, 0x00	; 0
    2d64:	8a 81       	ldd	r24, Y+2	; 0x02
    2d66:	9b 81       	ldd	r25, Y+3	; 0x03
    2d68:	fc 01       	movw	r30, r24
    2d6a:	e2 0f       	add	r30, r18
    2d6c:	f3 1f       	adc	r31, r19
    2d6e:	80 81       	ld	r24, Z
    2d70:	0e 94 b6 14 	call	0x296c	; 0x296c <LCD_displayCharacter>
		i++;
    2d74:	89 81       	ldd	r24, Y+1	; 0x01
    2d76:	8f 5f       	subi	r24, 0xFF	; 255
    2d78:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2d7a:	89 81       	ldd	r24, Y+1	; 0x01
    2d7c:	28 2f       	mov	r18, r24
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	8a 81       	ldd	r24, Y+2	; 0x02
    2d82:	9b 81       	ldd	r25, Y+3	; 0x03
    2d84:	fc 01       	movw	r30, r24
    2d86:	e2 0f       	add	r30, r18
    2d88:	f3 1f       	adc	r31, r19
    2d8a:	80 81       	ld	r24, Z
    2d8c:	88 23       	and	r24, r24
    2d8e:	39 f7       	brne	.-50     	; 0x2d5e <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2d90:	0f 90       	pop	r0
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	cf 91       	pop	r28
    2d98:	df 91       	pop	r29
    2d9a:	08 95       	ret

00002d9c <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2d9c:	df 93       	push	r29
    2d9e:	cf 93       	push	r28
    2da0:	00 d0       	rcall	.+0      	; 0x2da2 <LCD_moveCursor+0x6>
    2da2:	00 d0       	rcall	.+0      	; 0x2da4 <LCD_moveCursor+0x8>
    2da4:	0f 92       	push	r0
    2da6:	cd b7       	in	r28, 0x3d	; 61
    2da8:	de b7       	in	r29, 0x3e	; 62
    2daa:	8a 83       	std	Y+2, r24	; 0x02
    2dac:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2dae:	8a 81       	ldd	r24, Y+2	; 0x02
    2db0:	28 2f       	mov	r18, r24
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	3d 83       	std	Y+5, r19	; 0x05
    2db6:	2c 83       	std	Y+4, r18	; 0x04
    2db8:	8c 81       	ldd	r24, Y+4	; 0x04
    2dba:	9d 81       	ldd	r25, Y+5	; 0x05
    2dbc:	81 30       	cpi	r24, 0x01	; 1
    2dbe:	91 05       	cpc	r25, r1
    2dc0:	c1 f0       	breq	.+48     	; 0x2df2 <LCD_moveCursor+0x56>
    2dc2:	2c 81       	ldd	r18, Y+4	; 0x04
    2dc4:	3d 81       	ldd	r19, Y+5	; 0x05
    2dc6:	22 30       	cpi	r18, 0x02	; 2
    2dc8:	31 05       	cpc	r19, r1
    2dca:	2c f4       	brge	.+10     	; 0x2dd6 <LCD_moveCursor+0x3a>
    2dcc:	8c 81       	ldd	r24, Y+4	; 0x04
    2dce:	9d 81       	ldd	r25, Y+5	; 0x05
    2dd0:	00 97       	sbiw	r24, 0x00	; 0
    2dd2:	61 f0       	breq	.+24     	; 0x2dec <LCD_moveCursor+0x50>
    2dd4:	19 c0       	rjmp	.+50     	; 0x2e08 <LCD_moveCursor+0x6c>
    2dd6:	2c 81       	ldd	r18, Y+4	; 0x04
    2dd8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dda:	22 30       	cpi	r18, 0x02	; 2
    2ddc:	31 05       	cpc	r19, r1
    2dde:	69 f0       	breq	.+26     	; 0x2dfa <LCD_moveCursor+0x5e>
    2de0:	8c 81       	ldd	r24, Y+4	; 0x04
    2de2:	9d 81       	ldd	r25, Y+5	; 0x05
    2de4:	83 30       	cpi	r24, 0x03	; 3
    2de6:	91 05       	cpc	r25, r1
    2de8:	61 f0       	breq	.+24     	; 0x2e02 <LCD_moveCursor+0x66>
    2dea:	0e c0       	rjmp	.+28     	; 0x2e08 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2dec:	8b 81       	ldd	r24, Y+3	; 0x03
    2dee:	89 83       	std	Y+1, r24	; 0x01
    2df0:	0b c0       	rjmp	.+22     	; 0x2e08 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2df2:	8b 81       	ldd	r24, Y+3	; 0x03
    2df4:	80 5c       	subi	r24, 0xC0	; 192
    2df6:	89 83       	std	Y+1, r24	; 0x01
    2df8:	07 c0       	rjmp	.+14     	; 0x2e08 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2dfa:	8b 81       	ldd	r24, Y+3	; 0x03
    2dfc:	80 5f       	subi	r24, 0xF0	; 240
    2dfe:	89 83       	std	Y+1, r24	; 0x01
    2e00:	03 c0       	rjmp	.+6      	; 0x2e08 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2e02:	8b 81       	ldd	r24, Y+3	; 0x03
    2e04:	80 5b       	subi	r24, 0xB0	; 176
    2e06:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2e08:	89 81       	ldd	r24, Y+1	; 0x01
    2e0a:	80 68       	ori	r24, 0x80	; 128
    2e0c:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_sendCommand>
}
    2e10:	0f 90       	pop	r0
    2e12:	0f 90       	pop	r0
    2e14:	0f 90       	pop	r0
    2e16:	0f 90       	pop	r0
    2e18:	0f 90       	pop	r0
    2e1a:	cf 91       	pop	r28
    2e1c:	df 91       	pop	r29
    2e1e:	08 95       	ret

00002e20 <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2e20:	df 93       	push	r29
    2e22:	cf 93       	push	r28
    2e24:	00 d0       	rcall	.+0      	; 0x2e26 <LCD_displayStringRowColumn+0x6>
    2e26:	00 d0       	rcall	.+0      	; 0x2e28 <LCD_displayStringRowColumn+0x8>
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
    2e2c:	89 83       	std	Y+1, r24	; 0x01
    2e2e:	6a 83       	std	Y+2, r22	; 0x02
    2e30:	5c 83       	std	Y+4, r21	; 0x04
    2e32:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2e34:	89 81       	ldd	r24, Y+1	; 0x01
    2e36:	6a 81       	ldd	r22, Y+2	; 0x02
    2e38:	0e 94 ce 16 	call	0x2d9c	; 0x2d9c <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    2e3e:	9c 81       	ldd	r25, Y+4	; 0x04
    2e40:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_displayString>
}
    2e44:	0f 90       	pop	r0
    2e46:	0f 90       	pop	r0
    2e48:	0f 90       	pop	r0
    2e4a:	0f 90       	pop	r0
    2e4c:	cf 91       	pop	r28
    2e4e:	df 91       	pop	r29
    2e50:	08 95       	ret

00002e52 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2e52:	df 93       	push	r29
    2e54:	cf 93       	push	r28
    2e56:	cd b7       	in	r28, 0x3d	; 61
    2e58:	de b7       	in	r29, 0x3e	; 62
    2e5a:	62 97       	sbiw	r28, 0x12	; 18
    2e5c:	0f b6       	in	r0, 0x3f	; 63
    2e5e:	f8 94       	cli
    2e60:	de bf       	out	0x3e, r29	; 62
    2e62:	0f be       	out	0x3f, r0	; 63
    2e64:	cd bf       	out	0x3d, r28	; 61
    2e66:	9a 8b       	std	Y+18, r25	; 0x12
    2e68:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2e6a:	89 89       	ldd	r24, Y+17	; 0x11
    2e6c:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6e:	9e 01       	movw	r18, r28
    2e70:	2f 5f       	subi	r18, 0xFF	; 255
    2e72:	3f 4f       	sbci	r19, 0xFF	; 255
    2e74:	b9 01       	movw	r22, r18
    2e76:	4a e0       	ldi	r20, 0x0A	; 10
    2e78:	50 e0       	ldi	r21, 0x00	; 0
    2e7a:	0e 94 b8 19 	call	0x3370	; 0x3370 <itoa>
   LCD_displayString(buff); /* Display the string */
    2e7e:	ce 01       	movw	r24, r28
    2e80:	01 96       	adiw	r24, 0x01	; 1
    2e82:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <LCD_displayString>
}
    2e86:	62 96       	adiw	r28, 0x12	; 18
    2e88:	0f b6       	in	r0, 0x3f	; 63
    2e8a:	f8 94       	cli
    2e8c:	de bf       	out	0x3e, r29	; 62
    2e8e:	0f be       	out	0x3f, r0	; 63
    2e90:	cd bf       	out	0x3d, r28	; 61
    2e92:	cf 91       	pop	r28
    2e94:	df 91       	pop	r29
    2e96:	08 95       	ret

00002e98 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2e98:	df 93       	push	r29
    2e9a:	cf 93       	push	r28
    2e9c:	cd b7       	in	r28, 0x3d	; 61
    2e9e:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_sendCommand>
}
    2ea6:	cf 91       	pop	r28
    2ea8:	df 91       	pop	r29
    2eaa:	08 95       	ret

00002eac <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*FOR COMPARE MODE*/
ISR(TIMER1_COMPA_vect)
{
    2eac:	1f 92       	push	r1
    2eae:	0f 92       	push	r0
    2eb0:	0f b6       	in	r0, 0x3f	; 63
    2eb2:	0f 92       	push	r0
    2eb4:	11 24       	eor	r1, r1
    2eb6:	2f 93       	push	r18
    2eb8:	3f 93       	push	r19
    2eba:	4f 93       	push	r20
    2ebc:	5f 93       	push	r21
    2ebe:	6f 93       	push	r22
    2ec0:	7f 93       	push	r23
    2ec2:	8f 93       	push	r24
    2ec4:	9f 93       	push	r25
    2ec6:	af 93       	push	r26
    2ec8:	bf 93       	push	r27
    2eca:	ef 93       	push	r30
    2ecc:	ff 93       	push	r31
    2ece:	df 93       	push	r29
    2ed0:	cf 93       	push	r28
    2ed2:	cd b7       	in	r28, 0x3d	; 61
    2ed4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2ed6:	80 91 20 01 	lds	r24, 0x0120
    2eda:	90 91 21 01 	lds	r25, 0x0121
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	29 f0       	breq	.+10     	; 0x2eec <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2ee2:	e0 91 20 01 	lds	r30, 0x0120
    2ee6:	f0 91 21 01 	lds	r31, 0x0121
    2eea:	09 95       	icall
	}
}
    2eec:	cf 91       	pop	r28
    2eee:	df 91       	pop	r29
    2ef0:	ff 91       	pop	r31
    2ef2:	ef 91       	pop	r30
    2ef4:	bf 91       	pop	r27
    2ef6:	af 91       	pop	r26
    2ef8:	9f 91       	pop	r25
    2efa:	8f 91       	pop	r24
    2efc:	7f 91       	pop	r23
    2efe:	6f 91       	pop	r22
    2f00:	5f 91       	pop	r21
    2f02:	4f 91       	pop	r20
    2f04:	3f 91       	pop	r19
    2f06:	2f 91       	pop	r18
    2f08:	0f 90       	pop	r0
    2f0a:	0f be       	out	0x3f, r0	; 63
    2f0c:	0f 90       	pop	r0
    2f0e:	1f 90       	pop	r1
    2f10:	18 95       	reti

00002f12 <__vector_9>:


/*FOR OVERFLOW MODE*/
ISR(TIMER1_OVF_vect)
{
    2f12:	1f 92       	push	r1
    2f14:	0f 92       	push	r0
    2f16:	0f b6       	in	r0, 0x3f	; 63
    2f18:	0f 92       	push	r0
    2f1a:	11 24       	eor	r1, r1
    2f1c:	2f 93       	push	r18
    2f1e:	3f 93       	push	r19
    2f20:	4f 93       	push	r20
    2f22:	5f 93       	push	r21
    2f24:	6f 93       	push	r22
    2f26:	7f 93       	push	r23
    2f28:	8f 93       	push	r24
    2f2a:	9f 93       	push	r25
    2f2c:	af 93       	push	r26
    2f2e:	bf 93       	push	r27
    2f30:	ef 93       	push	r30
    2f32:	ff 93       	push	r31
    2f34:	df 93       	push	r29
    2f36:	cf 93       	push	r28
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2f3c:	80 91 20 01 	lds	r24, 0x0120
    2f40:	90 91 21 01 	lds	r25, 0x0121
    2f44:	00 97       	sbiw	r24, 0x00	; 0
    2f46:	29 f0       	breq	.+10     	; 0x2f52 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2f48:	e0 91 20 01 	lds	r30, 0x0120
    2f4c:	f0 91 21 01 	lds	r31, 0x0121
    2f50:	09 95       	icall
	}
}
    2f52:	cf 91       	pop	r28
    2f54:	df 91       	pop	r29
    2f56:	ff 91       	pop	r31
    2f58:	ef 91       	pop	r30
    2f5a:	bf 91       	pop	r27
    2f5c:	af 91       	pop	r26
    2f5e:	9f 91       	pop	r25
    2f60:	8f 91       	pop	r24
    2f62:	7f 91       	pop	r23
    2f64:	6f 91       	pop	r22
    2f66:	5f 91       	pop	r21
    2f68:	4f 91       	pop	r20
    2f6a:	3f 91       	pop	r19
    2f6c:	2f 91       	pop	r18
    2f6e:	0f 90       	pop	r0
    2f70:	0f be       	out	0x3f, r0	; 63
    2f72:	0f 90       	pop	r0
    2f74:	1f 90       	pop	r1
    2f76:	18 95       	reti

00002f78 <Timer1_init>:




void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2f78:	df 93       	push	r29
    2f7a:	cf 93       	push	r28
    2f7c:	00 d0       	rcall	.+0      	; 0x2f7e <Timer1_init+0x6>
    2f7e:	cd b7       	in	r28, 0x3d	; 61
    2f80:	de b7       	in	r29, 0x3e	; 62
    2f82:	9a 83       	std	Y+2, r25	; 0x02
    2f84:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;
    2f86:	ac e4       	ldi	r26, 0x4C	; 76
    2f88:	b0 e0       	ldi	r27, 0x00	; 0
    2f8a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f8c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f8e:	80 81       	ld	r24, Z
    2f90:	91 81       	ldd	r25, Z+1	; 0x01
    2f92:	11 96       	adiw	r26, 0x01	; 1
    2f94:	9c 93       	st	X, r25
    2f96:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    2f98:	aa e4       	ldi	r26, 0x4A	; 74
    2f9a:	b0 e0       	ldi	r27, 0x00	; 0
    2f9c:	e9 81       	ldd	r30, Y+1	; 0x01
    2f9e:	fa 81       	ldd	r31, Y+2	; 0x02
    2fa0:	82 81       	ldd	r24, Z+2	; 0x02
    2fa2:	93 81       	ldd	r25, Z+3	; 0x03
    2fa4:	11 96       	adiw	r26, 0x01	; 1
    2fa6:	9c 93       	st	X, r25
    2fa8:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B); //for NON_PWM mode
    2faa:	af e4       	ldi	r26, 0x4F	; 79
    2fac:	b0 e0       	ldi	r27, 0x00	; 0
    2fae:	ef e4       	ldi	r30, 0x4F	; 79
    2fb0:	f0 e0       	ldi	r31, 0x00	; 0
    2fb2:	80 81       	ld	r24, Z
    2fb4:	8c 60       	ori	r24, 0x0C	; 12
    2fb6:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0XF8) |(Config_Ptr->prescaler);
    2fb8:	ae e4       	ldi	r26, 0x4E	; 78
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	ee e4       	ldi	r30, 0x4E	; 78
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	80 81       	ld	r24, Z
    2fc2:	98 2f       	mov	r25, r24
    2fc4:	98 7f       	andi	r25, 0xF8	; 248
    2fc6:	e9 81       	ldd	r30, Y+1	; 0x01
    2fc8:	fa 81       	ldd	r31, Y+2	; 0x02
    2fca:	84 81       	ldd	r24, Z+4	; 0x04
    2fcc:	89 2b       	or	r24, r25
    2fce:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B& 0XF7)|(Config_Ptr->mode<<WGM12);
    2fd0:	ae e4       	ldi	r26, 0x4E	; 78
    2fd2:	b0 e0       	ldi	r27, 0x00	; 0
    2fd4:	ee e4       	ldi	r30, 0x4E	; 78
    2fd6:	f0 e0       	ldi	r31, 0x00	; 0
    2fd8:	80 81       	ld	r24, Z
    2fda:	28 2f       	mov	r18, r24
    2fdc:	27 7f       	andi	r18, 0xF7	; 247
    2fde:	e9 81       	ldd	r30, Y+1	; 0x01
    2fe0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fe2:	85 81       	ldd	r24, Z+5	; 0x05
    2fe4:	88 2f       	mov	r24, r24
    2fe6:	90 e0       	ldi	r25, 0x00	; 0
    2fe8:	88 0f       	add	r24, r24
    2fea:	99 1f       	adc	r25, r25
    2fec:	88 0f       	add	r24, r24
    2fee:	99 1f       	adc	r25, r25
    2ff0:	88 0f       	add	r24, r24
    2ff2:	99 1f       	adc	r25, r25
    2ff4:	82 2b       	or	r24, r18
    2ff6:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE1A) | (1<< TOIE1); ////OCIE1A interrupt enable for a compare Maching.TOIE  OVERFLOW interrupt enable
    2ff8:	a9 e5       	ldi	r26, 0x59	; 89
    2ffa:	b0 e0       	ldi	r27, 0x00	; 0
    2ffc:	e9 e5       	ldi	r30, 0x59	; 89
    2ffe:	f0 e0       	ldi	r31, 0x00	; 0
    3000:	80 81       	ld	r24, Z
    3002:	84 61       	ori	r24, 0x14	; 20
    3004:	8c 93       	st	X, r24
	sei(); //SET I-BIT
    3006:	78 94       	sei
}
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <Timer1_deInit>:

void Timer1_deInit(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0;
    301a:	ec e4       	ldi	r30, 0x4C	; 76
    301c:	f0 e0       	ldi	r31, 0x00	; 0
    301e:	11 82       	std	Z+1, r1	; 0x01
    3020:	10 82       	st	Z, r1
	OCR1A = 0;
    3022:	ea e4       	ldi	r30, 0x4A	; 74
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	11 82       	std	Z+1, r1	; 0x01
    3028:	10 82       	st	Z, r1
	TCCR1A =0;
    302a:	ef e4       	ldi	r30, 0x4F	; 79
    302c:	f0 e0       	ldi	r31, 0x00	; 0
    302e:	10 82       	st	Z, r1
	TCCR1B=0;
    3030:	ee e4       	ldi	r30, 0x4E	; 78
    3032:	f0 e0       	ldi	r31, 0x00	; 0
    3034:	10 82       	st	Z, r1
	TIMSK =0;
    3036:	e9 e5       	ldi	r30, 0x59	; 89
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	10 82       	st	Z, r1
	cli(); //Clear I-BIT
    303c:	f8 94       	cli


}
    303e:	cf 91       	pop	r28
    3040:	df 91       	pop	r29
    3042:	08 95       	ret

00003044 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    3044:	df 93       	push	r29
    3046:	cf 93       	push	r28
    3048:	00 d0       	rcall	.+0      	; 0x304a <Timer1_setCallBack+0x6>
    304a:	cd b7       	in	r28, 0x3d	; 61
    304c:	de b7       	in	r29, 0x3e	; 62
    304e:	9a 83       	std	Y+2, r25	; 0x02
    3050:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	9a 81       	ldd	r25, Y+2	; 0x02
    3056:	90 93 21 01 	sts	0x0121, r25
    305a:	80 93 20 01 	sts	0x0120, r24

}
    305e:	0f 90       	pop	r0
    3060:	0f 90       	pop	r0
    3062:	cf 91       	pop	r28
    3064:	df 91       	pop	r29
    3066:	08 95       	ret

00003068 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    3068:	df 93       	push	r29
    306a:	cf 93       	push	r28
    306c:	00 d0       	rcall	.+0      	; 0x306e <UART_init+0x6>
    306e:	00 d0       	rcall	.+0      	; 0x3070 <UART_init+0x8>
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	9c 83       	std	Y+4, r25	; 0x04
    3076:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    3078:	1a 82       	std	Y+2, r1	; 0x02
    307a:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    307c:	eb e2       	ldi	r30, 0x2B	; 43
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	82 e0       	ldi	r24, 0x02	; 2
    3082:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    3084:	ea e2       	ldi	r30, 0x2A	; 42
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	88 e1       	ldi	r24, 0x18	; 24
    308a:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==_9_bit){
    308c:	eb 81       	ldd	r30, Y+3	; 0x03
    308e:	fc 81       	ldd	r31, Y+4	; 0x04
    3090:	80 81       	ld	r24, Z
    3092:	87 30       	cpi	r24, 0x07	; 7
    3094:	39 f4       	brne	.+14     	; 0x30a4 <UART_init+0x3c>
		UCSRB |=(1<<UCSZ2);
    3096:	aa e2       	ldi	r26, 0x2A	; 42
    3098:	b0 e0       	ldi	r27, 0x00	; 0
    309a:	ea e2       	ldi	r30, 0x2A	; 42
    309c:	f0 e0       	ldi	r31, 0x00	; 0
    309e:	80 81       	ld	r24, Z
    30a0:	84 60       	ori	r24, 0x04	; 4
    30a2:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    30a4:	e0 e4       	ldi	r30, 0x40	; 64
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 e8       	ldi	r24, 0x80	; 128
    30aa:	80 83       	st	Z, r24
	UCSRC =(UCSRC &0xF9)|(Config_Ptr->bit_data <<1);
    30ac:	a0 e4       	ldi	r26, 0x40	; 64
    30ae:	b0 e0       	ldi	r27, 0x00	; 0
    30b0:	e0 e4       	ldi	r30, 0x40	; 64
    30b2:	f0 e0       	ldi	r31, 0x00	; 0
    30b4:	80 81       	ld	r24, Z
    30b6:	28 2f       	mov	r18, r24
    30b8:	29 7f       	andi	r18, 0xF9	; 249
    30ba:	eb 81       	ldd	r30, Y+3	; 0x03
    30bc:	fc 81       	ldd	r31, Y+4	; 0x04
    30be:	80 81       	ld	r24, Z
    30c0:	88 2f       	mov	r24, r24
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	88 0f       	add	r24, r24
    30c6:	99 1f       	adc	r25, r25
    30c8:	82 2b       	or	r24, r18
    30ca:	8c 93       	st	X, r24
	/*to be sure that the bit USBS  won't be set in 9bit mode  */
	if(Config_Ptr->bit_data==_9_bit){
    30cc:	eb 81       	ldd	r30, Y+3	; 0x03
    30ce:	fc 81       	ldd	r31, Y+4	; 0x04
    30d0:	80 81       	ld	r24, Z
    30d2:	87 30       	cpi	r24, 0x07	; 7
    30d4:	39 f4       	brne	.+14     	; 0x30e4 <UART_init+0x7c>
		UCSRC =(UCSRC &0xF7);
    30d6:	a0 e4       	ldi	r26, 0x40	; 64
    30d8:	b0 e0       	ldi	r27, 0x00	; 0
    30da:	e0 e4       	ldi	r30, 0x40	; 64
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	80 81       	ld	r24, Z
    30e0:	87 7f       	andi	r24, 0xF7	; 247
    30e2:	8c 93       	st	X, r24
	}

	/*(UCSRC &0xCF(1100 1111)) to save other bits and clear the desired ones */
	UCSRC =(UCSRC &0xCF)|(Config_Ptr->parity <<4);
    30e4:	a0 e4       	ldi	r26, 0x40	; 64
    30e6:	b0 e0       	ldi	r27, 0x00	; 0
    30e8:	e0 e4       	ldi	r30, 0x40	; 64
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	80 81       	ld	r24, Z
    30ee:	28 2f       	mov	r18, r24
    30f0:	2f 7c       	andi	r18, 0xCF	; 207
    30f2:	eb 81       	ldd	r30, Y+3	; 0x03
    30f4:	fc 81       	ldd	r31, Y+4	; 0x04
    30f6:	81 81       	ldd	r24, Z+1	; 0x01
    30f8:	88 2f       	mov	r24, r24
    30fa:	90 e0       	ldi	r25, 0x00	; 0
    30fc:	82 95       	swap	r24
    30fe:	92 95       	swap	r25
    3100:	90 7f       	andi	r25, 0xF0	; 240
    3102:	98 27       	eor	r25, r24
    3104:	80 7f       	andi	r24, 0xF0	; 240
    3106:	98 27       	eor	r25, r24
    3108:	82 2b       	or	r24, r18
    310a:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<USBS);
    310c:	a0 e4       	ldi	r26, 0x40	; 64
    310e:	b0 e0       	ldi	r27, 0x00	; 0
    3110:	e0 e4       	ldi	r30, 0x40	; 64
    3112:	f0 e0       	ldi	r31, 0x00	; 0
    3114:	80 81       	ld	r24, Z
    3116:	28 2f       	mov	r18, r24
    3118:	27 7f       	andi	r18, 0xF7	; 247
    311a:	eb 81       	ldd	r30, Y+3	; 0x03
    311c:	fc 81       	ldd	r31, Y+4	; 0x04
    311e:	82 81       	ldd	r24, Z+2	; 0x02
    3120:	88 2f       	mov	r24, r24
    3122:	90 e0       	ldi	r25, 0x00	; 0
    3124:	88 0f       	add	r24, r24
    3126:	99 1f       	adc	r25, r25
    3128:	88 0f       	add	r24, r24
    312a:	99 1f       	adc	r25, r25
    312c:	88 0f       	add	r24, r24
    312e:	99 1f       	adc	r25, r25
    3130:	82 2b       	or	r24, r18
    3132:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate )* 8UL))) - 1);
    3134:	eb 81       	ldd	r30, Y+3	; 0x03
    3136:	fc 81       	ldd	r31, Y+4	; 0x04
    3138:	83 81       	ldd	r24, Z+3	; 0x03
    313a:	94 81       	ldd	r25, Z+4	; 0x04
    313c:	a5 81       	ldd	r26, Z+5	; 0x05
    313e:	b6 81       	ldd	r27, Z+6	; 0x06
    3140:	88 0f       	add	r24, r24
    3142:	99 1f       	adc	r25, r25
    3144:	aa 1f       	adc	r26, r26
    3146:	bb 1f       	adc	r27, r27
    3148:	88 0f       	add	r24, r24
    314a:	99 1f       	adc	r25, r25
    314c:	aa 1f       	adc	r26, r26
    314e:	bb 1f       	adc	r27, r27
    3150:	88 0f       	add	r24, r24
    3152:	99 1f       	adc	r25, r25
    3154:	aa 1f       	adc	r26, r26
    3156:	bb 1f       	adc	r27, r27
    3158:	9c 01       	movw	r18, r24
    315a:	ad 01       	movw	r20, r26
    315c:	80 e4       	ldi	r24, 0x40	; 64
    315e:	92 e4       	ldi	r25, 0x42	; 66
    3160:	af e0       	ldi	r26, 0x0F	; 15
    3162:	b0 e0       	ldi	r27, 0x00	; 0
    3164:	bc 01       	movw	r22, r24
    3166:	cd 01       	movw	r24, r26
    3168:	0e 94 5f 19 	call	0x32be	; 0x32be <__udivmodsi4>
    316c:	da 01       	movw	r26, r20
    316e:	c9 01       	movw	r24, r18
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9a 83       	std	Y+2, r25	; 0x02
    3174:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    3176:	e0 e4       	ldi	r30, 0x40	; 64
    3178:	f0 e0       	ldi	r31, 0x00	; 0
    317a:	89 81       	ldd	r24, Y+1	; 0x01
    317c:	9a 81       	ldd	r25, Y+2	; 0x02
    317e:	89 2f       	mov	r24, r25
    3180:	99 27       	eor	r25, r25
    3182:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    3184:	e9 e2       	ldi	r30, 0x29	; 41
    3186:	f0 e0       	ldi	r31, 0x00	; 0
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	80 83       	st	Z, r24
}
    318c:	0f 90       	pop	r0
    318e:	0f 90       	pop	r0
    3190:	0f 90       	pop	r0
    3192:	0f 90       	pop	r0
    3194:	cf 91       	pop	r28
    3196:	df 91       	pop	r29
    3198:	08 95       	ret

0000319a <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    319a:	df 93       	push	r29
    319c:	cf 93       	push	r28
    319e:	0f 92       	push	r0
    31a0:	cd b7       	in	r28, 0x3d	; 61
    31a2:	de b7       	in	r29, 0x3e	; 62
    31a4:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31a6:	eb e2       	ldi	r30, 0x2B	; 43
    31a8:	f0 e0       	ldi	r31, 0x00	; 0
    31aa:	80 81       	ld	r24, Z
    31ac:	88 2f       	mov	r24, r24
    31ae:	90 e0       	ldi	r25, 0x00	; 0
    31b0:	80 72       	andi	r24, 0x20	; 32
    31b2:	90 70       	andi	r25, 0x00	; 0
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	b9 f3       	breq	.-18     	; 0x31a6 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    31b8:	ec e2       	ldi	r30, 0x2C	; 44
    31ba:	f0 e0       	ldi	r31, 0x00	; 0
    31bc:	89 81       	ldd	r24, Y+1	; 0x01
    31be:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	cd b7       	in	r28, 0x3d	; 61
    31ce:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    31d0:	eb e2       	ldi	r30, 0x2B	; 43
    31d2:	f0 e0       	ldi	r31, 0x00	; 0
    31d4:	80 81       	ld	r24, Z
    31d6:	88 23       	and	r24, r24
    31d8:	dc f7       	brge	.-10     	; 0x31d0 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    31da:	ec e2       	ldi	r30, 0x2C	; 44
    31dc:	f0 e0       	ldi	r31, 0x00	; 0
    31de:	80 81       	ld	r24, Z
}
    31e0:	cf 91       	pop	r28
    31e2:	df 91       	pop	r29
    31e4:	08 95       	ret

000031e6 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    31e6:	df 93       	push	r29
    31e8:	cf 93       	push	r28
    31ea:	00 d0       	rcall	.+0      	; 0x31ec <UART_sendString+0x6>
    31ec:	0f 92       	push	r0
    31ee:	cd b7       	in	r28, 0x3d	; 61
    31f0:	de b7       	in	r29, 0x3e	; 62
    31f2:	9b 83       	std	Y+3, r25	; 0x03
    31f4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    31f6:	19 82       	std	Y+1, r1	; 0x01
    31f8:	0e c0       	rjmp	.+28     	; 0x3216 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    31fa:	89 81       	ldd	r24, Y+1	; 0x01
    31fc:	28 2f       	mov	r18, r24
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	8a 81       	ldd	r24, Y+2	; 0x02
    3202:	9b 81       	ldd	r25, Y+3	; 0x03
    3204:	fc 01       	movw	r30, r24
    3206:	e2 0f       	add	r30, r18
    3208:	f3 1f       	adc	r31, r19
    320a:	80 81       	ld	r24, Z
    320c:	0e 94 cd 18 	call	0x319a	; 0x319a <UART_sendByte>
		i++;
    3210:	89 81       	ldd	r24, Y+1	; 0x01
    3212:	8f 5f       	subi	r24, 0xFF	; 255
    3214:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3216:	89 81       	ldd	r24, Y+1	; 0x01
    3218:	28 2f       	mov	r18, r24
    321a:	30 e0       	ldi	r19, 0x00	; 0
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	9b 81       	ldd	r25, Y+3	; 0x03
    3220:	fc 01       	movw	r30, r24
    3222:	e2 0f       	add	r30, r18
    3224:	f3 1f       	adc	r31, r19
    3226:	80 81       	ld	r24, Z
    3228:	88 23       	and	r24, r24
    322a:	39 f7       	brne	.-50     	; 0x31fa <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    322c:	0f 90       	pop	r0
    322e:	0f 90       	pop	r0
    3230:	0f 90       	pop	r0
    3232:	cf 91       	pop	r28
    3234:	df 91       	pop	r29
    3236:	08 95       	ret

00003238 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3238:	0f 93       	push	r16
    323a:	1f 93       	push	r17
    323c:	df 93       	push	r29
    323e:	cf 93       	push	r28
    3240:	00 d0       	rcall	.+0      	; 0x3242 <UART_receiveString+0xa>
    3242:	0f 92       	push	r0
    3244:	cd b7       	in	r28, 0x3d	; 61
    3246:	de b7       	in	r29, 0x3e	; 62
    3248:	9b 83       	std	Y+3, r25	; 0x03
    324a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    324c:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    324e:	89 81       	ldd	r24, Y+1	; 0x01
    3250:	28 2f       	mov	r18, r24
    3252:	30 e0       	ldi	r19, 0x00	; 0
    3254:	8a 81       	ldd	r24, Y+2	; 0x02
    3256:	9b 81       	ldd	r25, Y+3	; 0x03
    3258:	8c 01       	movw	r16, r24
    325a:	02 0f       	add	r16, r18
    325c:	13 1f       	adc	r17, r19
    325e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    3262:	f8 01       	movw	r30, r16
    3264:	80 83       	st	Z, r24
    3266:	0f c0       	rjmp	.+30     	; 0x3286 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    3268:	89 81       	ldd	r24, Y+1	; 0x01
    326a:	8f 5f       	subi	r24, 0xFF	; 255
    326c:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	28 2f       	mov	r18, r24
    3272:	30 e0       	ldi	r19, 0x00	; 0
    3274:	8a 81       	ldd	r24, Y+2	; 0x02
    3276:	9b 81       	ldd	r25, Y+3	; 0x03
    3278:	8c 01       	movw	r16, r24
    327a:	02 0f       	add	r16, r18
    327c:	13 1f       	adc	r17, r19
    327e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <UART_recieveByte>
    3282:	f8 01       	movw	r30, r16
    3284:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    3286:	89 81       	ldd	r24, Y+1	; 0x01
    3288:	28 2f       	mov	r18, r24
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	8a 81       	ldd	r24, Y+2	; 0x02
    328e:	9b 81       	ldd	r25, Y+3	; 0x03
    3290:	fc 01       	movw	r30, r24
    3292:	e2 0f       	add	r30, r18
    3294:	f3 1f       	adc	r31, r19
    3296:	80 81       	ld	r24, Z
    3298:	83 32       	cpi	r24, 0x23	; 35
    329a:	31 f7       	brne	.-52     	; 0x3268 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    329c:	89 81       	ldd	r24, Y+1	; 0x01
    329e:	28 2f       	mov	r18, r24
    32a0:	30 e0       	ldi	r19, 0x00	; 0
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	9b 81       	ldd	r25, Y+3	; 0x03
    32a6:	fc 01       	movw	r30, r24
    32a8:	e2 0f       	add	r30, r18
    32aa:	f3 1f       	adc	r31, r19
    32ac:	10 82       	st	Z, r1
}
    32ae:	0f 90       	pop	r0
    32b0:	0f 90       	pop	r0
    32b2:	0f 90       	pop	r0
    32b4:	cf 91       	pop	r28
    32b6:	df 91       	pop	r29
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	08 95       	ret

000032be <__udivmodsi4>:
    32be:	a1 e2       	ldi	r26, 0x21	; 33
    32c0:	1a 2e       	mov	r1, r26
    32c2:	aa 1b       	sub	r26, r26
    32c4:	bb 1b       	sub	r27, r27
    32c6:	fd 01       	movw	r30, r26
    32c8:	0d c0       	rjmp	.+26     	; 0x32e4 <__udivmodsi4_ep>

000032ca <__udivmodsi4_loop>:
    32ca:	aa 1f       	adc	r26, r26
    32cc:	bb 1f       	adc	r27, r27
    32ce:	ee 1f       	adc	r30, r30
    32d0:	ff 1f       	adc	r31, r31
    32d2:	a2 17       	cp	r26, r18
    32d4:	b3 07       	cpc	r27, r19
    32d6:	e4 07       	cpc	r30, r20
    32d8:	f5 07       	cpc	r31, r21
    32da:	20 f0       	brcs	.+8      	; 0x32e4 <__udivmodsi4_ep>
    32dc:	a2 1b       	sub	r26, r18
    32de:	b3 0b       	sbc	r27, r19
    32e0:	e4 0b       	sbc	r30, r20
    32e2:	f5 0b       	sbc	r31, r21

000032e4 <__udivmodsi4_ep>:
    32e4:	66 1f       	adc	r22, r22
    32e6:	77 1f       	adc	r23, r23
    32e8:	88 1f       	adc	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	1a 94       	dec	r1
    32ee:	69 f7       	brne	.-38     	; 0x32ca <__udivmodsi4_loop>
    32f0:	60 95       	com	r22
    32f2:	70 95       	com	r23
    32f4:	80 95       	com	r24
    32f6:	90 95       	com	r25
    32f8:	9b 01       	movw	r18, r22
    32fa:	ac 01       	movw	r20, r24
    32fc:	bd 01       	movw	r22, r26
    32fe:	cf 01       	movw	r24, r30
    3300:	08 95       	ret

00003302 <__prologue_saves__>:
    3302:	2f 92       	push	r2
    3304:	3f 92       	push	r3
    3306:	4f 92       	push	r4
    3308:	5f 92       	push	r5
    330a:	6f 92       	push	r6
    330c:	7f 92       	push	r7
    330e:	8f 92       	push	r8
    3310:	9f 92       	push	r9
    3312:	af 92       	push	r10
    3314:	bf 92       	push	r11
    3316:	cf 92       	push	r12
    3318:	df 92       	push	r13
    331a:	ef 92       	push	r14
    331c:	ff 92       	push	r15
    331e:	0f 93       	push	r16
    3320:	1f 93       	push	r17
    3322:	cf 93       	push	r28
    3324:	df 93       	push	r29
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	ca 1b       	sub	r28, r26
    332c:	db 0b       	sbc	r29, r27
    332e:	0f b6       	in	r0, 0x3f	; 63
    3330:	f8 94       	cli
    3332:	de bf       	out	0x3e, r29	; 62
    3334:	0f be       	out	0x3f, r0	; 63
    3336:	cd bf       	out	0x3d, r28	; 61
    3338:	09 94       	ijmp

0000333a <__epilogue_restores__>:
    333a:	2a 88       	ldd	r2, Y+18	; 0x12
    333c:	39 88       	ldd	r3, Y+17	; 0x11
    333e:	48 88       	ldd	r4, Y+16	; 0x10
    3340:	5f 84       	ldd	r5, Y+15	; 0x0f
    3342:	6e 84       	ldd	r6, Y+14	; 0x0e
    3344:	7d 84       	ldd	r7, Y+13	; 0x0d
    3346:	8c 84       	ldd	r8, Y+12	; 0x0c
    3348:	9b 84       	ldd	r9, Y+11	; 0x0b
    334a:	aa 84       	ldd	r10, Y+10	; 0x0a
    334c:	b9 84       	ldd	r11, Y+9	; 0x09
    334e:	c8 84       	ldd	r12, Y+8	; 0x08
    3350:	df 80       	ldd	r13, Y+7	; 0x07
    3352:	ee 80       	ldd	r14, Y+6	; 0x06
    3354:	fd 80       	ldd	r15, Y+5	; 0x05
    3356:	0c 81       	ldd	r16, Y+4	; 0x04
    3358:	1b 81       	ldd	r17, Y+3	; 0x03
    335a:	aa 81       	ldd	r26, Y+2	; 0x02
    335c:	b9 81       	ldd	r27, Y+1	; 0x01
    335e:	ce 0f       	add	r28, r30
    3360:	d1 1d       	adc	r29, r1
    3362:	0f b6       	in	r0, 0x3f	; 63
    3364:	f8 94       	cli
    3366:	de bf       	out	0x3e, r29	; 62
    3368:	0f be       	out	0x3f, r0	; 63
    336a:	cd bf       	out	0x3d, r28	; 61
    336c:	ed 01       	movw	r28, r26
    336e:	08 95       	ret

00003370 <itoa>:
    3370:	fb 01       	movw	r30, r22
    3372:	9f 01       	movw	r18, r30
    3374:	e8 94       	clt
    3376:	42 30       	cpi	r20, 0x02	; 2
    3378:	c4 f0       	brlt	.+48     	; 0x33aa <itoa+0x3a>
    337a:	45 32       	cpi	r20, 0x25	; 37
    337c:	b4 f4       	brge	.+44     	; 0x33aa <itoa+0x3a>
    337e:	4a 30       	cpi	r20, 0x0A	; 10
    3380:	29 f4       	brne	.+10     	; 0x338c <itoa+0x1c>
    3382:	97 fb       	bst	r25, 7
    3384:	1e f4       	brtc	.+6      	; 0x338c <itoa+0x1c>
    3386:	90 95       	com	r25
    3388:	81 95       	neg	r24
    338a:	9f 4f       	sbci	r25, 0xFF	; 255
    338c:	64 2f       	mov	r22, r20
    338e:	77 27       	eor	r23, r23
    3390:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
    3394:	80 5d       	subi	r24, 0xD0	; 208
    3396:	8a 33       	cpi	r24, 0x3A	; 58
    3398:	0c f0       	brlt	.+2      	; 0x339c <itoa+0x2c>
    339a:	89 5d       	subi	r24, 0xD9	; 217
    339c:	81 93       	st	Z+, r24
    339e:	cb 01       	movw	r24, r22
    33a0:	00 97       	sbiw	r24, 0x00	; 0
    33a2:	a1 f7       	brne	.-24     	; 0x338c <itoa+0x1c>
    33a4:	16 f4       	brtc	.+4      	; 0x33aa <itoa+0x3a>
    33a6:	5d e2       	ldi	r21, 0x2D	; 45
    33a8:	51 93       	st	Z+, r21
    33aa:	10 82       	st	Z, r1
    33ac:	c9 01       	movw	r24, r18
    33ae:	0c 94 d9 19 	jmp	0x33b2	; 0x33b2 <strrev>

000033b2 <strrev>:
    33b2:	dc 01       	movw	r26, r24
    33b4:	fc 01       	movw	r30, r24
    33b6:	67 2f       	mov	r22, r23
    33b8:	71 91       	ld	r23, Z+
    33ba:	77 23       	and	r23, r23
    33bc:	e1 f7       	brne	.-8      	; 0x33b6 <strrev+0x4>
    33be:	32 97       	sbiw	r30, 0x02	; 2
    33c0:	04 c0       	rjmp	.+8      	; 0x33ca <strrev+0x18>
    33c2:	7c 91       	ld	r23, X
    33c4:	6d 93       	st	X+, r22
    33c6:	70 83       	st	Z, r23
    33c8:	62 91       	ld	r22, -Z
    33ca:	ae 17       	cp	r26, r30
    33cc:	bf 07       	cpc	r27, r31
    33ce:	c8 f3       	brcs	.-14     	; 0x33c2 <strrev+0x10>
    33d0:	08 95       	ret

000033d2 <__udivmodhi4>:
    33d2:	aa 1b       	sub	r26, r26
    33d4:	bb 1b       	sub	r27, r27
    33d6:	51 e1       	ldi	r21, 0x11	; 17
    33d8:	07 c0       	rjmp	.+14     	; 0x33e8 <__udivmodhi4_ep>

000033da <__udivmodhi4_loop>:
    33da:	aa 1f       	adc	r26, r26
    33dc:	bb 1f       	adc	r27, r27
    33de:	a6 17       	cp	r26, r22
    33e0:	b7 07       	cpc	r27, r23
    33e2:	10 f0       	brcs	.+4      	; 0x33e8 <__udivmodhi4_ep>
    33e4:	a6 1b       	sub	r26, r22
    33e6:	b7 0b       	sbc	r27, r23

000033e8 <__udivmodhi4_ep>:
    33e8:	88 1f       	adc	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	5a 95       	dec	r21
    33ee:	a9 f7       	brne	.-22     	; 0x33da <__udivmodhi4_loop>
    33f0:	80 95       	com	r24
    33f2:	90 95       	com	r25
    33f4:	bc 01       	movw	r22, r24
    33f6:	cd 01       	movw	r24, r26
    33f8:	08 95       	ret

000033fa <_exit>:
    33fa:	f8 94       	cli

000033fc <__stop_program>:
    33fc:	ff cf       	rjmp	.-2      	; 0x33fc <__stop_program>
