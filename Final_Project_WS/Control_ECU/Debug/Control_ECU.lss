
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000343a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000136  00800060  0000343a  000034ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800196  00800196  00003604  2**0
                  ALLOC
  3 .stab         0000351c  00000000  00000000  00003604  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013bd  00000000  00000000  00006b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000180  00000000  00000000  00007edd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001d1  00000000  00000000  0000805d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002010  00000000  00000000  0000822e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001161  00000000  00000000  0000a23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001003  00000000  00000000  0000b39f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001a0  00000000  00000000  0000c3a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002be  00000000  00000000  0000c544  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000090e  00000000  00000000  0000c802  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d110  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 ee 16 	jmp	0x2ddc	; 0x2ddc <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 21 17 	jmp	0x2e42	; 0x2e42 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e3       	ldi	r30, 0x3A	; 58
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 39       	cpi	r26, 0x96	; 150
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e9       	ldi	r26, 0x96	; 150
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 3a       	cpi	r26, 0xA6	; 166
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 50 06 	call	0xca0	; 0xca0 <main>
      8a:	0c 94 1b 1a 	jmp	0x3436	; 0x3436 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 07 04 	call	0x80e	; 0x80e <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e8       	ldi	r26, 0x80	; 128
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 19 	jmp	0x333e	; 0x333e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e8       	ldi	r24, 0x80	; 128
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 19 	jmp	0x3376	; 0x3376 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 ab 19 	jmp	0x3356	; 0x3356 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 f7 05 	call	0xbee	; 0xbee <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 c7 19 	jmp	0x338e	; 0x338e <__epilogue_restores__+0x18>

00000752 <__floatsisf>:
     752:	a8 e0       	ldi	r26, 0x08	; 8
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 a8 19 	jmp	0x3350	; 0x3350 <__prologue_saves__+0x12>
     75e:	9b 01       	movw	r18, r22
     760:	ac 01       	movw	r20, r24
     762:	83 e0       	ldi	r24, 0x03	; 3
     764:	89 83       	std	Y+1, r24	; 0x01
     766:	da 01       	movw	r26, r20
     768:	c9 01       	movw	r24, r18
     76a:	88 27       	eor	r24, r24
     76c:	b7 fd       	sbrc	r27, 7
     76e:	83 95       	inc	r24
     770:	99 27       	eor	r25, r25
     772:	aa 27       	eor	r26, r26
     774:	bb 27       	eor	r27, r27
     776:	b8 2e       	mov	r11, r24
     778:	21 15       	cp	r18, r1
     77a:	31 05       	cpc	r19, r1
     77c:	41 05       	cpc	r20, r1
     77e:	51 05       	cpc	r21, r1
     780:	19 f4       	brne	.+6      	; 0x788 <__floatsisf+0x36>
     782:	82 e0       	ldi	r24, 0x02	; 2
     784:	89 83       	std	Y+1, r24	; 0x01
     786:	3a c0       	rjmp	.+116    	; 0x7fc <__floatsisf+0xaa>
     788:	88 23       	and	r24, r24
     78a:	a9 f0       	breq	.+42     	; 0x7b6 <__floatsisf+0x64>
     78c:	20 30       	cpi	r18, 0x00	; 0
     78e:	80 e0       	ldi	r24, 0x00	; 0
     790:	38 07       	cpc	r19, r24
     792:	80 e0       	ldi	r24, 0x00	; 0
     794:	48 07       	cpc	r20, r24
     796:	80 e8       	ldi	r24, 0x80	; 128
     798:	58 07       	cpc	r21, r24
     79a:	29 f4       	brne	.+10     	; 0x7a6 <__floatsisf+0x54>
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	80 e0       	ldi	r24, 0x00	; 0
     7a2:	9f ec       	ldi	r25, 0xCF	; 207
     7a4:	30 c0       	rjmp	.+96     	; 0x806 <__floatsisf+0xb4>
     7a6:	ee 24       	eor	r14, r14
     7a8:	ff 24       	eor	r15, r15
     7aa:	87 01       	movw	r16, r14
     7ac:	e2 1a       	sub	r14, r18
     7ae:	f3 0a       	sbc	r15, r19
     7b0:	04 0b       	sbc	r16, r20
     7b2:	15 0b       	sbc	r17, r21
     7b4:	02 c0       	rjmp	.+4      	; 0x7ba <__floatsisf+0x68>
     7b6:	79 01       	movw	r14, r18
     7b8:	8a 01       	movw	r16, r20
     7ba:	8e e1       	ldi	r24, 0x1E	; 30
     7bc:	c8 2e       	mov	r12, r24
     7be:	d1 2c       	mov	r13, r1
     7c0:	dc 82       	std	Y+4, r13	; 0x04
     7c2:	cb 82       	std	Y+3, r12	; 0x03
     7c4:	ed 82       	std	Y+5, r14	; 0x05
     7c6:	fe 82       	std	Y+6, r15	; 0x06
     7c8:	0f 83       	std	Y+7, r16	; 0x07
     7ca:	18 87       	std	Y+8, r17	; 0x08
     7cc:	c8 01       	movw	r24, r16
     7ce:	b7 01       	movw	r22, r14
     7d0:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <__clzsi2>
     7d4:	01 97       	sbiw	r24, 0x01	; 1
     7d6:	18 16       	cp	r1, r24
     7d8:	19 06       	cpc	r1, r25
     7da:	84 f4       	brge	.+32     	; 0x7fc <__floatsisf+0xaa>
     7dc:	08 2e       	mov	r0, r24
     7de:	04 c0       	rjmp	.+8      	; 0x7e8 <__floatsisf+0x96>
     7e0:	ee 0c       	add	r14, r14
     7e2:	ff 1c       	adc	r15, r15
     7e4:	00 1f       	adc	r16, r16
     7e6:	11 1f       	adc	r17, r17
     7e8:	0a 94       	dec	r0
     7ea:	d2 f7       	brpl	.-12     	; 0x7e0 <__floatsisf+0x8e>
     7ec:	ed 82       	std	Y+5, r14	; 0x05
     7ee:	fe 82       	std	Y+6, r15	; 0x06
     7f0:	0f 83       	std	Y+7, r16	; 0x07
     7f2:	18 87       	std	Y+8, r17	; 0x08
     7f4:	c8 1a       	sub	r12, r24
     7f6:	d9 0a       	sbc	r13, r25
     7f8:	dc 82       	std	Y+4, r13	; 0x04
     7fa:	cb 82       	std	Y+3, r12	; 0x03
     7fc:	ba 82       	std	Y+2, r11	; 0x02
     7fe:	ce 01       	movw	r24, r28
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	0e 94 aa 04 	call	0x954	; 0x954 <__pack_f>
     806:	28 96       	adiw	r28, 0x08	; 8
     808:	e9 e0       	ldi	r30, 0x09	; 9
     80a:	0c 94 c4 19 	jmp	0x3388	; 0x3388 <__epilogue_restores__+0x12>

0000080e <__fixsfsi>:
     80e:	ac e0       	ldi	r26, 0x0C	; 12
     810:	b0 e0       	ldi	r27, 0x00	; 0
     812:	ed e0       	ldi	r30, 0x0D	; 13
     814:	f4 e0       	ldi	r31, 0x04	; 4
     816:	0c 94 af 19 	jmp	0x335e	; 0x335e <__prologue_saves__+0x20>
     81a:	69 83       	std	Y+1, r22	; 0x01
     81c:	7a 83       	std	Y+2, r23	; 0x02
     81e:	8b 83       	std	Y+3, r24	; 0x03
     820:	9c 83       	std	Y+4, r25	; 0x04
     822:	ce 01       	movw	r24, r28
     824:	01 96       	adiw	r24, 0x01	; 1
     826:	be 01       	movw	r22, r28
     828:	6b 5f       	subi	r22, 0xFB	; 251
     82a:	7f 4f       	sbci	r23, 0xFF	; 255
     82c:	0e 94 7f 05 	call	0xafe	; 0xafe <__unpack_f>
     830:	8d 81       	ldd	r24, Y+5	; 0x05
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	61 f1       	breq	.+88     	; 0x88e <__stack+0x2f>
     836:	82 30       	cpi	r24, 0x02	; 2
     838:	50 f1       	brcs	.+84     	; 0x88e <__stack+0x2f>
     83a:	84 30       	cpi	r24, 0x04	; 4
     83c:	21 f4       	brne	.+8      	; 0x846 <__fixsfsi+0x38>
     83e:	8e 81       	ldd	r24, Y+6	; 0x06
     840:	88 23       	and	r24, r24
     842:	51 f1       	breq	.+84     	; 0x898 <__stack+0x39>
     844:	2e c0       	rjmp	.+92     	; 0x8a2 <__stack+0x43>
     846:	2f 81       	ldd	r18, Y+7	; 0x07
     848:	38 85       	ldd	r19, Y+8	; 0x08
     84a:	37 fd       	sbrc	r19, 7
     84c:	20 c0       	rjmp	.+64     	; 0x88e <__stack+0x2f>
     84e:	6e 81       	ldd	r22, Y+6	; 0x06
     850:	2f 31       	cpi	r18, 0x1F	; 31
     852:	31 05       	cpc	r19, r1
     854:	1c f0       	brlt	.+6      	; 0x85c <__fixsfsi+0x4e>
     856:	66 23       	and	r22, r22
     858:	f9 f0       	breq	.+62     	; 0x898 <__stack+0x39>
     85a:	23 c0       	rjmp	.+70     	; 0x8a2 <__stack+0x43>
     85c:	8e e1       	ldi	r24, 0x1E	; 30
     85e:	90 e0       	ldi	r25, 0x00	; 0
     860:	82 1b       	sub	r24, r18
     862:	93 0b       	sbc	r25, r19
     864:	29 85       	ldd	r18, Y+9	; 0x09
     866:	3a 85       	ldd	r19, Y+10	; 0x0a
     868:	4b 85       	ldd	r20, Y+11	; 0x0b
     86a:	5c 85       	ldd	r21, Y+12	; 0x0c
     86c:	04 c0       	rjmp	.+8      	; 0x876 <__stack+0x17>
     86e:	56 95       	lsr	r21
     870:	47 95       	ror	r20
     872:	37 95       	ror	r19
     874:	27 95       	ror	r18
     876:	8a 95       	dec	r24
     878:	d2 f7       	brpl	.-12     	; 0x86e <__stack+0xf>
     87a:	66 23       	and	r22, r22
     87c:	b1 f0       	breq	.+44     	; 0x8aa <__stack+0x4b>
     87e:	50 95       	com	r21
     880:	40 95       	com	r20
     882:	30 95       	com	r19
     884:	21 95       	neg	r18
     886:	3f 4f       	sbci	r19, 0xFF	; 255
     888:	4f 4f       	sbci	r20, 0xFF	; 255
     88a:	5f 4f       	sbci	r21, 0xFF	; 255
     88c:	0e c0       	rjmp	.+28     	; 0x8aa <__stack+0x4b>
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	30 e0       	ldi	r19, 0x00	; 0
     892:	40 e0       	ldi	r20, 0x00	; 0
     894:	50 e0       	ldi	r21, 0x00	; 0
     896:	09 c0       	rjmp	.+18     	; 0x8aa <__stack+0x4b>
     898:	2f ef       	ldi	r18, 0xFF	; 255
     89a:	3f ef       	ldi	r19, 0xFF	; 255
     89c:	4f ef       	ldi	r20, 0xFF	; 255
     89e:	5f e7       	ldi	r21, 0x7F	; 127
     8a0:	04 c0       	rjmp	.+8      	; 0x8aa <__stack+0x4b>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	30 e0       	ldi	r19, 0x00	; 0
     8a6:	40 e0       	ldi	r20, 0x00	; 0
     8a8:	50 e8       	ldi	r21, 0x80	; 128
     8aa:	b9 01       	movw	r22, r18
     8ac:	ca 01       	movw	r24, r20
     8ae:	2c 96       	adiw	r28, 0x0c	; 12
     8b0:	e2 e0       	ldi	r30, 0x02	; 2
     8b2:	0c 94 cb 19 	jmp	0x3396	; 0x3396 <__epilogue_restores__+0x20>

000008b6 <__clzsi2>:
     8b6:	ef 92       	push	r14
     8b8:	ff 92       	push	r15
     8ba:	0f 93       	push	r16
     8bc:	1f 93       	push	r17
     8be:	7b 01       	movw	r14, r22
     8c0:	8c 01       	movw	r16, r24
     8c2:	80 e0       	ldi	r24, 0x00	; 0
     8c4:	e8 16       	cp	r14, r24
     8c6:	80 e0       	ldi	r24, 0x00	; 0
     8c8:	f8 06       	cpc	r15, r24
     8ca:	81 e0       	ldi	r24, 0x01	; 1
     8cc:	08 07       	cpc	r16, r24
     8ce:	80 e0       	ldi	r24, 0x00	; 0
     8d0:	18 07       	cpc	r17, r24
     8d2:	88 f4       	brcc	.+34     	; 0x8f6 <__clzsi2+0x40>
     8d4:	8f ef       	ldi	r24, 0xFF	; 255
     8d6:	e8 16       	cp	r14, r24
     8d8:	f1 04       	cpc	r15, r1
     8da:	01 05       	cpc	r16, r1
     8dc:	11 05       	cpc	r17, r1
     8de:	31 f0       	breq	.+12     	; 0x8ec <__clzsi2+0x36>
     8e0:	28 f0       	brcs	.+10     	; 0x8ec <__clzsi2+0x36>
     8e2:	88 e0       	ldi	r24, 0x08	; 8
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	b0 e0       	ldi	r27, 0x00	; 0
     8ea:	17 c0       	rjmp	.+46     	; 0x91a <__clzsi2+0x64>
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	a0 e0       	ldi	r26, 0x00	; 0
     8f2:	b0 e0       	ldi	r27, 0x00	; 0
     8f4:	12 c0       	rjmp	.+36     	; 0x91a <__clzsi2+0x64>
     8f6:	80 e0       	ldi	r24, 0x00	; 0
     8f8:	e8 16       	cp	r14, r24
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	f8 06       	cpc	r15, r24
     8fe:	80 e0       	ldi	r24, 0x00	; 0
     900:	08 07       	cpc	r16, r24
     902:	81 e0       	ldi	r24, 0x01	; 1
     904:	18 07       	cpc	r17, r24
     906:	28 f0       	brcs	.+10     	; 0x912 <__clzsi2+0x5c>
     908:	88 e1       	ldi	r24, 0x18	; 24
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	a0 e0       	ldi	r26, 0x00	; 0
     90e:	b0 e0       	ldi	r27, 0x00	; 0
     910:	04 c0       	rjmp	.+8      	; 0x91a <__clzsi2+0x64>
     912:	80 e1       	ldi	r24, 0x10	; 16
     914:	90 e0       	ldi	r25, 0x00	; 0
     916:	a0 e0       	ldi	r26, 0x00	; 0
     918:	b0 e0       	ldi	r27, 0x00	; 0
     91a:	20 e2       	ldi	r18, 0x20	; 32
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	28 1b       	sub	r18, r24
     924:	39 0b       	sbc	r19, r25
     926:	4a 0b       	sbc	r20, r26
     928:	5b 0b       	sbc	r21, r27
     92a:	04 c0       	rjmp	.+8      	; 0x934 <__clzsi2+0x7e>
     92c:	16 95       	lsr	r17
     92e:	07 95       	ror	r16
     930:	f7 94       	ror	r15
     932:	e7 94       	ror	r14
     934:	8a 95       	dec	r24
     936:	d2 f7       	brpl	.-12     	; 0x92c <__clzsi2+0x76>
     938:	f7 01       	movw	r30, r14
     93a:	e8 57       	subi	r30, 0x78	; 120
     93c:	ff 4f       	sbci	r31, 0xFF	; 255
     93e:	80 81       	ld	r24, Z
     940:	28 1b       	sub	r18, r24
     942:	31 09       	sbc	r19, r1
     944:	41 09       	sbc	r20, r1
     946:	51 09       	sbc	r21, r1
     948:	c9 01       	movw	r24, r18
     94a:	1f 91       	pop	r17
     94c:	0f 91       	pop	r16
     94e:	ff 90       	pop	r15
     950:	ef 90       	pop	r14
     952:	08 95       	ret

00000954 <__pack_f>:
     954:	df 92       	push	r13
     956:	ef 92       	push	r14
     958:	ff 92       	push	r15
     95a:	0f 93       	push	r16
     95c:	1f 93       	push	r17
     95e:	fc 01       	movw	r30, r24
     960:	e4 80       	ldd	r14, Z+4	; 0x04
     962:	f5 80       	ldd	r15, Z+5	; 0x05
     964:	06 81       	ldd	r16, Z+6	; 0x06
     966:	17 81       	ldd	r17, Z+7	; 0x07
     968:	d1 80       	ldd	r13, Z+1	; 0x01
     96a:	80 81       	ld	r24, Z
     96c:	82 30       	cpi	r24, 0x02	; 2
     96e:	48 f4       	brcc	.+18     	; 0x982 <__pack_f+0x2e>
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	a0 e1       	ldi	r26, 0x10	; 16
     976:	b0 e0       	ldi	r27, 0x00	; 0
     978:	e8 2a       	or	r14, r24
     97a:	f9 2a       	or	r15, r25
     97c:	0a 2b       	or	r16, r26
     97e:	1b 2b       	or	r17, r27
     980:	a5 c0       	rjmp	.+330    	; 0xacc <__pack_f+0x178>
     982:	84 30       	cpi	r24, 0x04	; 4
     984:	09 f4       	brne	.+2      	; 0x988 <__pack_f+0x34>
     986:	9f c0       	rjmp	.+318    	; 0xac6 <__pack_f+0x172>
     988:	82 30       	cpi	r24, 0x02	; 2
     98a:	21 f4       	brne	.+8      	; 0x994 <__pack_f+0x40>
     98c:	ee 24       	eor	r14, r14
     98e:	ff 24       	eor	r15, r15
     990:	87 01       	movw	r16, r14
     992:	05 c0       	rjmp	.+10     	; 0x99e <__pack_f+0x4a>
     994:	e1 14       	cp	r14, r1
     996:	f1 04       	cpc	r15, r1
     998:	01 05       	cpc	r16, r1
     99a:	11 05       	cpc	r17, r1
     99c:	19 f4       	brne	.+6      	; 0x9a4 <__pack_f+0x50>
     99e:	e0 e0       	ldi	r30, 0x00	; 0
     9a0:	f0 e0       	ldi	r31, 0x00	; 0
     9a2:	96 c0       	rjmp	.+300    	; 0xad0 <__pack_f+0x17c>
     9a4:	62 81       	ldd	r22, Z+2	; 0x02
     9a6:	73 81       	ldd	r23, Z+3	; 0x03
     9a8:	9f ef       	ldi	r25, 0xFF	; 255
     9aa:	62 38       	cpi	r22, 0x82	; 130
     9ac:	79 07       	cpc	r23, r25
     9ae:	0c f0       	brlt	.+2      	; 0x9b2 <__pack_f+0x5e>
     9b0:	5b c0       	rjmp	.+182    	; 0xa68 <__pack_f+0x114>
     9b2:	22 e8       	ldi	r18, 0x82	; 130
     9b4:	3f ef       	ldi	r19, 0xFF	; 255
     9b6:	26 1b       	sub	r18, r22
     9b8:	37 0b       	sbc	r19, r23
     9ba:	2a 31       	cpi	r18, 0x1A	; 26
     9bc:	31 05       	cpc	r19, r1
     9be:	2c f0       	brlt	.+10     	; 0x9ca <__pack_f+0x76>
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	40 e0       	ldi	r20, 0x00	; 0
     9c6:	50 e0       	ldi	r21, 0x00	; 0
     9c8:	2a c0       	rjmp	.+84     	; 0xa1e <__pack_f+0xca>
     9ca:	b8 01       	movw	r22, r16
     9cc:	a7 01       	movw	r20, r14
     9ce:	02 2e       	mov	r0, r18
     9d0:	04 c0       	rjmp	.+8      	; 0x9da <__pack_f+0x86>
     9d2:	76 95       	lsr	r23
     9d4:	67 95       	ror	r22
     9d6:	57 95       	ror	r21
     9d8:	47 95       	ror	r20
     9da:	0a 94       	dec	r0
     9dc:	d2 f7       	brpl	.-12     	; 0x9d2 <__pack_f+0x7e>
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	a0 e0       	ldi	r26, 0x00	; 0
     9e4:	b0 e0       	ldi	r27, 0x00	; 0
     9e6:	04 c0       	rjmp	.+8      	; 0x9f0 <__pack_f+0x9c>
     9e8:	88 0f       	add	r24, r24
     9ea:	99 1f       	adc	r25, r25
     9ec:	aa 1f       	adc	r26, r26
     9ee:	bb 1f       	adc	r27, r27
     9f0:	2a 95       	dec	r18
     9f2:	d2 f7       	brpl	.-12     	; 0x9e8 <__pack_f+0x94>
     9f4:	01 97       	sbiw	r24, 0x01	; 1
     9f6:	a1 09       	sbc	r26, r1
     9f8:	b1 09       	sbc	r27, r1
     9fa:	8e 21       	and	r24, r14
     9fc:	9f 21       	and	r25, r15
     9fe:	a0 23       	and	r26, r16
     a00:	b1 23       	and	r27, r17
     a02:	00 97       	sbiw	r24, 0x00	; 0
     a04:	a1 05       	cpc	r26, r1
     a06:	b1 05       	cpc	r27, r1
     a08:	21 f0       	breq	.+8      	; 0xa12 <__pack_f+0xbe>
     a0a:	81 e0       	ldi	r24, 0x01	; 1
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	a0 e0       	ldi	r26, 0x00	; 0
     a10:	b0 e0       	ldi	r27, 0x00	; 0
     a12:	9a 01       	movw	r18, r20
     a14:	ab 01       	movw	r20, r22
     a16:	28 2b       	or	r18, r24
     a18:	39 2b       	or	r19, r25
     a1a:	4a 2b       	or	r20, r26
     a1c:	5b 2b       	or	r21, r27
     a1e:	da 01       	movw	r26, r20
     a20:	c9 01       	movw	r24, r18
     a22:	8f 77       	andi	r24, 0x7F	; 127
     a24:	90 70       	andi	r25, 0x00	; 0
     a26:	a0 70       	andi	r26, 0x00	; 0
     a28:	b0 70       	andi	r27, 0x00	; 0
     a2a:	80 34       	cpi	r24, 0x40	; 64
     a2c:	91 05       	cpc	r25, r1
     a2e:	a1 05       	cpc	r26, r1
     a30:	b1 05       	cpc	r27, r1
     a32:	39 f4       	brne	.+14     	; 0xa42 <__pack_f+0xee>
     a34:	27 ff       	sbrs	r18, 7
     a36:	09 c0       	rjmp	.+18     	; 0xa4a <__pack_f+0xf6>
     a38:	20 5c       	subi	r18, 0xC0	; 192
     a3a:	3f 4f       	sbci	r19, 0xFF	; 255
     a3c:	4f 4f       	sbci	r20, 0xFF	; 255
     a3e:	5f 4f       	sbci	r21, 0xFF	; 255
     a40:	04 c0       	rjmp	.+8      	; 0xa4a <__pack_f+0xf6>
     a42:	21 5c       	subi	r18, 0xC1	; 193
     a44:	3f 4f       	sbci	r19, 0xFF	; 255
     a46:	4f 4f       	sbci	r20, 0xFF	; 255
     a48:	5f 4f       	sbci	r21, 0xFF	; 255
     a4a:	e0 e0       	ldi	r30, 0x00	; 0
     a4c:	f0 e0       	ldi	r31, 0x00	; 0
     a4e:	20 30       	cpi	r18, 0x00	; 0
     a50:	a0 e0       	ldi	r26, 0x00	; 0
     a52:	3a 07       	cpc	r19, r26
     a54:	a0 e0       	ldi	r26, 0x00	; 0
     a56:	4a 07       	cpc	r20, r26
     a58:	a0 e4       	ldi	r26, 0x40	; 64
     a5a:	5a 07       	cpc	r21, r26
     a5c:	10 f0       	brcs	.+4      	; 0xa62 <__pack_f+0x10e>
     a5e:	e1 e0       	ldi	r30, 0x01	; 1
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	79 01       	movw	r14, r18
     a64:	8a 01       	movw	r16, r20
     a66:	27 c0       	rjmp	.+78     	; 0xab6 <__pack_f+0x162>
     a68:	60 38       	cpi	r22, 0x80	; 128
     a6a:	71 05       	cpc	r23, r1
     a6c:	64 f5       	brge	.+88     	; 0xac6 <__pack_f+0x172>
     a6e:	fb 01       	movw	r30, r22
     a70:	e1 58       	subi	r30, 0x81	; 129
     a72:	ff 4f       	sbci	r31, 0xFF	; 255
     a74:	d8 01       	movw	r26, r16
     a76:	c7 01       	movw	r24, r14
     a78:	8f 77       	andi	r24, 0x7F	; 127
     a7a:	90 70       	andi	r25, 0x00	; 0
     a7c:	a0 70       	andi	r26, 0x00	; 0
     a7e:	b0 70       	andi	r27, 0x00	; 0
     a80:	80 34       	cpi	r24, 0x40	; 64
     a82:	91 05       	cpc	r25, r1
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	39 f4       	brne	.+14     	; 0xa98 <__pack_f+0x144>
     a8a:	e7 fe       	sbrs	r14, 7
     a8c:	0d c0       	rjmp	.+26     	; 0xaa8 <__pack_f+0x154>
     a8e:	80 e4       	ldi	r24, 0x40	; 64
     a90:	90 e0       	ldi	r25, 0x00	; 0
     a92:	a0 e0       	ldi	r26, 0x00	; 0
     a94:	b0 e0       	ldi	r27, 0x00	; 0
     a96:	04 c0       	rjmp	.+8      	; 0xaa0 <__pack_f+0x14c>
     a98:	8f e3       	ldi	r24, 0x3F	; 63
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e0       	ldi	r26, 0x00	; 0
     a9e:	b0 e0       	ldi	r27, 0x00	; 0
     aa0:	e8 0e       	add	r14, r24
     aa2:	f9 1e       	adc	r15, r25
     aa4:	0a 1f       	adc	r16, r26
     aa6:	1b 1f       	adc	r17, r27
     aa8:	17 ff       	sbrs	r17, 7
     aaa:	05 c0       	rjmp	.+10     	; 0xab6 <__pack_f+0x162>
     aac:	16 95       	lsr	r17
     aae:	07 95       	ror	r16
     ab0:	f7 94       	ror	r15
     ab2:	e7 94       	ror	r14
     ab4:	31 96       	adiw	r30, 0x01	; 1
     ab6:	87 e0       	ldi	r24, 0x07	; 7
     ab8:	16 95       	lsr	r17
     aba:	07 95       	ror	r16
     abc:	f7 94       	ror	r15
     abe:	e7 94       	ror	r14
     ac0:	8a 95       	dec	r24
     ac2:	d1 f7       	brne	.-12     	; 0xab8 <__pack_f+0x164>
     ac4:	05 c0       	rjmp	.+10     	; 0xad0 <__pack_f+0x17c>
     ac6:	ee 24       	eor	r14, r14
     ac8:	ff 24       	eor	r15, r15
     aca:	87 01       	movw	r16, r14
     acc:	ef ef       	ldi	r30, 0xFF	; 255
     ace:	f0 e0       	ldi	r31, 0x00	; 0
     ad0:	6e 2f       	mov	r22, r30
     ad2:	67 95       	ror	r22
     ad4:	66 27       	eor	r22, r22
     ad6:	67 95       	ror	r22
     ad8:	90 2f       	mov	r25, r16
     ada:	9f 77       	andi	r25, 0x7F	; 127
     adc:	d7 94       	ror	r13
     ade:	dd 24       	eor	r13, r13
     ae0:	d7 94       	ror	r13
     ae2:	8e 2f       	mov	r24, r30
     ae4:	86 95       	lsr	r24
     ae6:	49 2f       	mov	r20, r25
     ae8:	46 2b       	or	r20, r22
     aea:	58 2f       	mov	r21, r24
     aec:	5d 29       	or	r21, r13
     aee:	b7 01       	movw	r22, r14
     af0:	ca 01       	movw	r24, r20
     af2:	1f 91       	pop	r17
     af4:	0f 91       	pop	r16
     af6:	ff 90       	pop	r15
     af8:	ef 90       	pop	r14
     afa:	df 90       	pop	r13
     afc:	08 95       	ret

00000afe <__unpack_f>:
     afe:	fc 01       	movw	r30, r24
     b00:	db 01       	movw	r26, r22
     b02:	40 81       	ld	r20, Z
     b04:	51 81       	ldd	r21, Z+1	; 0x01
     b06:	22 81       	ldd	r18, Z+2	; 0x02
     b08:	62 2f       	mov	r22, r18
     b0a:	6f 77       	andi	r22, 0x7F	; 127
     b0c:	70 e0       	ldi	r23, 0x00	; 0
     b0e:	22 1f       	adc	r18, r18
     b10:	22 27       	eor	r18, r18
     b12:	22 1f       	adc	r18, r18
     b14:	93 81       	ldd	r25, Z+3	; 0x03
     b16:	89 2f       	mov	r24, r25
     b18:	88 0f       	add	r24, r24
     b1a:	82 2b       	or	r24, r18
     b1c:	28 2f       	mov	r18, r24
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	99 1f       	adc	r25, r25
     b22:	99 27       	eor	r25, r25
     b24:	99 1f       	adc	r25, r25
     b26:	11 96       	adiw	r26, 0x01	; 1
     b28:	9c 93       	st	X, r25
     b2a:	11 97       	sbiw	r26, 0x01	; 1
     b2c:	21 15       	cp	r18, r1
     b2e:	31 05       	cpc	r19, r1
     b30:	a9 f5       	brne	.+106    	; 0xb9c <__unpack_f+0x9e>
     b32:	41 15       	cp	r20, r1
     b34:	51 05       	cpc	r21, r1
     b36:	61 05       	cpc	r22, r1
     b38:	71 05       	cpc	r23, r1
     b3a:	11 f4       	brne	.+4      	; 0xb40 <__unpack_f+0x42>
     b3c:	82 e0       	ldi	r24, 0x02	; 2
     b3e:	37 c0       	rjmp	.+110    	; 0xbae <__unpack_f+0xb0>
     b40:	82 e8       	ldi	r24, 0x82	; 130
     b42:	9f ef       	ldi	r25, 0xFF	; 255
     b44:	13 96       	adiw	r26, 0x03	; 3
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
     b4a:	12 97       	sbiw	r26, 0x02	; 2
     b4c:	9a 01       	movw	r18, r20
     b4e:	ab 01       	movw	r20, r22
     b50:	67 e0       	ldi	r22, 0x07	; 7
     b52:	22 0f       	add	r18, r18
     b54:	33 1f       	adc	r19, r19
     b56:	44 1f       	adc	r20, r20
     b58:	55 1f       	adc	r21, r21
     b5a:	6a 95       	dec	r22
     b5c:	d1 f7       	brne	.-12     	; 0xb52 <__unpack_f+0x54>
     b5e:	83 e0       	ldi	r24, 0x03	; 3
     b60:	8c 93       	st	X, r24
     b62:	0d c0       	rjmp	.+26     	; 0xb7e <__unpack_f+0x80>
     b64:	22 0f       	add	r18, r18
     b66:	33 1f       	adc	r19, r19
     b68:	44 1f       	adc	r20, r20
     b6a:	55 1f       	adc	r21, r21
     b6c:	12 96       	adiw	r26, 0x02	; 2
     b6e:	8d 91       	ld	r24, X+
     b70:	9c 91       	ld	r25, X
     b72:	13 97       	sbiw	r26, 0x03	; 3
     b74:	01 97       	sbiw	r24, 0x01	; 1
     b76:	13 96       	adiw	r26, 0x03	; 3
     b78:	9c 93       	st	X, r25
     b7a:	8e 93       	st	-X, r24
     b7c:	12 97       	sbiw	r26, 0x02	; 2
     b7e:	20 30       	cpi	r18, 0x00	; 0
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	38 07       	cpc	r19, r24
     b84:	80 e0       	ldi	r24, 0x00	; 0
     b86:	48 07       	cpc	r20, r24
     b88:	80 e4       	ldi	r24, 0x40	; 64
     b8a:	58 07       	cpc	r21, r24
     b8c:	58 f3       	brcs	.-42     	; 0xb64 <__unpack_f+0x66>
     b8e:	14 96       	adiw	r26, 0x04	; 4
     b90:	2d 93       	st	X+, r18
     b92:	3d 93       	st	X+, r19
     b94:	4d 93       	st	X+, r20
     b96:	5c 93       	st	X, r21
     b98:	17 97       	sbiw	r26, 0x07	; 7
     b9a:	08 95       	ret
     b9c:	2f 3f       	cpi	r18, 0xFF	; 255
     b9e:	31 05       	cpc	r19, r1
     ba0:	79 f4       	brne	.+30     	; 0xbc0 <__unpack_f+0xc2>
     ba2:	41 15       	cp	r20, r1
     ba4:	51 05       	cpc	r21, r1
     ba6:	61 05       	cpc	r22, r1
     ba8:	71 05       	cpc	r23, r1
     baa:	19 f4       	brne	.+6      	; 0xbb2 <__unpack_f+0xb4>
     bac:	84 e0       	ldi	r24, 0x04	; 4
     bae:	8c 93       	st	X, r24
     bb0:	08 95       	ret
     bb2:	64 ff       	sbrs	r22, 4
     bb4:	03 c0       	rjmp	.+6      	; 0xbbc <__unpack_f+0xbe>
     bb6:	81 e0       	ldi	r24, 0x01	; 1
     bb8:	8c 93       	st	X, r24
     bba:	12 c0       	rjmp	.+36     	; 0xbe0 <__unpack_f+0xe2>
     bbc:	1c 92       	st	X, r1
     bbe:	10 c0       	rjmp	.+32     	; 0xbe0 <__unpack_f+0xe2>
     bc0:	2f 57       	subi	r18, 0x7F	; 127
     bc2:	30 40       	sbci	r19, 0x00	; 0
     bc4:	13 96       	adiw	r26, 0x03	; 3
     bc6:	3c 93       	st	X, r19
     bc8:	2e 93       	st	-X, r18
     bca:	12 97       	sbiw	r26, 0x02	; 2
     bcc:	83 e0       	ldi	r24, 0x03	; 3
     bce:	8c 93       	st	X, r24
     bd0:	87 e0       	ldi	r24, 0x07	; 7
     bd2:	44 0f       	add	r20, r20
     bd4:	55 1f       	adc	r21, r21
     bd6:	66 1f       	adc	r22, r22
     bd8:	77 1f       	adc	r23, r23
     bda:	8a 95       	dec	r24
     bdc:	d1 f7       	brne	.-12     	; 0xbd2 <__unpack_f+0xd4>
     bde:	70 64       	ori	r23, 0x40	; 64
     be0:	14 96       	adiw	r26, 0x04	; 4
     be2:	4d 93       	st	X+, r20
     be4:	5d 93       	st	X+, r21
     be6:	6d 93       	st	X+, r22
     be8:	7c 93       	st	X, r23
     bea:	17 97       	sbiw	r26, 0x07	; 7
     bec:	08 95       	ret

00000bee <__fpcmp_parts_f>:
     bee:	1f 93       	push	r17
     bf0:	dc 01       	movw	r26, r24
     bf2:	fb 01       	movw	r30, r22
     bf4:	9c 91       	ld	r25, X
     bf6:	92 30       	cpi	r25, 0x02	; 2
     bf8:	08 f4       	brcc	.+2      	; 0xbfc <__fpcmp_parts_f+0xe>
     bfa:	47 c0       	rjmp	.+142    	; 0xc8a <__fpcmp_parts_f+0x9c>
     bfc:	80 81       	ld	r24, Z
     bfe:	82 30       	cpi	r24, 0x02	; 2
     c00:	08 f4       	brcc	.+2      	; 0xc04 <__fpcmp_parts_f+0x16>
     c02:	43 c0       	rjmp	.+134    	; 0xc8a <__fpcmp_parts_f+0x9c>
     c04:	94 30       	cpi	r25, 0x04	; 4
     c06:	51 f4       	brne	.+20     	; 0xc1c <__fpcmp_parts_f+0x2e>
     c08:	11 96       	adiw	r26, 0x01	; 1
     c0a:	1c 91       	ld	r17, X
     c0c:	84 30       	cpi	r24, 0x04	; 4
     c0e:	99 f5       	brne	.+102    	; 0xc76 <__fpcmp_parts_f+0x88>
     c10:	81 81       	ldd	r24, Z+1	; 0x01
     c12:	68 2f       	mov	r22, r24
     c14:	70 e0       	ldi	r23, 0x00	; 0
     c16:	61 1b       	sub	r22, r17
     c18:	71 09       	sbc	r23, r1
     c1a:	3f c0       	rjmp	.+126    	; 0xc9a <__fpcmp_parts_f+0xac>
     c1c:	84 30       	cpi	r24, 0x04	; 4
     c1e:	21 f0       	breq	.+8      	; 0xc28 <__fpcmp_parts_f+0x3a>
     c20:	92 30       	cpi	r25, 0x02	; 2
     c22:	31 f4       	brne	.+12     	; 0xc30 <__fpcmp_parts_f+0x42>
     c24:	82 30       	cpi	r24, 0x02	; 2
     c26:	b9 f1       	breq	.+110    	; 0xc96 <__fpcmp_parts_f+0xa8>
     c28:	81 81       	ldd	r24, Z+1	; 0x01
     c2a:	88 23       	and	r24, r24
     c2c:	89 f1       	breq	.+98     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c2e:	2d c0       	rjmp	.+90     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c30:	11 96       	adiw	r26, 0x01	; 1
     c32:	1c 91       	ld	r17, X
     c34:	11 97       	sbiw	r26, 0x01	; 1
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	f1 f0       	breq	.+60     	; 0xc76 <__fpcmp_parts_f+0x88>
     c3a:	81 81       	ldd	r24, Z+1	; 0x01
     c3c:	18 17       	cp	r17, r24
     c3e:	d9 f4       	brne	.+54     	; 0xc76 <__fpcmp_parts_f+0x88>
     c40:	12 96       	adiw	r26, 0x02	; 2
     c42:	2d 91       	ld	r18, X+
     c44:	3c 91       	ld	r19, X
     c46:	13 97       	sbiw	r26, 0x03	; 3
     c48:	82 81       	ldd	r24, Z+2	; 0x02
     c4a:	93 81       	ldd	r25, Z+3	; 0x03
     c4c:	82 17       	cp	r24, r18
     c4e:	93 07       	cpc	r25, r19
     c50:	94 f0       	brlt	.+36     	; 0xc76 <__fpcmp_parts_f+0x88>
     c52:	28 17       	cp	r18, r24
     c54:	39 07       	cpc	r19, r25
     c56:	bc f0       	brlt	.+46     	; 0xc86 <__fpcmp_parts_f+0x98>
     c58:	14 96       	adiw	r26, 0x04	; 4
     c5a:	8d 91       	ld	r24, X+
     c5c:	9d 91       	ld	r25, X+
     c5e:	0d 90       	ld	r0, X+
     c60:	bc 91       	ld	r27, X
     c62:	a0 2d       	mov	r26, r0
     c64:	24 81       	ldd	r18, Z+4	; 0x04
     c66:	35 81       	ldd	r19, Z+5	; 0x05
     c68:	46 81       	ldd	r20, Z+6	; 0x06
     c6a:	57 81       	ldd	r21, Z+7	; 0x07
     c6c:	28 17       	cp	r18, r24
     c6e:	39 07       	cpc	r19, r25
     c70:	4a 07       	cpc	r20, r26
     c72:	5b 07       	cpc	r21, r27
     c74:	18 f4       	brcc	.+6      	; 0xc7c <__fpcmp_parts_f+0x8e>
     c76:	11 23       	and	r17, r17
     c78:	41 f0       	breq	.+16     	; 0xc8a <__fpcmp_parts_f+0x9c>
     c7a:	0a c0       	rjmp	.+20     	; 0xc90 <__fpcmp_parts_f+0xa2>
     c7c:	82 17       	cp	r24, r18
     c7e:	93 07       	cpc	r25, r19
     c80:	a4 07       	cpc	r26, r20
     c82:	b5 07       	cpc	r27, r21
     c84:	40 f4       	brcc	.+16     	; 0xc96 <__fpcmp_parts_f+0xa8>
     c86:	11 23       	and	r17, r17
     c88:	19 f0       	breq	.+6      	; 0xc90 <__fpcmp_parts_f+0xa2>
     c8a:	61 e0       	ldi	r22, 0x01	; 1
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	05 c0       	rjmp	.+10     	; 0xc9a <__fpcmp_parts_f+0xac>
     c90:	6f ef       	ldi	r22, 0xFF	; 255
     c92:	7f ef       	ldi	r23, 0xFF	; 255
     c94:	02 c0       	rjmp	.+4      	; 0xc9a <__fpcmp_parts_f+0xac>
     c96:	60 e0       	ldi	r22, 0x00	; 0
     c98:	70 e0       	ldi	r23, 0x00	; 0
     c9a:	cb 01       	movw	r24, r22
     c9c:	1f 91       	pop	r17
     c9e:	08 95       	ret

00000ca0 <main>:
 *                      MAIN                                   *
 *******************************************************************************/


int main(void)
{
     ca0:	df 93       	push	r29
     ca2:	cf 93       	push	r28
     ca4:	cd b7       	in	r28, 0x3d	; 61
     ca6:	de b7       	in	r29, 0x3e	; 62
     ca8:	6b 97       	sbiw	r28, 0x1b	; 27
     caa:	0f b6       	in	r0, 0x3f	; 63
     cac:	f8 94       	cli
     cae:	de bf       	out	0x3e, r29	; 62
     cb0:	0f be       	out	0x3f, r0	; 63
     cb2:	cd bf       	out	0x3d, r28	; 61
	Timer1_ConfigType TIMER_Configs={0,1000,F_CPU_1024,CTC_MODE};
     cb4:	9e 01       	movw	r18, r28
     cb6:	2f 5f       	subi	r18, 0xFF	; 255
     cb8:	3f 4f       	sbci	r19, 0xFF	; 255
     cba:	3b 8b       	std	Y+19, r19	; 0x13
     cbc:	2a 8b       	std	Y+18, r18	; 0x12
     cbe:	80 e9       	ldi	r24, 0x90	; 144
     cc0:	91 e0       	ldi	r25, 0x01	; 1
     cc2:	9d 8b       	std	Y+21, r25	; 0x15
     cc4:	8c 8b       	std	Y+20, r24	; 0x14
     cc6:	96 e0       	ldi	r25, 0x06	; 6
     cc8:	9e 8b       	std	Y+22, r25	; 0x16
     cca:	ec 89       	ldd	r30, Y+20	; 0x14
     ccc:	fd 89       	ldd	r31, Y+21	; 0x15
     cce:	00 80       	ld	r0, Z
     cd0:	2c 89       	ldd	r18, Y+20	; 0x14
     cd2:	3d 89       	ldd	r19, Y+21	; 0x15
     cd4:	2f 5f       	subi	r18, 0xFF	; 255
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	3d 8b       	std	Y+21, r19	; 0x15
     cda:	2c 8b       	std	Y+20, r18	; 0x14
     cdc:	ea 89       	ldd	r30, Y+18	; 0x12
     cde:	fb 89       	ldd	r31, Y+19	; 0x13
     ce0:	00 82       	st	Z, r0
     ce2:	2a 89       	ldd	r18, Y+18	; 0x12
     ce4:	3b 89       	ldd	r19, Y+19	; 0x13
     ce6:	2f 5f       	subi	r18, 0xFF	; 255
     ce8:	3f 4f       	sbci	r19, 0xFF	; 255
     cea:	3b 8b       	std	Y+19, r19	; 0x13
     cec:	2a 8b       	std	Y+18, r18	; 0x12
     cee:	3e 89       	ldd	r19, Y+22	; 0x16
     cf0:	31 50       	subi	r19, 0x01	; 1
     cf2:	3e 8b       	std	Y+22, r19	; 0x16
     cf4:	8e 89       	ldd	r24, Y+22	; 0x16
     cf6:	88 23       	and	r24, r24
     cf8:	41 f7       	brne	.-48     	; 0xcca <main+0x2a>
	UART_ConfigType UART_Configs={_8_bit,no_parity,_1_bit,9600};
     cfa:	fe 01       	movw	r30, r28
     cfc:	37 96       	adiw	r30, 0x07	; 7
     cfe:	f8 8f       	std	Y+24, r31	; 0x18
     d00:	ef 8b       	std	Y+23, r30	; 0x17
     d02:	29 e8       	ldi	r18, 0x89	; 137
     d04:	31 e0       	ldi	r19, 0x01	; 1
     d06:	3a 8f       	std	Y+26, r19	; 0x1a
     d08:	29 8f       	std	Y+25, r18	; 0x19
     d0a:	37 e0       	ldi	r19, 0x07	; 7
     d0c:	3b 8f       	std	Y+27, r19	; 0x1b
     d0e:	e9 8d       	ldd	r30, Y+25	; 0x19
     d10:	fa 8d       	ldd	r31, Y+26	; 0x1a
     d12:	00 80       	ld	r0, Z
     d14:	29 8d       	ldd	r18, Y+25	; 0x19
     d16:	3a 8d       	ldd	r19, Y+26	; 0x1a
     d18:	2f 5f       	subi	r18, 0xFF	; 255
     d1a:	3f 4f       	sbci	r19, 0xFF	; 255
     d1c:	3a 8f       	std	Y+26, r19	; 0x1a
     d1e:	29 8f       	std	Y+25, r18	; 0x19
     d20:	ef 89       	ldd	r30, Y+23	; 0x17
     d22:	f8 8d       	ldd	r31, Y+24	; 0x18
     d24:	00 82       	st	Z, r0
     d26:	2f 89       	ldd	r18, Y+23	; 0x17
     d28:	38 8d       	ldd	r19, Y+24	; 0x18
     d2a:	2f 5f       	subi	r18, 0xFF	; 255
     d2c:	3f 4f       	sbci	r19, 0xFF	; 255
     d2e:	38 8f       	std	Y+24, r19	; 0x18
     d30:	2f 8b       	std	Y+23, r18	; 0x17
     d32:	3b 8d       	ldd	r19, Y+27	; 0x1b
     d34:	31 50       	subi	r19, 0x01	; 1
     d36:	3b 8f       	std	Y+27, r19	; 0x1b
     d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d3a:	88 23       	and	r24, r24
     d3c:	41 f7       	brne	.-48     	; 0xd0e <main+0x6e>
	TWI_ConfigType TWI_Configs={CONTROL_ADDRESS,250};
     d3e:	81 e0       	ldi	r24, 0x01	; 1
     d40:	8e 87       	std	Y+14, r24	; 0x0e
     d42:	8a ef       	ldi	r24, 0xFA	; 250
     d44:	8f 87       	std	Y+15, r24	; 0x0f
	Timer1_init(&TIMER_Configs);
     d46:	ce 01       	movw	r24, r28
     d48:	01 96       	adiw	r24, 0x01	; 1
     d4a:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <Timer1_init>
	UART_init(&UART_Configs);
     d4e:	ce 01       	movw	r24, r28
     d50:	07 96       	adiw	r24, 0x07	; 7
     d52:	0e 94 52 18 	call	0x30a4	; 0x30a4 <UART_init>
	TWI_init(&TWI_Configs);
     d56:	ce 01       	movw	r24, r28
     d58:	0e 96       	adiw	r24, 0x0e	; 14
     d5a:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <TWI_init>
	DcMotor_Init();
     d5e:	0e 94 95 16 	call	0x2d2a	; 0x2d2a <DcMotor_Init>
	LCD_init();
     d62:	0e 94 6a 11 	call	0x22d4	; 0x22d4 <LCD_init>
	Buzzer_init();
     d66:	0e 94 d3 0c 	call	0x19a6	; 0x19a6 <Buzzer_init>
	recive_password();
     d6a:	0e 94 d0 06 	call	0xda0	; 0xda0 <recive_password>
	/*=====================================================================*/

	while(1){


		UART_sendByte(CONTROL_Ready);
     d6e:	8a ec       	ldi	r24, 0xCA	; 202
     d70:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		switch (UART_recieveByte())
     d74:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
     d78:	e8 2f       	mov	r30, r24
     d7a:	f0 e0       	ldi	r31, 0x00	; 0
     d7c:	f9 8b       	std	Y+17, r31	; 0x11
     d7e:	e8 8b       	std	Y+16, r30	; 0x10
     d80:	28 89       	ldd	r18, Y+16	; 0x10
     d82:	39 89       	ldd	r19, Y+17	; 0x11
     d84:	25 35       	cpi	r18, 0x55	; 85
     d86:	31 05       	cpc	r19, r1
     d88:	41 f0       	breq	.+16     	; 0xd9a <main+0xfa>
     d8a:	88 89       	ldd	r24, Y+16	; 0x10
     d8c:	99 89       	ldd	r25, Y+17	; 0x11
     d8e:	86 36       	cpi	r24, 0x66	; 102
     d90:	91 05       	cpc	r25, r1
     d92:	69 f7       	brne	.-38     	; 0xd6e <main+0xce>
		{
		case OPEN_DOOR:check_door_pass();
     d94:	0e 94 1c 08 	call	0x1038	; 0x1038 <check_door_pass>
     d98:	ea cf       	rjmp	.-44     	; 0xd6e <main+0xce>
		break;
		case CHANGE_PASS:Change_password();
     d9a:	0e 94 69 0a 	call	0x14d2	; 0x14d2 <Change_password>
     d9e:	e7 cf       	rjmp	.-50     	; 0xd6e <main+0xce>

00000da0 <recive_password>:
 * 2. Comparing the two passwords and decide that they are matched or not.
 * 3.in the case they are matched the password will be saved in EEPROM
 */

void recive_password(void)
{
     da0:	0f 93       	push	r16
     da2:	1f 93       	push	r17
     da4:	df 93       	push	r29
     da6:	cf 93       	push	r28
     da8:	cd b7       	in	r28, 0x3d	; 61
     daa:	de b7       	in	r29, 0x3e	; 62
     dac:	2e 97       	sbiw	r28, 0x0e	; 14
     dae:	0f b6       	in	r0, 0x3f	; 63
     db0:	f8 94       	cli
     db2:	de bf       	out	0x3e, r29	; 62
     db4:	0f be       	out	0x3f, r0	; 63
     db6:	cd bf       	out	0x3d, r28	; 61

	do{
		g_matching_flag=0;
     db8:	10 92 97 01 	sts	0x0197, r1
		password_1[0]=0;
     dbc:	10 92 9b 01 	sts	0x019B, r1
		password_2[0]=0;
     dc0:	10 92 a1 01 	sts	0x01A1, r1

		UART_sendByte(CONTROL_Ready);
     dc4:	8a ec       	ldi	r24, 0xCA	; 202
     dc6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		for(i=0;i<5;i++)
     dca:	10 92 a0 01 	sts	0x01A0, r1
     dce:	0f c0       	rjmp	.+30     	; 0xdee <recive_password+0x4e>
		{

			password_1[i]=UART_recieveByte();
     dd0:	80 91 a0 01 	lds	r24, 0x01A0
     dd4:	08 2f       	mov	r16, r24
     dd6:	10 e0       	ldi	r17, 0x00	; 0
     dd8:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
     ddc:	f8 01       	movw	r30, r16
     dde:	e5 56       	subi	r30, 0x65	; 101
     de0:	fe 4f       	sbci	r31, 0xFE	; 254
     de2:	80 83       	st	Z, r24
		g_matching_flag=0;
		password_1[0]=0;
		password_2[0]=0;

		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
     de4:	80 91 a0 01 	lds	r24, 0x01A0
     de8:	8f 5f       	subi	r24, 0xFF	; 255
     dea:	80 93 a0 01 	sts	0x01A0, r24
     dee:	80 91 a0 01 	lds	r24, 0x01A0
     df2:	85 30       	cpi	r24, 0x05	; 5
     df4:	68 f3       	brcs	.-38     	; 0xdd0 <recive_password+0x30>
			password_1[i]=UART_recieveByte();

		}


		UART_sendByte(CONTROL_Ready);
     df6:	8a ec       	ldi	r24, 0xCA	; 202
     df8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		for(i=0;i<5;i++)
     dfc:	10 92 a0 01 	sts	0x01A0, r1
     e00:	0f c0       	rjmp	.+30     	; 0xe20 <recive_password+0x80>
		{

			password_2[i]=UART_recieveByte();
     e02:	80 91 a0 01 	lds	r24, 0x01A0
     e06:	08 2f       	mov	r16, r24
     e08:	10 e0       	ldi	r17, 0x00	; 0
     e0a:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
     e0e:	f8 01       	movw	r30, r16
     e10:	ef 55       	subi	r30, 0x5F	; 95
     e12:	fe 4f       	sbci	r31, 0xFE	; 254
     e14:	80 83       	st	Z, r24

		}


		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
     e16:	80 91 a0 01 	lds	r24, 0x01A0
     e1a:	8f 5f       	subi	r24, 0xFF	; 255
     e1c:	80 93 a0 01 	sts	0x01A0, r24
     e20:	80 91 a0 01 	lds	r24, 0x01A0
     e24:	85 30       	cpi	r24, 0x05	; 5
     e26:	68 f3       	brcs	.-38     	; 0xe02 <recive_password+0x62>

			password_2[i]=UART_recieveByte();

		}
		/*test*/
		LCD_clearScreen();
     e28:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
		for(i=0;i<5;i++){
     e2c:	10 92 a0 01 	sts	0x01A0, r1
     e30:	11 c0       	rjmp	.+34     	; 0xe54 <recive_password+0xb4>
			LCD_intgerToString(password_1[i]);
     e32:	80 91 a0 01 	lds	r24, 0x01A0
     e36:	88 2f       	mov	r24, r24
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	fc 01       	movw	r30, r24
     e3c:	e5 56       	subi	r30, 0x65	; 101
     e3e:	fe 4f       	sbci	r31, 0xFE	; 254
     e40:	80 81       	ld	r24, Z
     e42:	88 2f       	mov	r24, r24
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <LCD_intgerToString>
			password_2[i]=UART_recieveByte();

		}
		/*test*/
		LCD_clearScreen();
		for(i=0;i<5;i++){
     e4a:	80 91 a0 01 	lds	r24, 0x01A0
     e4e:	8f 5f       	subi	r24, 0xFF	; 255
     e50:	80 93 a0 01 	sts	0x01A0, r24
     e54:	80 91 a0 01 	lds	r24, 0x01A0
     e58:	85 30       	cpi	r24, 0x05	; 5
     e5a:	58 f3       	brcs	.-42     	; 0xe32 <recive_password+0x92>
			LCD_intgerToString(password_1[i]);
		}

		LCD_moveCursor(1, 0);
     e5c:	81 e0       	ldi	r24, 0x01	; 1
     e5e:	60 e0       	ldi	r22, 0x00	; 0
     e60:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_moveCursor>
		for(i=0;i<5;i++){
     e64:	10 92 a0 01 	sts	0x01A0, r1
     e68:	11 c0       	rjmp	.+34     	; 0xe8c <recive_password+0xec>
			//LCD_displayCharacter('*');
			LCD_intgerToString(password_2[i]);
     e6a:	80 91 a0 01 	lds	r24, 0x01A0
     e6e:	88 2f       	mov	r24, r24
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	fc 01       	movw	r30, r24
     e74:	ef 55       	subi	r30, 0x5F	; 95
     e76:	fe 4f       	sbci	r31, 0xFE	; 254
     e78:	80 81       	ld	r24, Z
     e7a:	88 2f       	mov	r24, r24
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <LCD_intgerToString>
		for(i=0;i<5;i++){
			LCD_intgerToString(password_1[i]);
		}

		LCD_moveCursor(1, 0);
		for(i=0;i<5;i++){
     e82:	80 91 a0 01 	lds	r24, 0x01A0
     e86:	8f 5f       	subi	r24, 0xFF	; 255
     e88:	80 93 a0 01 	sts	0x01A0, r24
     e8c:	80 91 a0 01 	lds	r24, 0x01A0
     e90:	85 30       	cpi	r24, 0x05	; 5
     e92:	58 f3       	brcs	.-42     	; 0xe6a <recive_password+0xca>
			LCD_intgerToString(password_2[i]);
		}



		for(i=0;i<5;i++){
     e94:	10 92 a0 01 	sts	0x01A0, r1
     e98:	1a c0       	rjmp	.+52     	; 0xece <recive_password+0x12e>
			if(password_1[i]!=password_2[i])
     e9a:	80 91 a0 01 	lds	r24, 0x01A0
     e9e:	88 2f       	mov	r24, r24
     ea0:	90 e0       	ldi	r25, 0x00	; 0
     ea2:	fc 01       	movw	r30, r24
     ea4:	e5 56       	subi	r30, 0x65	; 101
     ea6:	fe 4f       	sbci	r31, 0xFE	; 254
     ea8:	20 81       	ld	r18, Z
     eaa:	80 91 a0 01 	lds	r24, 0x01A0
     eae:	88 2f       	mov	r24, r24
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	fc 01       	movw	r30, r24
     eb4:	ef 55       	subi	r30, 0x5F	; 95
     eb6:	fe 4f       	sbci	r31, 0xFE	; 254
     eb8:	80 81       	ld	r24, Z
     eba:	28 17       	cp	r18, r24
     ebc:	19 f0       	breq	.+6      	; 0xec4 <recive_password+0x124>
			{
				//g_matching_flag=0;
				password_state=Unmatched;
     ebe:	10 92 88 01 	sts	0x0188, r1
     ec2:	09 c0       	rjmp	.+18     	; 0xed6 <recive_password+0x136>
			LCD_intgerToString(password_2[i]);
		}



		for(i=0;i<5;i++){
     ec4:	80 91 a0 01 	lds	r24, 0x01A0
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	80 93 a0 01 	sts	0x01A0, r24
     ece:	80 91 a0 01 	lds	r24, 0x01A0
     ed2:	85 30       	cpi	r24, 0x05	; 5
     ed4:	10 f3       	brcs	.-60     	; 0xe9a <recive_password+0xfa>

			}

		}

		while(UART_recieveByte()!=HMI_Ready);
     ed6:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
     eda:	8c 3a       	cpi	r24, 0xAC	; 172
     edc:	e1 f7       	brne	.-8      	; 0xed6 <recive_password+0x136>
		UART_sendByte(password_state);
     ede:	80 91 88 01 	lds	r24, 0x0188
     ee2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>

		if( password_state==Matched)
     ee6:	80 91 88 01 	lds	r24, 0x0188
     eea:	81 30       	cpi	r24, 0x01	; 1
     eec:	09 f0       	breq	.+2      	; 0xef0 <recive_password+0x150>
     eee:	94 c0       	rjmp	.+296    	; 0x1018 <recive_password+0x278>
		{
			g_matching_flag=1;
     ef0:	81 e0       	ldi	r24, 0x01	; 1
     ef2:	80 93 97 01 	sts	0x0197, r24
			for(i=0;i<5;i++)
     ef6:	10 92 a0 01 	sts	0x01A0, r1
     efa:	89 c0       	rjmp	.+274    	; 0x100e <recive_password+0x26e>
			{
				EEPROM_writeByte(0x01+i, password_1[i]);
     efc:	80 91 a0 01 	lds	r24, 0x01A0
     f00:	88 2f       	mov	r24, r24
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	01 96       	adiw	r24, 0x01	; 1
     f06:	ac 01       	movw	r20, r24
     f08:	80 91 a0 01 	lds	r24, 0x01A0
     f0c:	88 2f       	mov	r24, r24
     f0e:	90 e0       	ldi	r25, 0x00	; 0
     f10:	fc 01       	movw	r30, r24
     f12:	e5 56       	subi	r30, 0x65	; 101
     f14:	fe 4f       	sbci	r31, 0xFE	; 254
     f16:	20 81       	ld	r18, Z
     f18:	ca 01       	movw	r24, r20
     f1a:	62 2f       	mov	r22, r18
     f1c:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <EEPROM_writeByte>
     f20:	80 e0       	ldi	r24, 0x00	; 0
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	a0 e2       	ldi	r26, 0x20	; 32
     f26:	b1 e4       	ldi	r27, 0x41	; 65
     f28:	8b 87       	std	Y+11, r24	; 0x0b
     f2a:	9c 87       	std	Y+12, r25	; 0x0c
     f2c:	ad 87       	std	Y+13, r26	; 0x0d
     f2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f30:	6b 85       	ldd	r22, Y+11	; 0x0b
     f32:	7c 85       	ldd	r23, Y+12	; 0x0c
     f34:	8d 85       	ldd	r24, Y+13	; 0x0d
     f36:	9e 85       	ldd	r25, Y+14	; 0x0e
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	30 e0       	ldi	r19, 0x00	; 0
     f3c:	4a e7       	ldi	r20, 0x7A	; 122
     f3e:	53 e4       	ldi	r21, 0x43	; 67
     f40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f44:	dc 01       	movw	r26, r24
     f46:	cb 01       	movw	r24, r22
     f48:	8f 83       	std	Y+7, r24	; 0x07
     f4a:	98 87       	std	Y+8, r25	; 0x08
     f4c:	a9 87       	std	Y+9, r26	; 0x09
     f4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f50:	6f 81       	ldd	r22, Y+7	; 0x07
     f52:	78 85       	ldd	r23, Y+8	; 0x08
     f54:	89 85       	ldd	r24, Y+9	; 0x09
     f56:	9a 85       	ldd	r25, Y+10	; 0x0a
     f58:	20 e0       	ldi	r18, 0x00	; 0
     f5a:	30 e0       	ldi	r19, 0x00	; 0
     f5c:	40 e8       	ldi	r20, 0x80	; 128
     f5e:	5f e3       	ldi	r21, 0x3F	; 63
     f60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f64:	88 23       	and	r24, r24
     f66:	2c f4       	brge	.+10     	; 0xf72 <recive_password+0x1d2>
		__ticks = 1;
     f68:	81 e0       	ldi	r24, 0x01	; 1
     f6a:	90 e0       	ldi	r25, 0x00	; 0
     f6c:	9e 83       	std	Y+6, r25	; 0x06
     f6e:	8d 83       	std	Y+5, r24	; 0x05
     f70:	3f c0       	rjmp	.+126    	; 0xff0 <recive_password+0x250>
	else if (__tmp > 65535)
     f72:	6f 81       	ldd	r22, Y+7	; 0x07
     f74:	78 85       	ldd	r23, Y+8	; 0x08
     f76:	89 85       	ldd	r24, Y+9	; 0x09
     f78:	9a 85       	ldd	r25, Y+10	; 0x0a
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	3f ef       	ldi	r19, 0xFF	; 255
     f7e:	4f e7       	ldi	r20, 0x7F	; 127
     f80:	57 e4       	ldi	r21, 0x47	; 71
     f82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f86:	18 16       	cp	r1, r24
     f88:	4c f5       	brge	.+82     	; 0xfdc <recive_password+0x23c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f8a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f8c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f8e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f90:	9e 85       	ldd	r25, Y+14	; 0x0e
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	bc 01       	movw	r22, r24
     fa4:	cd 01       	movw	r24, r26
     fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     faa:	dc 01       	movw	r26, r24
     fac:	cb 01       	movw	r24, r22
     fae:	9e 83       	std	Y+6, r25	; 0x06
     fb0:	8d 83       	std	Y+5, r24	; 0x05
     fb2:	0f c0       	rjmp	.+30     	; 0xfd2 <recive_password+0x232>
     fb4:	89 e1       	ldi	r24, 0x19	; 25
     fb6:	90 e0       	ldi	r25, 0x00	; 0
     fb8:	9c 83       	std	Y+4, r25	; 0x04
     fba:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fbc:	8b 81       	ldd	r24, Y+3	; 0x03
     fbe:	9c 81       	ldd	r25, Y+4	; 0x04
     fc0:	01 97       	sbiw	r24, 0x01	; 1
     fc2:	f1 f7       	brne	.-4      	; 0xfc0 <recive_password+0x220>
     fc4:	9c 83       	std	Y+4, r25	; 0x04
     fc6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc8:	8d 81       	ldd	r24, Y+5	; 0x05
     fca:	9e 81       	ldd	r25, Y+6	; 0x06
     fcc:	01 97       	sbiw	r24, 0x01	; 1
     fce:	9e 83       	std	Y+6, r25	; 0x06
     fd0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	00 97       	sbiw	r24, 0x00	; 0
     fd8:	69 f7       	brne	.-38     	; 0xfb4 <recive_password+0x214>
     fda:	14 c0       	rjmp	.+40     	; 0x1004 <recive_password+0x264>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fdc:	6f 81       	ldd	r22, Y+7	; 0x07
     fde:	78 85       	ldd	r23, Y+8	; 0x08
     fe0:	89 85       	ldd	r24, Y+9	; 0x09
     fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
     fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fe8:	dc 01       	movw	r26, r24
     fea:	cb 01       	movw	r24, r22
     fec:	9e 83       	std	Y+6, r25	; 0x06
     fee:	8d 83       	std	Y+5, r24	; 0x05
     ff0:	8d 81       	ldd	r24, Y+5	; 0x05
     ff2:	9e 81       	ldd	r25, Y+6	; 0x06
     ff4:	9a 83       	std	Y+2, r25	; 0x02
     ff6:	89 83       	std	Y+1, r24	; 0x01
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	9a 81       	ldd	r25, Y+2	; 0x02
     ffc:	01 97       	sbiw	r24, 0x01	; 1
     ffe:	f1 f7       	brne	.-4      	; 0xffc <recive_password+0x25c>
    1000:	9a 83       	std	Y+2, r25	; 0x02
    1002:	89 83       	std	Y+1, r24	; 0x01
		UART_sendByte(password_state);

		if( password_state==Matched)
		{
			g_matching_flag=1;
			for(i=0;i<5;i++)
    1004:	80 91 a0 01 	lds	r24, 0x01A0
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 a0 01 	sts	0x01A0, r24
    100e:	80 91 a0 01 	lds	r24, 0x01A0
    1012:	85 30       	cpi	r24, 0x05	; 5
    1014:	08 f4       	brcc	.+2      	; 0x1018 <recive_password+0x278>
    1016:	72 cf       	rjmp	.-284    	; 0xefc <recive_password+0x15c>





	}while(g_matching_flag==0);
    1018:	80 91 97 01 	lds	r24, 0x0197
    101c:	88 23       	and	r24, r24
    101e:	09 f4       	brne	.+2      	; 0x1022 <recive_password+0x282>
    1020:	cb ce       	rjmp	.-618    	; 0xdb8 <recive_password+0x18>





}
    1022:	2e 96       	adiw	r28, 0x0e	; 14
    1024:	0f b6       	in	r0, 0x3f	; 63
    1026:	f8 94       	cli
    1028:	de bf       	out	0x3e, r29	; 62
    102a:	0f be       	out	0x3f, r0	; 63
    102c:	cd bf       	out	0x3d, r28	; 61
    102e:	cf 91       	pop	r28
    1030:	df 91       	pop	r29
    1032:	1f 91       	pop	r17
    1034:	0f 91       	pop	r16
    1036:	08 95       	ret

00001038 <check_door_pass>:
 *
 * 	3. in case the password is not matched for 3 times the BUZZER will be ON  for 60s
 */

void check_door_pass(void)
{
    1038:	0f 93       	push	r16
    103a:	1f 93       	push	r17
    103c:	df 93       	push	r29
    103e:	cf 93       	push	r28
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
    1044:	aa 97       	sbiw	r28, 0x2a	; 42
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	de bf       	out	0x3e, r29	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	cd bf       	out	0x3d, r28	; 61

	do{
		password_state=Matched; // to be sure that the flag is matched as if it changed so the pass is not identical
    1050:	81 e0       	ldi	r24, 0x01	; 1
    1052:	80 93 88 01 	sts	0x0188, r24

		UART_sendByte(CONTROL_Ready);
    1056:	8a ec       	ldi	r24, 0xCA	; 202
    1058:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		for(i=0;i<5;i++)
    105c:	10 92 a0 01 	sts	0x01A0, r1
    1060:	0f c0       	rjmp	.+30     	; 0x1080 <check_door_pass+0x48>
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
    1062:	80 91 a0 01 	lds	r24, 0x01A0
    1066:	08 2f       	mov	r16, r24
    1068:	10 e0       	ldi	r17, 0x00	; 0
    106a:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    106e:	f8 01       	movw	r30, r16
    1070:	e5 56       	subi	r30, 0x65	; 101
    1072:	fe 4f       	sbci	r31, 0xFE	; 254
    1074:	80 83       	st	Z, r24

	do{
		password_state=Matched; // to be sure that the flag is matched as if it changed so the pass is not identical

		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
    1076:	80 91 a0 01 	lds	r24, 0x01A0
    107a:	8f 5f       	subi	r24, 0xFF	; 255
    107c:	80 93 a0 01 	sts	0x01A0, r24
    1080:	80 91 a0 01 	lds	r24, 0x01A0
    1084:	85 30       	cpi	r24, 0x05	; 5
    1086:	68 f3       	brcs	.-38     	; 0x1062 <check_door_pass+0x2a>
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
		}

		for(i=0;i<5;i++)
    1088:	10 92 a0 01 	sts	0x01A0, r1
    108c:	88 c0       	rjmp	.+272    	; 0x119e <check_door_pass+0x166>
		{
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array  is an address the first postion
    108e:	80 91 a0 01 	lds	r24, 0x01A0
    1092:	88 2f       	mov	r24, r24
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	01 96       	adiw	r24, 0x01	; 1
    1098:	ac 01       	movw	r20, r24
    109a:	80 91 a0 01 	lds	r24, 0x01A0
    109e:	88 2f       	mov	r24, r24
    10a0:	90 e0       	ldi	r25, 0x00	; 0
    10a2:	9c 01       	movw	r18, r24
    10a4:	2f 55       	subi	r18, 0x5F	; 95
    10a6:	3e 4f       	sbci	r19, 0xFE	; 254
    10a8:	ca 01       	movw	r24, r20
    10aa:	b9 01       	movw	r22, r18
    10ac:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <EEPROM_readByte>
    10b0:	80 e0       	ldi	r24, 0x00	; 0
    10b2:	90 e0       	ldi	r25, 0x00	; 0
    10b4:	a0 e2       	ldi	r26, 0x20	; 32
    10b6:	b1 e4       	ldi	r27, 0x41	; 65
    10b8:	8f a3       	std	Y+39, r24	; 0x27
    10ba:	98 a7       	std	Y+40, r25	; 0x28
    10bc:	a9 a7       	std	Y+41, r26	; 0x29
    10be:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10c0:	6f a1       	ldd	r22, Y+39	; 0x27
    10c2:	78 a5       	ldd	r23, Y+40	; 0x28
    10c4:	89 a5       	ldd	r24, Y+41	; 0x29
    10c6:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c8:	20 e0       	ldi	r18, 0x00	; 0
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	4a e7       	ldi	r20, 0x7A	; 122
    10ce:	53 e4       	ldi	r21, 0x43	; 67
    10d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	8b a3       	std	Y+35, r24	; 0x23
    10da:	9c a3       	std	Y+36, r25	; 0x24
    10dc:	ad a3       	std	Y+37, r26	; 0x25
    10de:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    10e0:	6b a1       	ldd	r22, Y+35	; 0x23
    10e2:	7c a1       	ldd	r23, Y+36	; 0x24
    10e4:	8d a1       	ldd	r24, Y+37	; 0x25
    10e6:	9e a1       	ldd	r25, Y+38	; 0x26
    10e8:	20 e0       	ldi	r18, 0x00	; 0
    10ea:	30 e0       	ldi	r19, 0x00	; 0
    10ec:	40 e8       	ldi	r20, 0x80	; 128
    10ee:	5f e3       	ldi	r21, 0x3F	; 63
    10f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10f4:	88 23       	and	r24, r24
    10f6:	2c f4       	brge	.+10     	; 0x1102 <check_door_pass+0xca>
		__ticks = 1;
    10f8:	81 e0       	ldi	r24, 0x01	; 1
    10fa:	90 e0       	ldi	r25, 0x00	; 0
    10fc:	9a a3       	std	Y+34, r25	; 0x22
    10fe:	89 a3       	std	Y+33, r24	; 0x21
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <check_door_pass+0x148>
	else if (__tmp > 65535)
    1102:	6b a1       	ldd	r22, Y+35	; 0x23
    1104:	7c a1       	ldd	r23, Y+36	; 0x24
    1106:	8d a1       	ldd	r24, Y+37	; 0x25
    1108:	9e a1       	ldd	r25, Y+38	; 0x26
    110a:	20 e0       	ldi	r18, 0x00	; 0
    110c:	3f ef       	ldi	r19, 0xFF	; 255
    110e:	4f e7       	ldi	r20, 0x7F	; 127
    1110:	57 e4       	ldi	r21, 0x47	; 71
    1112:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1116:	18 16       	cp	r1, r24
    1118:	4c f5       	brge	.+82     	; 0x116c <check_door_pass+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    111a:	6f a1       	ldd	r22, Y+39	; 0x27
    111c:	78 a5       	ldd	r23, Y+40	; 0x28
    111e:	89 a5       	ldd	r24, Y+41	; 0x29
    1120:	9a a5       	ldd	r25, Y+42	; 0x2a
    1122:	20 e0       	ldi	r18, 0x00	; 0
    1124:	30 e0       	ldi	r19, 0x00	; 0
    1126:	40 e2       	ldi	r20, 0x20	; 32
    1128:	51 e4       	ldi	r21, 0x41	; 65
    112a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112e:	dc 01       	movw	r26, r24
    1130:	cb 01       	movw	r24, r22
    1132:	bc 01       	movw	r22, r24
    1134:	cd 01       	movw	r24, r26
    1136:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    113a:	dc 01       	movw	r26, r24
    113c:	cb 01       	movw	r24, r22
    113e:	9a a3       	std	Y+34, r25	; 0x22
    1140:	89 a3       	std	Y+33, r24	; 0x21
    1142:	0f c0       	rjmp	.+30     	; 0x1162 <check_door_pass+0x12a>
    1144:	89 e1       	ldi	r24, 0x19	; 25
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	98 a3       	std	Y+32, r25	; 0x20
    114a:	8f 8f       	std	Y+31, r24	; 0x1f
    114c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    114e:	98 a1       	ldd	r25, Y+32	; 0x20
    1150:	01 97       	sbiw	r24, 0x01	; 1
    1152:	f1 f7       	brne	.-4      	; 0x1150 <check_door_pass+0x118>
    1154:	98 a3       	std	Y+32, r25	; 0x20
    1156:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1158:	89 a1       	ldd	r24, Y+33	; 0x21
    115a:	9a a1       	ldd	r25, Y+34	; 0x22
    115c:	01 97       	sbiw	r24, 0x01	; 1
    115e:	9a a3       	std	Y+34, r25	; 0x22
    1160:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1162:	89 a1       	ldd	r24, Y+33	; 0x21
    1164:	9a a1       	ldd	r25, Y+34	; 0x22
    1166:	00 97       	sbiw	r24, 0x00	; 0
    1168:	69 f7       	brne	.-38     	; 0x1144 <check_door_pass+0x10c>
    116a:	14 c0       	rjmp	.+40     	; 0x1194 <check_door_pass+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    116c:	6b a1       	ldd	r22, Y+35	; 0x23
    116e:	7c a1       	ldd	r23, Y+36	; 0x24
    1170:	8d a1       	ldd	r24, Y+37	; 0x25
    1172:	9e a1       	ldd	r25, Y+38	; 0x26
    1174:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1178:	dc 01       	movw	r26, r24
    117a:	cb 01       	movw	r24, r22
    117c:	9a a3       	std	Y+34, r25	; 0x22
    117e:	89 a3       	std	Y+33, r24	; 0x21
    1180:	89 a1       	ldd	r24, Y+33	; 0x21
    1182:	9a a1       	ldd	r25, Y+34	; 0x22
    1184:	9e 8f       	std	Y+30, r25	; 0x1e
    1186:	8d 8f       	std	Y+29, r24	; 0x1d
    1188:	8d 8d       	ldd	r24, Y+29	; 0x1d
    118a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    118c:	01 97       	sbiw	r24, 0x01	; 1
    118e:	f1 f7       	brne	.-4      	; 0x118c <check_door_pass+0x154>
    1190:	9e 8f       	std	Y+30, r25	; 0x1e
    1192:	8d 8f       	std	Y+29, r24	; 0x1d
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
		}

		for(i=0;i<5;i++)
    1194:	80 91 a0 01 	lds	r24, 0x01A0
    1198:	8f 5f       	subi	r24, 0xFF	; 255
    119a:	80 93 a0 01 	sts	0x01A0, r24
    119e:	80 91 a0 01 	lds	r24, 0x01A0
    11a2:	85 30       	cpi	r24, 0x05	; 5
    11a4:	08 f4       	brcc	.+2      	; 0x11a8 <check_door_pass+0x170>
    11a6:	73 cf       	rjmp	.-282    	; 0x108e <check_door_pass+0x56>
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array  is an address the first postion
			_delay_ms(10);
		}


		for(i=0;i<5;i++){
    11a8:	10 92 a0 01 	sts	0x01A0, r1
    11ac:	1a c0       	rjmp	.+52     	; 0x11e2 <check_door_pass+0x1aa>
			if(password_1[i]!=password_2[i])
    11ae:	80 91 a0 01 	lds	r24, 0x01A0
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	fc 01       	movw	r30, r24
    11b8:	e5 56       	subi	r30, 0x65	; 101
    11ba:	fe 4f       	sbci	r31, 0xFE	; 254
    11bc:	20 81       	ld	r18, Z
    11be:	80 91 a0 01 	lds	r24, 0x01A0
    11c2:	88 2f       	mov	r24, r24
    11c4:	90 e0       	ldi	r25, 0x00	; 0
    11c6:	fc 01       	movw	r30, r24
    11c8:	ef 55       	subi	r30, 0x5F	; 95
    11ca:	fe 4f       	sbci	r31, 0xFE	; 254
    11cc:	80 81       	ld	r24, Z
    11ce:	28 17       	cp	r18, r24
    11d0:	19 f0       	breq	.+6      	; 0x11d8 <check_door_pass+0x1a0>
			{

				password_state=Unmatched;
    11d2:	10 92 88 01 	sts	0x0188, r1
    11d6:	09 c0       	rjmp	.+18     	; 0x11ea <check_door_pass+0x1b2>
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array  is an address the first postion
			_delay_ms(10);
		}


		for(i=0;i<5;i++){
    11d8:	80 91 a0 01 	lds	r24, 0x01A0
    11dc:	8f 5f       	subi	r24, 0xFF	; 255
    11de:	80 93 a0 01 	sts	0x01A0, r24
    11e2:	80 91 a0 01 	lds	r24, 0x01A0
    11e6:	85 30       	cpi	r24, 0x05	; 5
    11e8:	10 f3       	brcs	.-60     	; 0x11ae <check_door_pass+0x176>

			}

		}

		while(UART_recieveByte()!=HMI_Ready);
    11ea:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    11ee:	8c 3a       	cpi	r24, 0xAC	; 172
    11f0:	e1 f7       	brne	.-8      	; 0x11ea <check_door_pass+0x1b2>
		UART_sendByte(password_state);
    11f2:	80 91 88 01 	lds	r24, 0x0188
    11f6:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>

		if(password_state==Matched)
    11fa:	80 91 88 01 	lds	r24, 0x0188
    11fe:	81 30       	cpi	r24, 0x01	; 1
    1200:	09 f0       	breq	.+2      	; 0x1204 <check_door_pass+0x1cc>
    1202:	ac c0       	rjmp	.+344    	; 0x135c <check_door_pass+0x324>
		{
			LCD_clearScreen();
    1204:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 4, "Matched");
    1208:	20 e6       	ldi	r18, 0x60	; 96
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	80 e0       	ldi	r24, 0x00	; 0
    120e:	64 e0       	ldi	r22, 0x04	; 4
    1210:	a9 01       	movw	r20, r18
    1212:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
    1216:	80 e0       	ldi	r24, 0x00	; 0
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	aa ef       	ldi	r26, 0xFA	; 250
    121c:	b3 e4       	ldi	r27, 0x43	; 67
    121e:	89 8f       	std	Y+25, r24	; 0x19
    1220:	9a 8f       	std	Y+26, r25	; 0x1a
    1222:	ab 8f       	std	Y+27, r26	; 0x1b
    1224:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1226:	69 8d       	ldd	r22, Y+25	; 0x19
    1228:	7a 8d       	ldd	r23, Y+26	; 0x1a
    122a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    122c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    122e:	20 e0       	ldi	r18, 0x00	; 0
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	4a e7       	ldi	r20, 0x7A	; 122
    1234:	53 e4       	ldi	r21, 0x43	; 67
    1236:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    123a:	dc 01       	movw	r26, r24
    123c:	cb 01       	movw	r24, r22
    123e:	8d 8b       	std	Y+21, r24	; 0x15
    1240:	9e 8b       	std	Y+22, r25	; 0x16
    1242:	af 8b       	std	Y+23, r26	; 0x17
    1244:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1246:	6d 89       	ldd	r22, Y+21	; 0x15
    1248:	7e 89       	ldd	r23, Y+22	; 0x16
    124a:	8f 89       	ldd	r24, Y+23	; 0x17
    124c:	98 8d       	ldd	r25, Y+24	; 0x18
    124e:	20 e0       	ldi	r18, 0x00	; 0
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	40 e8       	ldi	r20, 0x80	; 128
    1254:	5f e3       	ldi	r21, 0x3F	; 63
    1256:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    125a:	88 23       	and	r24, r24
    125c:	2c f4       	brge	.+10     	; 0x1268 <check_door_pass+0x230>
		__ticks = 1;
    125e:	81 e0       	ldi	r24, 0x01	; 1
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	9c 8b       	std	Y+20, r25	; 0x14
    1264:	8b 8b       	std	Y+19, r24	; 0x13
    1266:	3f c0       	rjmp	.+126    	; 0x12e6 <check_door_pass+0x2ae>
	else if (__tmp > 65535)
    1268:	6d 89       	ldd	r22, Y+21	; 0x15
    126a:	7e 89       	ldd	r23, Y+22	; 0x16
    126c:	8f 89       	ldd	r24, Y+23	; 0x17
    126e:	98 8d       	ldd	r25, Y+24	; 0x18
    1270:	20 e0       	ldi	r18, 0x00	; 0
    1272:	3f ef       	ldi	r19, 0xFF	; 255
    1274:	4f e7       	ldi	r20, 0x7F	; 127
    1276:	57 e4       	ldi	r21, 0x47	; 71
    1278:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    127c:	18 16       	cp	r1, r24
    127e:	4c f5       	brge	.+82     	; 0x12d2 <check_door_pass+0x29a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1280:	69 8d       	ldd	r22, Y+25	; 0x19
    1282:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1284:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1286:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1288:	20 e0       	ldi	r18, 0x00	; 0
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	40 e2       	ldi	r20, 0x20	; 32
    128e:	51 e4       	ldi	r21, 0x41	; 65
    1290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1294:	dc 01       	movw	r26, r24
    1296:	cb 01       	movw	r24, r22
    1298:	bc 01       	movw	r22, r24
    129a:	cd 01       	movw	r24, r26
    129c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a0:	dc 01       	movw	r26, r24
    12a2:	cb 01       	movw	r24, r22
    12a4:	9c 8b       	std	Y+20, r25	; 0x14
    12a6:	8b 8b       	std	Y+19, r24	; 0x13
    12a8:	0f c0       	rjmp	.+30     	; 0x12c8 <check_door_pass+0x290>
    12aa:	89 e1       	ldi	r24, 0x19	; 25
    12ac:	90 e0       	ldi	r25, 0x00	; 0
    12ae:	9a 8b       	std	Y+18, r25	; 0x12
    12b0:	89 8b       	std	Y+17, r24	; 0x11
    12b2:	89 89       	ldd	r24, Y+17	; 0x11
    12b4:	9a 89       	ldd	r25, Y+18	; 0x12
    12b6:	01 97       	sbiw	r24, 0x01	; 1
    12b8:	f1 f7       	brne	.-4      	; 0x12b6 <check_door_pass+0x27e>
    12ba:	9a 8b       	std	Y+18, r25	; 0x12
    12bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12be:	8b 89       	ldd	r24, Y+19	; 0x13
    12c0:	9c 89       	ldd	r25, Y+20	; 0x14
    12c2:	01 97       	sbiw	r24, 0x01	; 1
    12c4:	9c 8b       	std	Y+20, r25	; 0x14
    12c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12c8:	8b 89       	ldd	r24, Y+19	; 0x13
    12ca:	9c 89       	ldd	r25, Y+20	; 0x14
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	69 f7       	brne	.-38     	; 0x12aa <check_door_pass+0x272>
    12d0:	14 c0       	rjmp	.+40     	; 0x12fa <check_door_pass+0x2c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d2:	6d 89       	ldd	r22, Y+21	; 0x15
    12d4:	7e 89       	ldd	r23, Y+22	; 0x16
    12d6:	8f 89       	ldd	r24, Y+23	; 0x17
    12d8:	98 8d       	ldd	r25, Y+24	; 0x18
    12da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12de:	dc 01       	movw	r26, r24
    12e0:	cb 01       	movw	r24, r22
    12e2:	9c 8b       	std	Y+20, r25	; 0x14
    12e4:	8b 8b       	std	Y+19, r24	; 0x13
    12e6:	8b 89       	ldd	r24, Y+19	; 0x13
    12e8:	9c 89       	ldd	r25, Y+20	; 0x14
    12ea:	98 8b       	std	Y+16, r25	; 0x10
    12ec:	8f 87       	std	Y+15, r24	; 0x0f
    12ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    12f0:	98 89       	ldd	r25, Y+16	; 0x10
    12f2:	01 97       	sbiw	r24, 0x01	; 1
    12f4:	f1 f7       	brne	.-4      	; 0x12f2 <check_door_pass+0x2ba>
    12f6:	98 8b       	std	Y+16, r25	; 0x10
    12f8:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);


			g_ticks=0;
    12fa:	10 92 96 01 	sts	0x0196, r1
			DcMotor_Rotate(CW,100);
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	64 e6       	ldi	r22, 0x64	; 100
    1302:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <DcMotor_Rotate>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    1306:	8d e5       	ldi	r24, 0x5D	; 93
    1308:	9a e0       	ldi	r25, 0x0A	; 10
    130a:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <Timer1_setCallBack>
			while(g_ticks!=15);
    130e:	80 91 96 01 	lds	r24, 0x0196
    1312:	8f 30       	cpi	r24, 0x0F	; 15
    1314:	e1 f7       	brne	.-8      	; 0x130e <check_door_pass+0x2d6>

			g_ticks=0;
    1316:	10 92 96 01 	sts	0x0196, r1
			DcMotor_Rotate(STOP,0);
    131a:	82 e0       	ldi	r24, 0x02	; 2
    131c:	60 e0       	ldi	r22, 0x00	; 0
    131e:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <DcMotor_Rotate>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    1322:	8d e5       	ldi	r24, 0x5D	; 93
    1324:	9a e0       	ldi	r25, 0x0A	; 10
    1326:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <Timer1_setCallBack>
			while(g_ticks!=3);
    132a:	80 91 96 01 	lds	r24, 0x0196
    132e:	83 30       	cpi	r24, 0x03	; 3
    1330:	e1 f7       	brne	.-8      	; 0x132a <check_door_pass+0x2f2>

			g_ticks=0;
    1332:	10 92 96 01 	sts	0x0196, r1
			DcMotor_Rotate(ANTI_CW,100);
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	64 e6       	ldi	r22, 0x64	; 100
    133a:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <DcMotor_Rotate>
			Timer1_setCallBack(TIMER_ISR_COUNTER);
    133e:	8d e5       	ldi	r24, 0x5D	; 93
    1340:	9a e0       	ldi	r25, 0x0A	; 10
    1342:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <Timer1_setCallBack>
			while(g_ticks!=15);
    1346:	80 91 96 01 	lds	r24, 0x0196
    134a:	8f 30       	cpi	r24, 0x0F	; 15
    134c:	e1 f7       	brne	.-8      	; 0x1346 <check_door_pass+0x30e>
			DcMotor_Rotate(STOP,0);
    134e:	82 e0       	ldi	r24, 0x02	; 2
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	0e 94 b1 16 	call	0x2d62	; 0x2d62 <DcMotor_Rotate>
			Timer1_deInit();
    1356:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <Timer1_deInit>
    135a:	85 c0       	rjmp	.+266    	; 0x1466 <check_door_pass+0x42e>

		}

		else{

			LCD_clearScreen();
    135c:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 4, "UNMatched");
    1360:	28 e6       	ldi	r18, 0x68	; 104
    1362:	30 e0       	ldi	r19, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	64 e0       	ldi	r22, 0x04	; 4
    1368:	a9 01       	movw	r20, r18
    136a:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	aa ef       	ldi	r26, 0xFA	; 250
    1374:	b3 e4       	ldi	r27, 0x43	; 67
    1376:	8b 87       	std	Y+11, r24	; 0x0b
    1378:	9c 87       	std	Y+12, r25	; 0x0c
    137a:	ad 87       	std	Y+13, r26	; 0x0d
    137c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    137e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1380:	7c 85       	ldd	r23, Y+12	; 0x0c
    1382:	8d 85       	ldd	r24, Y+13	; 0x0d
    1384:	9e 85       	ldd	r25, Y+14	; 0x0e
    1386:	20 e0       	ldi	r18, 0x00	; 0
    1388:	30 e0       	ldi	r19, 0x00	; 0
    138a:	4a e7       	ldi	r20, 0x7A	; 122
    138c:	53 e4       	ldi	r21, 0x43	; 67
    138e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1392:	dc 01       	movw	r26, r24
    1394:	cb 01       	movw	r24, r22
    1396:	8f 83       	std	Y+7, r24	; 0x07
    1398:	98 87       	std	Y+8, r25	; 0x08
    139a:	a9 87       	std	Y+9, r26	; 0x09
    139c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    139e:	6f 81       	ldd	r22, Y+7	; 0x07
    13a0:	78 85       	ldd	r23, Y+8	; 0x08
    13a2:	89 85       	ldd	r24, Y+9	; 0x09
    13a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13a6:	20 e0       	ldi	r18, 0x00	; 0
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	40 e8       	ldi	r20, 0x80	; 128
    13ac:	5f e3       	ldi	r21, 0x3F	; 63
    13ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13b2:	88 23       	and	r24, r24
    13b4:	2c f4       	brge	.+10     	; 0x13c0 <check_door_pass+0x388>
		__ticks = 1;
    13b6:	81 e0       	ldi	r24, 0x01	; 1
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	9e 83       	std	Y+6, r25	; 0x06
    13bc:	8d 83       	std	Y+5, r24	; 0x05
    13be:	3f c0       	rjmp	.+126    	; 0x143e <check_door_pass+0x406>
	else if (__tmp > 65535)
    13c0:	6f 81       	ldd	r22, Y+7	; 0x07
    13c2:	78 85       	ldd	r23, Y+8	; 0x08
    13c4:	89 85       	ldd	r24, Y+9	; 0x09
    13c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13c8:	20 e0       	ldi	r18, 0x00	; 0
    13ca:	3f ef       	ldi	r19, 0xFF	; 255
    13cc:	4f e7       	ldi	r20, 0x7F	; 127
    13ce:	57 e4       	ldi	r21, 0x47	; 71
    13d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13d4:	18 16       	cp	r1, r24
    13d6:	4c f5       	brge	.+82     	; 0x142a <check_door_pass+0x3f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13da:	7c 85       	ldd	r23, Y+12	; 0x0c
    13dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13de:	9e 85       	ldd	r25, Y+14	; 0x0e
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e2       	ldi	r20, 0x20	; 32
    13e6:	51 e4       	ldi	r21, 0x41	; 65
    13e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ec:	dc 01       	movw	r26, r24
    13ee:	cb 01       	movw	r24, r22
    13f0:	bc 01       	movw	r22, r24
    13f2:	cd 01       	movw	r24, r26
    13f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13f8:	dc 01       	movw	r26, r24
    13fa:	cb 01       	movw	r24, r22
    13fc:	9e 83       	std	Y+6, r25	; 0x06
    13fe:	8d 83       	std	Y+5, r24	; 0x05
    1400:	0f c0       	rjmp	.+30     	; 0x1420 <check_door_pass+0x3e8>
    1402:	89 e1       	ldi	r24, 0x19	; 25
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	9c 83       	std	Y+4, r25	; 0x04
    1408:	8b 83       	std	Y+3, r24	; 0x03
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	9c 81       	ldd	r25, Y+4	; 0x04
    140e:	01 97       	sbiw	r24, 0x01	; 1
    1410:	f1 f7       	brne	.-4      	; 0x140e <check_door_pass+0x3d6>
    1412:	9c 83       	std	Y+4, r25	; 0x04
    1414:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1416:	8d 81       	ldd	r24, Y+5	; 0x05
    1418:	9e 81       	ldd	r25, Y+6	; 0x06
    141a:	01 97       	sbiw	r24, 0x01	; 1
    141c:	9e 83       	std	Y+6, r25	; 0x06
    141e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1420:	8d 81       	ldd	r24, Y+5	; 0x05
    1422:	9e 81       	ldd	r25, Y+6	; 0x06
    1424:	00 97       	sbiw	r24, 0x00	; 0
    1426:	69 f7       	brne	.-38     	; 0x1402 <check_door_pass+0x3ca>
    1428:	14 c0       	rjmp	.+40     	; 0x1452 <check_door_pass+0x41a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    142a:	6f 81       	ldd	r22, Y+7	; 0x07
    142c:	78 85       	ldd	r23, Y+8	; 0x08
    142e:	89 85       	ldd	r24, Y+9	; 0x09
    1430:	9a 85       	ldd	r25, Y+10	; 0x0a
    1432:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	9e 83       	std	Y+6, r25	; 0x06
    143c:	8d 83       	std	Y+5, r24	; 0x05
    143e:	8d 81       	ldd	r24, Y+5	; 0x05
    1440:	9e 81       	ldd	r25, Y+6	; 0x06
    1442:	9a 83       	std	Y+2, r25	; 0x02
    1444:	89 83       	std	Y+1, r24	; 0x01
    1446:	89 81       	ldd	r24, Y+1	; 0x01
    1448:	9a 81       	ldd	r25, Y+2	; 0x02
    144a:	01 97       	sbiw	r24, 0x01	; 1
    144c:	f1 f7       	brne	.-4      	; 0x144a <check_door_pass+0x412>
    144e:	9a 83       	std	Y+2, r25	; 0x02
    1450:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(500);

			g_trials++;
    1452:	80 91 98 01 	lds	r24, 0x0198
    1456:	8f 5f       	subi	r24, 0xFF	; 255
    1458:	80 93 98 01 	sts	0x0198, r24





	}while(g_trials<3);
    145c:	80 91 98 01 	lds	r24, 0x0198
    1460:	83 30       	cpi	r24, 0x03	; 3
    1462:	08 f4       	brcc	.+2      	; 0x1466 <check_door_pass+0x42e>
    1464:	f5 cd       	rjmp	.-1046   	; 0x1050 <check_door_pass+0x18>

	if(g_trials==3){
    1466:	80 91 98 01 	lds	r24, 0x0198
    146a:	83 30       	cpi	r24, 0x03	; 3
    146c:	d9 f4       	brne	.+54     	; 0x14a4 <check_door_pass+0x46c>
		g_ticks=0;
    146e:	10 92 96 01 	sts	0x0196, r1
		LCD_clearScreen();
    1472:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 2, "!!!!ERROR!!!!");
    1476:	22 e7       	ldi	r18, 0x72	; 114
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	80 e0       	ldi	r24, 0x00	; 0
    147c:	62 e0       	ldi	r22, 0x02	; 2
    147e:	a9 01       	movw	r20, r18
    1480:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
		Buzzer_on();
    1484:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <Buzzer_on>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
    1488:	8d e5       	ldi	r24, 0x5D	; 93
    148a:	9a e0       	ldi	r25, 0x0A	; 10
    148c:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <Timer1_setCallBack>
		while(g_ticks!=60);
    1490:	80 91 96 01 	lds	r24, 0x0196
    1494:	8c 33       	cpi	r24, 0x3C	; 60
    1496:	e1 f7       	brne	.-8      	; 0x1490 <check_door_pass+0x458>
		Timer1_deInit();
    1498:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <Timer1_deInit>
		Buzzer_off();
    149c:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Buzzer_off>
		g_trials=0;
    14a0:	10 92 98 01 	sts	0x0198, r1





}
    14a4:	aa 96       	adiw	r28, 0x2a	; 42
    14a6:	0f b6       	in	r0, 0x3f	; 63
    14a8:	f8 94       	cli
    14aa:	de bf       	out	0x3e, r29	; 62
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	cd bf       	out	0x3d, r28	; 61
    14b0:	cf 91       	pop	r28
    14b2:	df 91       	pop	r29
    14b4:	1f 91       	pop	r17
    14b6:	0f 91       	pop	r16
    14b8:	08 95       	ret

000014ba <TIMER_ISR_COUNTER>:




void TIMER_ISR_COUNTER(void)
{
    14ba:	df 93       	push	r29
    14bc:	cf 93       	push	r28
    14be:	cd b7       	in	r28, 0x3d	; 61
    14c0:	de b7       	in	r29, 0x3e	; 62
	g_ticks++;
    14c2:	80 91 96 01 	lds	r24, 0x0196
    14c6:	8f 5f       	subi	r24, 0xFF	; 255
    14c8:	80 93 96 01 	sts	0x0196, r24
}
    14cc:	cf 91       	pop	r28
    14ce:	df 91       	pop	r29
    14d0:	08 95       	ret

000014d2 <Change_password>:
 *
 */


void Change_password(void)
{
    14d2:	0f 93       	push	r16
    14d4:	1f 93       	push	r17
    14d6:	df 93       	push	r29
    14d8:	cf 93       	push	r28
    14da:	cd b7       	in	r28, 0x3d	; 61
    14dc:	de b7       	in	r29, 0x3e	; 62
    14de:	aa 97       	sbiw	r28, 0x2a	; 42
    14e0:	0f b6       	in	r0, 0x3f	; 63
    14e2:	f8 94       	cli
    14e4:	de bf       	out	0x3e, r29	; 62
    14e6:	0f be       	out	0x3f, r0	; 63
    14e8:	cd bf       	out	0x3d, r28	; 61
	do{

		password_state=Matched; // to be sure that the flag is matched as if it changed so the pass is not identical
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	80 93 88 01 	sts	0x0188, r24

		UART_sendByte(CONTROL_Ready);
    14f0:	8a ec       	ldi	r24, 0xCA	; 202
    14f2:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		for(i=0;i<5;i++)
    14f6:	10 92 a0 01 	sts	0x01A0, r1
    14fa:	0f c0       	rjmp	.+30     	; 0x151a <Change_password+0x48>
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
    14fc:	80 91 a0 01 	lds	r24, 0x01A0
    1500:	08 2f       	mov	r16, r24
    1502:	10 e0       	ldi	r17, 0x00	; 0
    1504:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    1508:	f8 01       	movw	r30, r16
    150a:	e5 56       	subi	r30, 0x65	; 101
    150c:	fe 4f       	sbci	r31, 0xFE	; 254
    150e:	80 83       	st	Z, r24
	do{

		password_state=Matched; // to be sure that the flag is matched as if it changed so the pass is not identical

		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
    1510:	80 91 a0 01 	lds	r24, 0x01A0
    1514:	8f 5f       	subi	r24, 0xFF	; 255
    1516:	80 93 a0 01 	sts	0x01A0, r24
    151a:	80 91 a0 01 	lds	r24, 0x01A0
    151e:	85 30       	cpi	r24, 0x05	; 5
    1520:	68 f3       	brcs	.-38     	; 0x14fc <Change_password+0x2a>
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
		}

		for(i=0;i<5;i++)
    1522:	10 92 a0 01 	sts	0x01A0, r1
    1526:	88 c0       	rjmp	.+272    	; 0x1638 <Change_password+0x166>
		{
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array is an address the first postion
    1528:	80 91 a0 01 	lds	r24, 0x01A0
    152c:	88 2f       	mov	r24, r24
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	01 96       	adiw	r24, 0x01	; 1
    1532:	ac 01       	movw	r20, r24
    1534:	80 91 a0 01 	lds	r24, 0x01A0
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	9c 01       	movw	r18, r24
    153e:	2f 55       	subi	r18, 0x5F	; 95
    1540:	3e 4f       	sbci	r19, 0xFE	; 254
    1542:	ca 01       	movw	r24, r20
    1544:	b9 01       	movw	r22, r18
    1546:	0e 94 cc 0d 	call	0x1b98	; 0x1b98 <EEPROM_readByte>
    154a:	80 e0       	ldi	r24, 0x00	; 0
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	a8 e4       	ldi	r26, 0x48	; 72
    1550:	b2 e4       	ldi	r27, 0x42	; 66
    1552:	8f a3       	std	Y+39, r24	; 0x27
    1554:	98 a7       	std	Y+40, r25	; 0x28
    1556:	a9 a7       	std	Y+41, r26	; 0x29
    1558:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    155a:	6f a1       	ldd	r22, Y+39	; 0x27
    155c:	78 a5       	ldd	r23, Y+40	; 0x28
    155e:	89 a5       	ldd	r24, Y+41	; 0x29
    1560:	9a a5       	ldd	r25, Y+42	; 0x2a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	4a e7       	ldi	r20, 0x7A	; 122
    1568:	53 e4       	ldi	r21, 0x43	; 67
    156a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	8b a3       	std	Y+35, r24	; 0x23
    1574:	9c a3       	std	Y+36, r25	; 0x24
    1576:	ad a3       	std	Y+37, r26	; 0x25
    1578:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    157a:	6b a1       	ldd	r22, Y+35	; 0x23
    157c:	7c a1       	ldd	r23, Y+36	; 0x24
    157e:	8d a1       	ldd	r24, Y+37	; 0x25
    1580:	9e a1       	ldd	r25, Y+38	; 0x26
    1582:	20 e0       	ldi	r18, 0x00	; 0
    1584:	30 e0       	ldi	r19, 0x00	; 0
    1586:	40 e8       	ldi	r20, 0x80	; 128
    1588:	5f e3       	ldi	r21, 0x3F	; 63
    158a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    158e:	88 23       	and	r24, r24
    1590:	2c f4       	brge	.+10     	; 0x159c <Change_password+0xca>
		__ticks = 1;
    1592:	81 e0       	ldi	r24, 0x01	; 1
    1594:	90 e0       	ldi	r25, 0x00	; 0
    1596:	9a a3       	std	Y+34, r25	; 0x22
    1598:	89 a3       	std	Y+33, r24	; 0x21
    159a:	3f c0       	rjmp	.+126    	; 0x161a <Change_password+0x148>
	else if (__tmp > 65535)
    159c:	6b a1       	ldd	r22, Y+35	; 0x23
    159e:	7c a1       	ldd	r23, Y+36	; 0x24
    15a0:	8d a1       	ldd	r24, Y+37	; 0x25
    15a2:	9e a1       	ldd	r25, Y+38	; 0x26
    15a4:	20 e0       	ldi	r18, 0x00	; 0
    15a6:	3f ef       	ldi	r19, 0xFF	; 255
    15a8:	4f e7       	ldi	r20, 0x7F	; 127
    15aa:	57 e4       	ldi	r21, 0x47	; 71
    15ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15b0:	18 16       	cp	r1, r24
    15b2:	4c f5       	brge	.+82     	; 0x1606 <Change_password+0x134>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15b4:	6f a1       	ldd	r22, Y+39	; 0x27
    15b6:	78 a5       	ldd	r23, Y+40	; 0x28
    15b8:	89 a5       	ldd	r24, Y+41	; 0x29
    15ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    15bc:	20 e0       	ldi	r18, 0x00	; 0
    15be:	30 e0       	ldi	r19, 0x00	; 0
    15c0:	40 e2       	ldi	r20, 0x20	; 32
    15c2:	51 e4       	ldi	r21, 0x41	; 65
    15c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c8:	dc 01       	movw	r26, r24
    15ca:	cb 01       	movw	r24, r22
    15cc:	bc 01       	movw	r22, r24
    15ce:	cd 01       	movw	r24, r26
    15d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	9a a3       	std	Y+34, r25	; 0x22
    15da:	89 a3       	std	Y+33, r24	; 0x21
    15dc:	0f c0       	rjmp	.+30     	; 0x15fc <Change_password+0x12a>
    15de:	89 e1       	ldi	r24, 0x19	; 25
    15e0:	90 e0       	ldi	r25, 0x00	; 0
    15e2:	98 a3       	std	Y+32, r25	; 0x20
    15e4:	8f 8f       	std	Y+31, r24	; 0x1f
    15e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    15e8:	98 a1       	ldd	r25, Y+32	; 0x20
    15ea:	01 97       	sbiw	r24, 0x01	; 1
    15ec:	f1 f7       	brne	.-4      	; 0x15ea <Change_password+0x118>
    15ee:	98 a3       	std	Y+32, r25	; 0x20
    15f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15f2:	89 a1       	ldd	r24, Y+33	; 0x21
    15f4:	9a a1       	ldd	r25, Y+34	; 0x22
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	9a a3       	std	Y+34, r25	; 0x22
    15fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15fc:	89 a1       	ldd	r24, Y+33	; 0x21
    15fe:	9a a1       	ldd	r25, Y+34	; 0x22
    1600:	00 97       	sbiw	r24, 0x00	; 0
    1602:	69 f7       	brne	.-38     	; 0x15de <Change_password+0x10c>
    1604:	14 c0       	rjmp	.+40     	; 0x162e <Change_password+0x15c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1606:	6b a1       	ldd	r22, Y+35	; 0x23
    1608:	7c a1       	ldd	r23, Y+36	; 0x24
    160a:	8d a1       	ldd	r24, Y+37	; 0x25
    160c:	9e a1       	ldd	r25, Y+38	; 0x26
    160e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1612:	dc 01       	movw	r26, r24
    1614:	cb 01       	movw	r24, r22
    1616:	9a a3       	std	Y+34, r25	; 0x22
    1618:	89 a3       	std	Y+33, r24	; 0x21
    161a:	89 a1       	ldd	r24, Y+33	; 0x21
    161c:	9a a1       	ldd	r25, Y+34	; 0x22
    161e:	9e 8f       	std	Y+30, r25	; 0x1e
    1620:	8d 8f       	std	Y+29, r24	; 0x1d
    1622:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1624:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1626:	01 97       	sbiw	r24, 0x01	; 1
    1628:	f1 f7       	brne	.-4      	; 0x1626 <Change_password+0x154>
    162a:	9e 8f       	std	Y+30, r25	; 0x1e
    162c:	8d 8f       	std	Y+29, r24	; 0x1d
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two array to minimize the num of variables*/
		}

		for(i=0;i<5;i++)
    162e:	80 91 a0 01 	lds	r24, 0x01A0
    1632:	8f 5f       	subi	r24, 0xFF	; 255
    1634:	80 93 a0 01 	sts	0x01A0, r24
    1638:	80 91 a0 01 	lds	r24, 0x01A0
    163c:	85 30       	cpi	r24, 0x05	; 5
    163e:	08 f4       	brcc	.+2      	; 0x1642 <Change_password+0x170>
    1640:	73 cf       	rjmp	.-282    	; 0x1528 <Change_password+0x56>
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array is an address the first postion
			_delay_ms(50);
		}


		for(i=0;i<5;i++){
    1642:	10 92 a0 01 	sts	0x01A0, r1
    1646:	34 c0       	rjmp	.+104    	; 0x16b0 <Change_password+0x1de>
			if(password_1[i]!=password_2[i])
    1648:	80 91 a0 01 	lds	r24, 0x01A0
    164c:	88 2f       	mov	r24, r24
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	fc 01       	movw	r30, r24
    1652:	e5 56       	subi	r30, 0x65	; 101
    1654:	fe 4f       	sbci	r31, 0xFE	; 254
    1656:	20 81       	ld	r18, Z
    1658:	80 91 a0 01 	lds	r24, 0x01A0
    165c:	88 2f       	mov	r24, r24
    165e:	90 e0       	ldi	r25, 0x00	; 0
    1660:	fc 01       	movw	r30, r24
    1662:	ef 55       	subi	r30, 0x5F	; 95
    1664:	fe 4f       	sbci	r31, 0xFE	; 254
    1666:	80 81       	ld	r24, Z
    1668:	28 17       	cp	r18, r24
    166a:	19 f0       	breq	.+6      	; 0x1672 <Change_password+0x1a0>
			{
				//g_matching_flag=0;
				password_state=Unmatched;
    166c:	10 92 88 01 	sts	0x0188, r1
    1670:	23 c0       	rjmp	.+70     	; 0x16b8 <Change_password+0x1e6>
				break;

			}

			LCD_clearScreen();
    1672:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
			for(i=0;i<5;i++)
    1676:	10 92 a0 01 	sts	0x01A0, r1
    167a:	11 c0       	rjmp	.+34     	; 0x169e <Change_password+0x1cc>
			{LCD_intgerToString(password_2[i]);
    167c:	80 91 a0 01 	lds	r24, 0x01A0
    1680:	88 2f       	mov	r24, r24
    1682:	90 e0       	ldi	r25, 0x00	; 0
    1684:	fc 01       	movw	r30, r24
    1686:	ef 55       	subi	r30, 0x5F	; 95
    1688:	fe 4f       	sbci	r31, 0xFE	; 254
    168a:	80 81       	ld	r24, Z
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <LCD_intgerToString>
				break;

			}

			LCD_clearScreen();
			for(i=0;i<5;i++)
    1694:	80 91 a0 01 	lds	r24, 0x01A0
    1698:	8f 5f       	subi	r24, 0xFF	; 255
    169a:	80 93 a0 01 	sts	0x01A0, r24
    169e:	80 91 a0 01 	lds	r24, 0x01A0
    16a2:	85 30       	cpi	r24, 0x05	; 5
    16a4:	58 f3       	brcs	.-42     	; 0x167c <Change_password+0x1aa>
			EEPROM_readByte(0x01+i, password_2+i);//the name of the array is an address the first postion
			_delay_ms(50);
		}


		for(i=0;i<5;i++){
    16a6:	80 91 a0 01 	lds	r24, 0x01A0
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 a0 01 	sts	0x01A0, r24
    16b0:	80 91 a0 01 	lds	r24, 0x01A0
    16b4:	85 30       	cpi	r24, 0x05	; 5
    16b6:	40 f2       	brcs	.-112    	; 0x1648 <Change_password+0x176>

			}

		}

		while(UART_recieveByte()!=HMI_Ready);
    16b8:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    16bc:	8c 3a       	cpi	r24, 0xAC	; 172
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <Change_password+0x1e6>
		UART_sendByte(password_state);
    16c0:	80 91 88 01 	lds	r24, 0x0188
    16c4:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>

		if(password_state==Matched)
    16c8:	80 91 88 01 	lds	r24, 0x0188
    16cc:	81 30       	cpi	r24, 0x01	; 1
    16ce:	09 f0       	breq	.+2      	; 0x16d2 <Change_password+0x200>
    16d0:	7e c0       	rjmp	.+252    	; 0x17ce <Change_password+0x2fc>
		{

			LCD_clearScreen();
    16d2:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 4, "Matched");
    16d6:	20 e6       	ldi	r18, 0x60	; 96
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	80 e0       	ldi	r24, 0x00	; 0
    16dc:	64 e0       	ldi	r22, 0x04	; 4
    16de:	a9 01       	movw	r20, r18
    16e0:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
    16e4:	80 e0       	ldi	r24, 0x00	; 0
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	aa ef       	ldi	r26, 0xFA	; 250
    16ea:	b3 e4       	ldi	r27, 0x43	; 67
    16ec:	89 8f       	std	Y+25, r24	; 0x19
    16ee:	9a 8f       	std	Y+26, r25	; 0x1a
    16f0:	ab 8f       	std	Y+27, r26	; 0x1b
    16f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16f4:	69 8d       	ldd	r22, Y+25	; 0x19
    16f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    16f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    16fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    16fc:	20 e0       	ldi	r18, 0x00	; 0
    16fe:	30 e0       	ldi	r19, 0x00	; 0
    1700:	4a e7       	ldi	r20, 0x7A	; 122
    1702:	53 e4       	ldi	r21, 0x43	; 67
    1704:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1708:	dc 01       	movw	r26, r24
    170a:	cb 01       	movw	r24, r22
    170c:	8d 8b       	std	Y+21, r24	; 0x15
    170e:	9e 8b       	std	Y+22, r25	; 0x16
    1710:	af 8b       	std	Y+23, r26	; 0x17
    1712:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1714:	6d 89       	ldd	r22, Y+21	; 0x15
    1716:	7e 89       	ldd	r23, Y+22	; 0x16
    1718:	8f 89       	ldd	r24, Y+23	; 0x17
    171a:	98 8d       	ldd	r25, Y+24	; 0x18
    171c:	20 e0       	ldi	r18, 0x00	; 0
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	40 e8       	ldi	r20, 0x80	; 128
    1722:	5f e3       	ldi	r21, 0x3F	; 63
    1724:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1728:	88 23       	and	r24, r24
    172a:	2c f4       	brge	.+10     	; 0x1736 <Change_password+0x264>
		__ticks = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	9c 8b       	std	Y+20, r25	; 0x14
    1732:	8b 8b       	std	Y+19, r24	; 0x13
    1734:	3f c0       	rjmp	.+126    	; 0x17b4 <Change_password+0x2e2>
	else if (__tmp > 65535)
    1736:	6d 89       	ldd	r22, Y+21	; 0x15
    1738:	7e 89       	ldd	r23, Y+22	; 0x16
    173a:	8f 89       	ldd	r24, Y+23	; 0x17
    173c:	98 8d       	ldd	r25, Y+24	; 0x18
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	3f ef       	ldi	r19, 0xFF	; 255
    1742:	4f e7       	ldi	r20, 0x7F	; 127
    1744:	57 e4       	ldi	r21, 0x47	; 71
    1746:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    174a:	18 16       	cp	r1, r24
    174c:	4c f5       	brge	.+82     	; 0x17a0 <Change_password+0x2ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    174e:	69 8d       	ldd	r22, Y+25	; 0x19
    1750:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1752:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1754:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	40 e2       	ldi	r20, 0x20	; 32
    175c:	51 e4       	ldi	r21, 0x41	; 65
    175e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	bc 01       	movw	r22, r24
    1768:	cd 01       	movw	r24, r26
    176a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	9c 8b       	std	Y+20, r25	; 0x14
    1774:	8b 8b       	std	Y+19, r24	; 0x13
    1776:	0f c0       	rjmp	.+30     	; 0x1796 <Change_password+0x2c4>
    1778:	89 e1       	ldi	r24, 0x19	; 25
    177a:	90 e0       	ldi	r25, 0x00	; 0
    177c:	9a 8b       	std	Y+18, r25	; 0x12
    177e:	89 8b       	std	Y+17, r24	; 0x11
    1780:	89 89       	ldd	r24, Y+17	; 0x11
    1782:	9a 89       	ldd	r25, Y+18	; 0x12
    1784:	01 97       	sbiw	r24, 0x01	; 1
    1786:	f1 f7       	brne	.-4      	; 0x1784 <Change_password+0x2b2>
    1788:	9a 8b       	std	Y+18, r25	; 0x12
    178a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    178c:	8b 89       	ldd	r24, Y+19	; 0x13
    178e:	9c 89       	ldd	r25, Y+20	; 0x14
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	9c 8b       	std	Y+20, r25	; 0x14
    1794:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1796:	8b 89       	ldd	r24, Y+19	; 0x13
    1798:	9c 89       	ldd	r25, Y+20	; 0x14
    179a:	00 97       	sbiw	r24, 0x00	; 0
    179c:	69 f7       	brne	.-38     	; 0x1778 <Change_password+0x2a6>
    179e:	14 c0       	rjmp	.+40     	; 0x17c8 <Change_password+0x2f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17a0:	6d 89       	ldd	r22, Y+21	; 0x15
    17a2:	7e 89       	ldd	r23, Y+22	; 0x16
    17a4:	8f 89       	ldd	r24, Y+23	; 0x17
    17a6:	98 8d       	ldd	r25, Y+24	; 0x18
    17a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17ac:	dc 01       	movw	r26, r24
    17ae:	cb 01       	movw	r24, r22
    17b0:	9c 8b       	std	Y+20, r25	; 0x14
    17b2:	8b 8b       	std	Y+19, r24	; 0x13
    17b4:	8b 89       	ldd	r24, Y+19	; 0x13
    17b6:	9c 89       	ldd	r25, Y+20	; 0x14
    17b8:	98 8b       	std	Y+16, r25	; 0x10
    17ba:	8f 87       	std	Y+15, r24	; 0x0f
    17bc:	8f 85       	ldd	r24, Y+15	; 0x0f
    17be:	98 89       	ldd	r25, Y+16	; 0x10
    17c0:	01 97       	sbiw	r24, 0x01	; 1
    17c2:	f1 f7       	brne	.-4      	; 0x17c0 <Change_password+0x2ee>
    17c4:	98 8b       	std	Y+16, r25	; 0x10
    17c6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(500);

			recive_password();
    17c8:	0e 94 d0 06 	call	0xda0	; 0xda0 <recive_password>
    17cc:	85 c0       	rjmp	.+266    	; 0x18d8 <Change_password+0x406>
		{


		}

		LCD_clearScreen();
    17ce:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 4, "UNMatched");
    17d2:	28 e6       	ldi	r18, 0x68	; 104
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	80 e0       	ldi	r24, 0x00	; 0
    17d8:	64 e0       	ldi	r22, 0x04	; 4
    17da:	a9 01       	movw	r20, r18
    17dc:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
    17e0:	80 e0       	ldi	r24, 0x00	; 0
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	aa ef       	ldi	r26, 0xFA	; 250
    17e6:	b3 e4       	ldi	r27, 0x43	; 67
    17e8:	8b 87       	std	Y+11, r24	; 0x0b
    17ea:	9c 87       	std	Y+12, r25	; 0x0c
    17ec:	ad 87       	std	Y+13, r26	; 0x0d
    17ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    17f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    17f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    17f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    17f8:	20 e0       	ldi	r18, 0x00	; 0
    17fa:	30 e0       	ldi	r19, 0x00	; 0
    17fc:	4a e7       	ldi	r20, 0x7A	; 122
    17fe:	53 e4       	ldi	r21, 0x43	; 67
    1800:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1804:	dc 01       	movw	r26, r24
    1806:	cb 01       	movw	r24, r22
    1808:	8f 83       	std	Y+7, r24	; 0x07
    180a:	98 87       	std	Y+8, r25	; 0x08
    180c:	a9 87       	std	Y+9, r26	; 0x09
    180e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1810:	6f 81       	ldd	r22, Y+7	; 0x07
    1812:	78 85       	ldd	r23, Y+8	; 0x08
    1814:	89 85       	ldd	r24, Y+9	; 0x09
    1816:	9a 85       	ldd	r25, Y+10	; 0x0a
    1818:	20 e0       	ldi	r18, 0x00	; 0
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	40 e8       	ldi	r20, 0x80	; 128
    181e:	5f e3       	ldi	r21, 0x3F	; 63
    1820:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1824:	88 23       	and	r24, r24
    1826:	2c f4       	brge	.+10     	; 0x1832 <Change_password+0x360>
		__ticks = 1;
    1828:	81 e0       	ldi	r24, 0x01	; 1
    182a:	90 e0       	ldi	r25, 0x00	; 0
    182c:	9e 83       	std	Y+6, r25	; 0x06
    182e:	8d 83       	std	Y+5, r24	; 0x05
    1830:	3f c0       	rjmp	.+126    	; 0x18b0 <Change_password+0x3de>
	else if (__tmp > 65535)
    1832:	6f 81       	ldd	r22, Y+7	; 0x07
    1834:	78 85       	ldd	r23, Y+8	; 0x08
    1836:	89 85       	ldd	r24, Y+9	; 0x09
    1838:	9a 85       	ldd	r25, Y+10	; 0x0a
    183a:	20 e0       	ldi	r18, 0x00	; 0
    183c:	3f ef       	ldi	r19, 0xFF	; 255
    183e:	4f e7       	ldi	r20, 0x7F	; 127
    1840:	57 e4       	ldi	r21, 0x47	; 71
    1842:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1846:	18 16       	cp	r1, r24
    1848:	4c f5       	brge	.+82     	; 0x189c <Change_password+0x3ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    184a:	6b 85       	ldd	r22, Y+11	; 0x0b
    184c:	7c 85       	ldd	r23, Y+12	; 0x0c
    184e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1850:	9e 85       	ldd	r25, Y+14	; 0x0e
    1852:	20 e0       	ldi	r18, 0x00	; 0
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	40 e2       	ldi	r20, 0x20	; 32
    1858:	51 e4       	ldi	r21, 0x41	; 65
    185a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	bc 01       	movw	r22, r24
    1864:	cd 01       	movw	r24, r26
    1866:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    186a:	dc 01       	movw	r26, r24
    186c:	cb 01       	movw	r24, r22
    186e:	9e 83       	std	Y+6, r25	; 0x06
    1870:	8d 83       	std	Y+5, r24	; 0x05
    1872:	0f c0       	rjmp	.+30     	; 0x1892 <Change_password+0x3c0>
    1874:	89 e1       	ldi	r24, 0x19	; 25
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	9c 83       	std	Y+4, r25	; 0x04
    187a:	8b 83       	std	Y+3, r24	; 0x03
    187c:	8b 81       	ldd	r24, Y+3	; 0x03
    187e:	9c 81       	ldd	r25, Y+4	; 0x04
    1880:	01 97       	sbiw	r24, 0x01	; 1
    1882:	f1 f7       	brne	.-4      	; 0x1880 <Change_password+0x3ae>
    1884:	9c 83       	std	Y+4, r25	; 0x04
    1886:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1888:	8d 81       	ldd	r24, Y+5	; 0x05
    188a:	9e 81       	ldd	r25, Y+6	; 0x06
    188c:	01 97       	sbiw	r24, 0x01	; 1
    188e:	9e 83       	std	Y+6, r25	; 0x06
    1890:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1892:	8d 81       	ldd	r24, Y+5	; 0x05
    1894:	9e 81       	ldd	r25, Y+6	; 0x06
    1896:	00 97       	sbiw	r24, 0x00	; 0
    1898:	69 f7       	brne	.-38     	; 0x1874 <Change_password+0x3a2>
    189a:	14 c0       	rjmp	.+40     	; 0x18c4 <Change_password+0x3f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    189c:	6f 81       	ldd	r22, Y+7	; 0x07
    189e:	78 85       	ldd	r23, Y+8	; 0x08
    18a0:	89 85       	ldd	r24, Y+9	; 0x09
    18a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    18a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18a8:	dc 01       	movw	r26, r24
    18aa:	cb 01       	movw	r24, r22
    18ac:	9e 83       	std	Y+6, r25	; 0x06
    18ae:	8d 83       	std	Y+5, r24	; 0x05
    18b0:	8d 81       	ldd	r24, Y+5	; 0x05
    18b2:	9e 81       	ldd	r25, Y+6	; 0x06
    18b4:	9a 83       	std	Y+2, r25	; 0x02
    18b6:	89 83       	std	Y+1, r24	; 0x01
    18b8:	89 81       	ldd	r24, Y+1	; 0x01
    18ba:	9a 81       	ldd	r25, Y+2	; 0x02
    18bc:	01 97       	sbiw	r24, 0x01	; 1
    18be:	f1 f7       	brne	.-4      	; 0x18bc <Change_password+0x3ea>
    18c0:	9a 83       	std	Y+2, r25	; 0x02
    18c2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(500);
		g_trials++;
    18c4:	80 91 98 01 	lds	r24, 0x0198
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	80 93 98 01 	sts	0x0198, r24

	}
	while(g_trials<3);
    18ce:	80 91 98 01 	lds	r24, 0x0198
    18d2:	83 30       	cpi	r24, 0x03	; 3
    18d4:	08 f4       	brcc	.+2      	; 0x18d8 <Change_password+0x406>
    18d6:	09 ce       	rjmp	.-1006   	; 0x14ea <Change_password+0x18>

	if(g_trials==3){
    18d8:	80 91 98 01 	lds	r24, 0x0198
    18dc:	83 30       	cpi	r24, 0x03	; 3
    18de:	d9 f4       	brne	.+54     	; 0x1916 <Change_password+0x444>
		g_ticks=0;
    18e0:	10 92 96 01 	sts	0x0196, r1
		LCD_clearScreen();
    18e4:	0e 94 8b 16 	call	0x2d16	; 0x2d16 <LCD_clearScreen>
		LCD_displayStringRowColumn(0, 2, "!!!!ERROR!!!!");
    18e8:	22 e7       	ldi	r18, 0x72	; 114
    18ea:	30 e0       	ldi	r19, 0x00	; 0
    18ec:	80 e0       	ldi	r24, 0x00	; 0
    18ee:	62 e0       	ldi	r22, 0x02	; 2
    18f0:	a9 01       	movw	r20, r18
    18f2:	0e 94 4f 16 	call	0x2c9e	; 0x2c9e <LCD_displayStringRowColumn>
		Buzzer_on();
    18f6:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <Buzzer_on>
		Timer1_setCallBack(TIMER_ISR_COUNTER);
    18fa:	8d e5       	ldi	r24, 0x5D	; 93
    18fc:	9a e0       	ldi	r25, 0x0A	; 10
    18fe:	0e 94 ba 17 	call	0x2f74	; 0x2f74 <Timer1_setCallBack>
		while(g_ticks!=60);
    1902:	80 91 96 01 	lds	r24, 0x0196
    1906:	8c 33       	cpi	r24, 0x3C	; 60
    1908:	e1 f7       	brne	.-8      	; 0x1902 <Change_password+0x430>
		Timer1_deInit();
    190a:	0e 94 a1 17 	call	0x2f42	; 0x2f42 <Timer1_deInit>
		Buzzer_off();
    190e:	0e 94 f0 0c 	call	0x19e0	; 0x19e0 <Buzzer_off>
		g_trials=0;
    1912:	10 92 98 01 	sts	0x0198, r1

	}


}
    1916:	aa 96       	adiw	r28, 0x2a	; 42
    1918:	0f b6       	in	r0, 0x3f	; 63
    191a:	f8 94       	cli
    191c:	de bf       	out	0x3e, r29	; 62
    191e:	0f be       	out	0x3f, r0	; 63
    1920:	cd bf       	out	0x3d, r28	; 61
    1922:	cf 91       	pop	r28
    1924:	df 91       	pop	r29
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	08 95       	ret

0000192c <PWM_Timer0_Start>:
#include<avr/io.h>
#include"PWM.h"


void PWM_Timer0_Start(uint8 duty_cycle){
    192c:	0f 93       	push	r16
    192e:	1f 93       	push	r17
    1930:	df 93       	push	r29
    1932:	cf 93       	push	r28
    1934:	0f 92       	push	r0
    1936:	cd b7       	in	r28, 0x3d	; 61
    1938:	de b7       	in	r29, 0x3e	; 62
    193a:	89 83       	std	Y+1, r24	; 0x01


	TCNT0 = 0; //Set Timer Initial value
    193c:	e2 e5       	ldi	r30, 0x52	; 82
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	10 82       	st	Z, r1

	OCR0  = duty_cycle*(2.55) ;   // Set Compare Value
    1942:	0c e5       	ldi	r16, 0x5C	; 92
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	89 81       	ldd	r24, Y+1	; 0x01
    1948:	88 2f       	mov	r24, r24
    194a:	90 e0       	ldi	r25, 0x00	; 0
    194c:	aa 27       	eor	r26, r26
    194e:	97 fd       	sbrc	r25, 7
    1950:	a0 95       	com	r26
    1952:	ba 2f       	mov	r27, r26
    1954:	bc 01       	movw	r22, r24
    1956:	cd 01       	movw	r24, r26
    1958:	0e 94 a9 03 	call	0x752	; 0x752 <__floatsisf>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	bc 01       	movw	r22, r24
    1962:	cd 01       	movw	r24, r26
    1964:	23 e3       	ldi	r18, 0x33	; 51
    1966:	33 e3       	ldi	r19, 0x33	; 51
    1968:	43 e2       	ldi	r20, 0x23	; 35
    196a:	50 e4       	ldi	r21, 0x40	; 64
    196c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1970:	dc 01       	movw	r26, r24
    1972:	cb 01       	movw	r24, r22
    1974:	bc 01       	movw	r22, r24
    1976:	cd 01       	movw	r24, r26
    1978:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    197c:	dc 01       	movw	r26, r24
    197e:	cb 01       	movw	r24, r22
    1980:	f8 01       	movw	r30, r16
    1982:	80 83       	st	Z, r24

	SET_BIT(DDRB,PB3); //set PB3/OC0 as output pin --> pin where the PWM signal is generated from MC.
    1984:	a7 e3       	ldi	r26, 0x37	; 55
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	e7 e3       	ldi	r30, 0x37	; 55
    198a:	f0 e0       	ldi	r31, 0x00	; 0
    198c:	80 81       	ld	r24, Z
    198e:	88 60       	ori	r24, 0x08	; 8
    1990:	8c 93       	st	X, r24
	 * 1. Fast PWM mode FOC0=0
	 * 2. Fast PWM Mode WGM01=1 & WGM00=1
	 * 3. Clear OC0 when match occurs (non inverted mode) COM00=0 & COM01=1
	 * 4. clock = F_CPU/8 CS00=0 CS01=1 CS02=0
	 */
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    1992:	e3 e5       	ldi	r30, 0x53	; 83
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	8a e6       	ldi	r24, 0x6A	; 106
    1998:	80 83       	st	Z, r24

}
    199a:	0f 90       	pop	r0
    199c:	cf 91       	pop	r28
    199e:	df 91       	pop	r29
    19a0:	1f 91       	pop	r17
    19a2:	0f 91       	pop	r16
    19a4:	08 95       	ret

000019a6 <Buzzer_init>:
#include "common_macros.h"
#include "gpio.h"
#include "buzzer.h"
#include<util/delay.h>
void Buzzer_init(void)
{
    19a6:	df 93       	push	r29
    19a8:	cf 93       	push	r28
    19aa:	cd b7       	in	r28, 0x3d	; 61
    19ac:	de b7       	in	r29, 0x3e	; 62

	GPIO_setupPinDirection(BUZZER_PORT,BUZZER_PIN, PIN_OUTPUT);
    19ae:	81 e0       	ldi	r24, 0x01	; 1
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    19b8:	81 e0       	ldi	r24, 0x01	; 1
    19ba:	66 e0       	ldi	r22, 0x06	; 6
    19bc:	40 e0       	ldi	r20, 0x00	; 0
    19be:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>

}
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <Buzzer_on>:

void Buzzer_on(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
    19d0:	81 e0       	ldi	r24, 0x01	; 1
    19d2:	66 e0       	ldi	r22, 0x06	; 6
    19d4:	41 e0       	ldi	r20, 0x01	; 1
    19d6:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
}
    19da:	cf 91       	pop	r28
    19dc:	df 91       	pop	r29
    19de:	08 95       	ret

000019e0 <Buzzer_off>:

void Buzzer_off(void)
{
    19e0:	df 93       	push	r29
    19e2:	cf 93       	push	r28
    19e4:	cd b7       	in	r28, 0x3d	; 61
    19e6:	de b7       	in	r29, 0x3e	; 62

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    19e8:	81 e0       	ldi	r24, 0x01	; 1
    19ea:	66 e0       	ldi	r22, 0x06	; 6
    19ec:	40 e0       	ldi	r20, 0x00	; 0
    19ee:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
}
    19f2:	cf 91       	pop	r28
    19f4:	df 91       	pop	r29
    19f6:	08 95       	ret

000019f8 <Buzzer_toggle>:
void Buzzer_toggle(void)
{
    19f8:	df 93       	push	r29
    19fa:	cf 93       	push	r28
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	2e 97       	sbiw	r28, 0x0e	; 14
    1a02:	0f b6       	in	r0, 0x3f	; 63
    1a04:	f8 94       	cli
    1a06:	de bf       	out	0x3e, r29	; 62
    1a08:	0f be       	out	0x3f, r0	; 63
    1a0a:	cd bf       	out	0x3d, r28	; 61

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_HIGH);
    1a0c:	81 e0       	ldi	r24, 0x01	; 1
    1a0e:	66 e0       	ldi	r22, 0x06	; 6
    1a10:	41 e0       	ldi	r20, 0x01	; 1
    1a12:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	90 e0       	ldi	r25, 0x00	; 0
    1a1a:	a8 ec       	ldi	r26, 0xC8	; 200
    1a1c:	b2 e4       	ldi	r27, 0x42	; 66
    1a1e:	8b 87       	std	Y+11, r24	; 0x0b
    1a20:	9c 87       	std	Y+12, r25	; 0x0c
    1a22:	ad 87       	std	Y+13, r26	; 0x0d
    1a24:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a26:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a28:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a2a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a2c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a2e:	20 e0       	ldi	r18, 0x00	; 0
    1a30:	30 e0       	ldi	r19, 0x00	; 0
    1a32:	4a e7       	ldi	r20, 0x7A	; 122
    1a34:	53 e4       	ldi	r21, 0x43	; 67
    1a36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a3a:	dc 01       	movw	r26, r24
    1a3c:	cb 01       	movw	r24, r22
    1a3e:	8f 83       	std	Y+7, r24	; 0x07
    1a40:	98 87       	std	Y+8, r25	; 0x08
    1a42:	a9 87       	std	Y+9, r26	; 0x09
    1a44:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a46:	6f 81       	ldd	r22, Y+7	; 0x07
    1a48:	78 85       	ldd	r23, Y+8	; 0x08
    1a4a:	89 85       	ldd	r24, Y+9	; 0x09
    1a4c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a4e:	20 e0       	ldi	r18, 0x00	; 0
    1a50:	30 e0       	ldi	r19, 0x00	; 0
    1a52:	40 e8       	ldi	r20, 0x80	; 128
    1a54:	5f e3       	ldi	r21, 0x3F	; 63
    1a56:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a5a:	88 23       	and	r24, r24
    1a5c:	2c f4       	brge	.+10     	; 0x1a68 <Buzzer_toggle+0x70>
		__ticks = 1;
    1a5e:	81 e0       	ldi	r24, 0x01	; 1
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9e 83       	std	Y+6, r25	; 0x06
    1a64:	8d 83       	std	Y+5, r24	; 0x05
    1a66:	3f c0       	rjmp	.+126    	; 0x1ae6 <Buzzer_toggle+0xee>
	else if (__tmp > 65535)
    1a68:	6f 81       	ldd	r22, Y+7	; 0x07
    1a6a:	78 85       	ldd	r23, Y+8	; 0x08
    1a6c:	89 85       	ldd	r24, Y+9	; 0x09
    1a6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a70:	20 e0       	ldi	r18, 0x00	; 0
    1a72:	3f ef       	ldi	r19, 0xFF	; 255
    1a74:	4f e7       	ldi	r20, 0x7F	; 127
    1a76:	57 e4       	ldi	r21, 0x47	; 71
    1a78:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a7c:	18 16       	cp	r1, r24
    1a7e:	4c f5       	brge	.+82     	; 0x1ad2 <Buzzer_toggle+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a80:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a82:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a84:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a86:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e2       	ldi	r20, 0x20	; 32
    1a8e:	51 e4       	ldi	r21, 0x41	; 65
    1a90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a94:	dc 01       	movw	r26, r24
    1a96:	cb 01       	movw	r24, r22
    1a98:	bc 01       	movw	r22, r24
    1a9a:	cd 01       	movw	r24, r26
    1a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	9e 83       	std	Y+6, r25	; 0x06
    1aa6:	8d 83       	std	Y+5, r24	; 0x05
    1aa8:	0f c0       	rjmp	.+30     	; 0x1ac8 <Buzzer_toggle+0xd0>
    1aaa:	89 e1       	ldi	r24, 0x19	; 25
    1aac:	90 e0       	ldi	r25, 0x00	; 0
    1aae:	9c 83       	std	Y+4, r25	; 0x04
    1ab0:	8b 83       	std	Y+3, r24	; 0x03
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	01 97       	sbiw	r24, 0x01	; 1
    1ab8:	f1 f7       	brne	.-4      	; 0x1ab6 <Buzzer_toggle+0xbe>
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1abe:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	9e 83       	std	Y+6, r25	; 0x06
    1ac6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ac8:	8d 81       	ldd	r24, Y+5	; 0x05
    1aca:	9e 81       	ldd	r25, Y+6	; 0x06
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	69 f7       	brne	.-38     	; 0x1aaa <Buzzer_toggle+0xb2>
    1ad0:	14 c0       	rjmp	.+40     	; 0x1afa <Buzzer_toggle+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    1ad4:	78 85       	ldd	r23, Y+8	; 0x08
    1ad6:	89 85       	ldd	r24, Y+9	; 0x09
    1ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ada:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ade:	dc 01       	movw	r26, r24
    1ae0:	cb 01       	movw	r24, r22
    1ae2:	9e 83       	std	Y+6, r25	; 0x06
    1ae4:	8d 83       	std	Y+5, r24	; 0x05
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	9e 81       	ldd	r25, Y+6	; 0x06
    1aea:	9a 83       	std	Y+2, r25	; 0x02
    1aec:	89 83       	std	Y+1, r24	; 0x01
    1aee:	89 81       	ldd	r24, Y+1	; 0x01
    1af0:	9a 81       	ldd	r25, Y+2	; 0x02
    1af2:	01 97       	sbiw	r24, 0x01	; 1
    1af4:	f1 f7       	brne	.-4      	; 0x1af2 <Buzzer_toggle+0xfa>
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

	GPIO_writePin(BUZZER_PORT,BUZZER_PIN, LOGIC_LOW);
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	66 e0       	ldi	r22, 0x06	; 6
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>

}
    1b04:	2e 96       	adiw	r28, 0x0e	; 14
    1b06:	0f b6       	in	r0, 0x3f	; 63
    1b08:	f8 94       	cli
    1b0a:	de bf       	out	0x3e, r29	; 62
    1b0c:	0f be       	out	0x3f, r0	; 63
    1b0e:	cd bf       	out	0x3d, r28	; 61
    1b10:	cf 91       	pop	r28
    1b12:	df 91       	pop	r29
    1b14:	08 95       	ret

00001b16 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <EEPROM_writeByte+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <EEPROM_writeByte+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	9a 83       	std	Y+2, r25	; 0x02
    1b24:	89 83       	std	Y+1, r24	; 0x01
    1b26:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b28:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b2c:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1b30:	88 30       	cpi	r24, 0x08	; 8
    1b32:	11 f0       	breq	.+4      	; 0x1b38 <EEPROM_writeByte+0x22>
        return ERROR;
    1b34:	1c 82       	std	Y+4, r1	; 0x04
    1b36:	28 c0       	rjmp	.+80     	; 0x1b88 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b38:	89 81       	ldd	r24, Y+1	; 0x01
    1b3a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b3c:	80 70       	andi	r24, 0x00	; 0
    1b3e:	97 70       	andi	r25, 0x07	; 7
    1b40:	88 0f       	add	r24, r24
    1b42:	89 2f       	mov	r24, r25
    1b44:	88 1f       	adc	r24, r24
    1b46:	99 0b       	sbc	r25, r25
    1b48:	91 95       	neg	r25
    1b4a:	80 6a       	ori	r24, 0xA0	; 160
    1b4c:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b50:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1b54:	88 31       	cpi	r24, 0x18	; 24
    1b56:	11 f0       	breq	.+4      	; 0x1b5c <EEPROM_writeByte+0x46>
        return ERROR; 
    1b58:	1c 82       	std	Y+4, r1	; 0x04
    1b5a:	16 c0       	rjmp	.+44     	; 0x1b88 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b5c:	89 81       	ldd	r24, Y+1	; 0x01
    1b5e:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b62:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1b66:	88 32       	cpi	r24, 0x28	; 40
    1b68:	11 f0       	breq	.+4      	; 0x1b6e <EEPROM_writeByte+0x58>
        return ERROR;
    1b6a:	1c 82       	std	Y+4, r1	; 0x04
    1b6c:	0d c0       	rjmp	.+26     	; 0x1b88 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b70:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b74:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1b78:	88 32       	cpi	r24, 0x28	; 40
    1b7a:	11 f0       	breq	.+4      	; 0x1b80 <EEPROM_writeByte+0x6a>
        return ERROR;
    1b7c:	1c 82       	std	Y+4, r1	; 0x04
    1b7e:	04 c0       	rjmp	.+8      	; 0x1b88 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b80:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <TWI_stop>
	
    return SUCCESS;
    1b84:	81 e0       	ldi	r24, 0x01	; 1
    1b86:	8c 83       	std	Y+4, r24	; 0x04
    1b88:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b8a:	0f 90       	pop	r0
    1b8c:	0f 90       	pop	r0
    1b8e:	0f 90       	pop	r0
    1b90:	0f 90       	pop	r0
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <EEPROM_readByte+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <EEPROM_readByte+0x8>
    1ba0:	0f 92       	push	r0
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
    1ba6:	9a 83       	std	Y+2, r25	; 0x02
    1ba8:	89 83       	std	Y+1, r24	; 0x01
    1baa:	7c 83       	std	Y+4, r23	; 0x04
    1bac:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1bae:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1bb2:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1bb6:	88 30       	cpi	r24, 0x08	; 8
    1bb8:	11 f0       	breq	.+4      	; 0x1bbe <EEPROM_readByte+0x26>
        return ERROR;
    1bba:	1d 82       	std	Y+5, r1	; 0x05
    1bbc:	44 c0       	rjmp	.+136    	; 0x1c46 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1bbe:	89 81       	ldd	r24, Y+1	; 0x01
    1bc0:	9a 81       	ldd	r25, Y+2	; 0x02
    1bc2:	80 70       	andi	r24, 0x00	; 0
    1bc4:	97 70       	andi	r25, 0x07	; 7
    1bc6:	88 0f       	add	r24, r24
    1bc8:	89 2f       	mov	r24, r25
    1bca:	88 1f       	adc	r24, r24
    1bcc:	99 0b       	sbc	r25, r25
    1bce:	91 95       	neg	r25
    1bd0:	80 6a       	ori	r24, 0xA0	; 160
    1bd2:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1bd6:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1bda:	88 31       	cpi	r24, 0x18	; 24
    1bdc:	11 f0       	breq	.+4      	; 0x1be2 <EEPROM_readByte+0x4a>
        return ERROR;
    1bde:	1d 82       	std	Y+5, r1	; 0x05
    1be0:	32 c0       	rjmp	.+100    	; 0x1c46 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    1be4:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1be8:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1bec:	88 32       	cpi	r24, 0x28	; 40
    1bee:	11 f0       	breq	.+4      	; 0x1bf4 <EEPROM_readByte+0x5c>
        return ERROR;
    1bf0:	1d 82       	std	Y+5, r1	; 0x05
    1bf2:	29 c0       	rjmp	.+82     	; 0x1c46 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1bf4:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1bf8:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1bfc:	80 31       	cpi	r24, 0x10	; 16
    1bfe:	11 f0       	breq	.+4      	; 0x1c04 <EEPROM_readByte+0x6c>
        return ERROR;
    1c00:	1d 82       	std	Y+5, r1	; 0x05
    1c02:	21 c0       	rjmp	.+66     	; 0x1c46 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1c04:	89 81       	ldd	r24, Y+1	; 0x01
    1c06:	9a 81       	ldd	r25, Y+2	; 0x02
    1c08:	80 70       	andi	r24, 0x00	; 0
    1c0a:	97 70       	andi	r25, 0x07	; 7
    1c0c:	88 0f       	add	r24, r24
    1c0e:	89 2f       	mov	r24, r25
    1c10:	88 1f       	adc	r24, r24
    1c12:	99 0b       	sbc	r25, r25
    1c14:	91 95       	neg	r25
    1c16:	81 6a       	ori	r24, 0xA1	; 161
    1c18:	0e 94 06 18 	call	0x300c	; 0x300c <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1c1c:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1c20:	80 34       	cpi	r24, 0x40	; 64
    1c22:	11 f0       	breq	.+4      	; 0x1c28 <EEPROM_readByte+0x90>
        return ERROR;
    1c24:	1d 82       	std	Y+5, r1	; 0x05
    1c26:	0f c0       	rjmp	.+30     	; 0x1c46 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1c28:	0e 94 30 18 	call	0x3060	; 0x3060 <TWI_readByteWithNACK>
    1c2c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c2e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c30:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c32:	0e 94 43 18 	call	0x3086	; 0x3086 <TWI_getStatus>
    1c36:	88 35       	cpi	r24, 0x58	; 88
    1c38:	11 f0       	breq	.+4      	; 0x1c3e <EEPROM_readByte+0xa6>
        return ERROR;
    1c3a:	1d 82       	std	Y+5, r1	; 0x05
    1c3c:	04 c0       	rjmp	.+8      	; 0x1c46 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c3e:	0e 94 fb 17 	call	0x2ff6	; 0x2ff6 <TWI_stop>

    return SUCCESS;
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	8d 83       	std	Y+5, r24	; 0x05
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c48:	0f 90       	pop	r0
    1c4a:	0f 90       	pop	r0
    1c4c:	0f 90       	pop	r0
    1c4e:	0f 90       	pop	r0
    1c50:	0f 90       	pop	r0
    1c52:	cf 91       	pop	r28
    1c54:	df 91       	pop	r29
    1c56:	08 95       	ret

00001c58 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c58:	df 93       	push	r29
    1c5a:	cf 93       	push	r28
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <GPIO_setupPinDirection+0x6>
    1c5e:	00 d0       	rcall	.+0      	; 0x1c60 <GPIO_setupPinDirection+0x8>
    1c60:	0f 92       	push	r0
    1c62:	cd b7       	in	r28, 0x3d	; 61
    1c64:	de b7       	in	r29, 0x3e	; 62
    1c66:	89 83       	std	Y+1, r24	; 0x01
    1c68:	6a 83       	std	Y+2, r22	; 0x02
    1c6a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c6e:	88 30       	cpi	r24, 0x08	; 8
    1c70:	08 f0       	brcs	.+2      	; 0x1c74 <GPIO_setupPinDirection+0x1c>
    1c72:	d5 c0       	rjmp	.+426    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
    1c74:	89 81       	ldd	r24, Y+1	; 0x01
    1c76:	84 30       	cpi	r24, 0x04	; 4
    1c78:	08 f0       	brcs	.+2      	; 0x1c7c <GPIO_setupPinDirection+0x24>
    1c7a:	d1 c0       	rjmp	.+418    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c7c:	89 81       	ldd	r24, Y+1	; 0x01
    1c7e:	28 2f       	mov	r18, r24
    1c80:	30 e0       	ldi	r19, 0x00	; 0
    1c82:	3d 83       	std	Y+5, r19	; 0x05
    1c84:	2c 83       	std	Y+4, r18	; 0x04
    1c86:	8c 81       	ldd	r24, Y+4	; 0x04
    1c88:	9d 81       	ldd	r25, Y+5	; 0x05
    1c8a:	81 30       	cpi	r24, 0x01	; 1
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <GPIO_setupPinDirection+0x3a>
    1c90:	43 c0       	rjmp	.+134    	; 0x1d18 <GPIO_setupPinDirection+0xc0>
    1c92:	2c 81       	ldd	r18, Y+4	; 0x04
    1c94:	3d 81       	ldd	r19, Y+5	; 0x05
    1c96:	22 30       	cpi	r18, 0x02	; 2
    1c98:	31 05       	cpc	r19, r1
    1c9a:	2c f4       	brge	.+10     	; 0x1ca6 <GPIO_setupPinDirection+0x4e>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	71 f0       	breq	.+28     	; 0x1cc0 <GPIO_setupPinDirection+0x68>
    1ca4:	bc c0       	rjmp	.+376    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
    1ca6:	2c 81       	ldd	r18, Y+4	; 0x04
    1ca8:	3d 81       	ldd	r19, Y+5	; 0x05
    1caa:	22 30       	cpi	r18, 0x02	; 2
    1cac:	31 05       	cpc	r19, r1
    1cae:	09 f4       	brne	.+2      	; 0x1cb2 <GPIO_setupPinDirection+0x5a>
    1cb0:	5f c0       	rjmp	.+190    	; 0x1d70 <GPIO_setupPinDirection+0x118>
    1cb2:	8c 81       	ldd	r24, Y+4	; 0x04
    1cb4:	9d 81       	ldd	r25, Y+5	; 0x05
    1cb6:	83 30       	cpi	r24, 0x03	; 3
    1cb8:	91 05       	cpc	r25, r1
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <GPIO_setupPinDirection+0x66>
    1cbc:	85 c0       	rjmp	.+266    	; 0x1dc8 <GPIO_setupPinDirection+0x170>
    1cbe:	af c0       	rjmp	.+350    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	81 30       	cpi	r24, 0x01	; 1
    1cc4:	a1 f4       	brne	.+40     	; 0x1cee <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1cc6:	aa e3       	ldi	r26, 0x3A	; 58
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	ea e3       	ldi	r30, 0x3A	; 58
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	48 2f       	mov	r20, r24
    1cd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd4:	28 2f       	mov	r18, r24
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	81 e0       	ldi	r24, 0x01	; 1
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	02 2e       	mov	r0, r18
    1cde:	02 c0       	rjmp	.+4      	; 0x1ce4 <GPIO_setupPinDirection+0x8c>
    1ce0:	88 0f       	add	r24, r24
    1ce2:	99 1f       	adc	r25, r25
    1ce4:	0a 94       	dec	r0
    1ce6:	e2 f7       	brpl	.-8      	; 0x1ce0 <GPIO_setupPinDirection+0x88>
    1ce8:	84 2b       	or	r24, r20
    1cea:	8c 93       	st	X, r24
    1cec:	98 c0       	rjmp	.+304    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cee:	aa e3       	ldi	r26, 0x3A	; 58
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	ea e3       	ldi	r30, 0x3A	; 58
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <GPIO_setupPinDirection+0xb4>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <GPIO_setupPinDirection+0xb0>
    1d10:	80 95       	com	r24
    1d12:	84 23       	and	r24, r20
    1d14:	8c 93       	st	X, r24
    1d16:	83 c0       	rjmp	.+262    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1d18:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	a1 f4       	brne	.+40     	; 0x1d46 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1d1e:	a7 e3       	ldi	r26, 0x37	; 55
    1d20:	b0 e0       	ldi	r27, 0x00	; 0
    1d22:	e7 e3       	ldi	r30, 0x37	; 55
    1d24:	f0 e0       	ldi	r31, 0x00	; 0
    1d26:	80 81       	ld	r24, Z
    1d28:	48 2f       	mov	r20, r24
    1d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d2c:	28 2f       	mov	r18, r24
    1d2e:	30 e0       	ldi	r19, 0x00	; 0
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	90 e0       	ldi	r25, 0x00	; 0
    1d34:	02 2e       	mov	r0, r18
    1d36:	02 c0       	rjmp	.+4      	; 0x1d3c <GPIO_setupPinDirection+0xe4>
    1d38:	88 0f       	add	r24, r24
    1d3a:	99 1f       	adc	r25, r25
    1d3c:	0a 94       	dec	r0
    1d3e:	e2 f7       	brpl	.-8      	; 0x1d38 <GPIO_setupPinDirection+0xe0>
    1d40:	84 2b       	or	r24, r20
    1d42:	8c 93       	st	X, r24
    1d44:	6c c0       	rjmp	.+216    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d46:	a7 e3       	ldi	r26, 0x37	; 55
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e7 e3       	ldi	r30, 0x37	; 55
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_setupPinDirection+0x10c>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_setupPinDirection+0x108>
    1d68:	80 95       	com	r24
    1d6a:	84 23       	and	r24, r20
    1d6c:	8c 93       	st	X, r24
    1d6e:	57 c0       	rjmp	.+174    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d70:	8b 81       	ldd	r24, Y+3	; 0x03
    1d72:	81 30       	cpi	r24, 0x01	; 1
    1d74:	a1 f4       	brne	.+40     	; 0x1d9e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d76:	a4 e3       	ldi	r26, 0x34	; 52
    1d78:	b0 e0       	ldi	r27, 0x00	; 0
    1d7a:	e4 e3       	ldi	r30, 0x34	; 52
    1d7c:	f0 e0       	ldi	r31, 0x00	; 0
    1d7e:	80 81       	ld	r24, Z
    1d80:	48 2f       	mov	r20, r24
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	28 2f       	mov	r18, r24
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	81 e0       	ldi	r24, 0x01	; 1
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	02 2e       	mov	r0, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <GPIO_setupPinDirection+0x13c>
    1d90:	88 0f       	add	r24, r24
    1d92:	99 1f       	adc	r25, r25
    1d94:	0a 94       	dec	r0
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <GPIO_setupPinDirection+0x138>
    1d98:	84 2b       	or	r24, r20
    1d9a:	8c 93       	st	X, r24
    1d9c:	40 c0       	rjmp	.+128    	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d9e:	a4 e3       	ldi	r26, 0x34	; 52
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e4 e3       	ldi	r30, 0x34	; 52
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_setupPinDirection+0x164>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_setupPinDirection+0x160>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
    1dc6:	2b c0       	rjmp	.+86     	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	81 30       	cpi	r24, 0x01	; 1
    1dcc:	a1 f4       	brne	.+40     	; 0x1df6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1dce:	a1 e3       	ldi	r26, 0x31	; 49
    1dd0:	b0 e0       	ldi	r27, 0x00	; 0
    1dd2:	e1 e3       	ldi	r30, 0x31	; 49
    1dd4:	f0 e0       	ldi	r31, 0x00	; 0
    1dd6:	80 81       	ld	r24, Z
    1dd8:	48 2f       	mov	r20, r24
    1dda:	8a 81       	ldd	r24, Y+2	; 0x02
    1ddc:	28 2f       	mov	r18, r24
    1dde:	30 e0       	ldi	r19, 0x00	; 0
    1de0:	81 e0       	ldi	r24, 0x01	; 1
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	02 2e       	mov	r0, r18
    1de6:	02 c0       	rjmp	.+4      	; 0x1dec <GPIO_setupPinDirection+0x194>
    1de8:	88 0f       	add	r24, r24
    1dea:	99 1f       	adc	r25, r25
    1dec:	0a 94       	dec	r0
    1dee:	e2 f7       	brpl	.-8      	; 0x1de8 <GPIO_setupPinDirection+0x190>
    1df0:	84 2b       	or	r24, r20
    1df2:	8c 93       	st	X, r24
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1df6:	a1 e3       	ldi	r26, 0x31	; 49
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e1 e3       	ldi	r30, 0x31	; 49
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	48 2f       	mov	r20, r24
    1e02:	8a 81       	ldd	r24, Y+2	; 0x02
    1e04:	28 2f       	mov	r18, r24
    1e06:	30 e0       	ldi	r19, 0x00	; 0
    1e08:	81 e0       	ldi	r24, 0x01	; 1
    1e0a:	90 e0       	ldi	r25, 0x00	; 0
    1e0c:	02 2e       	mov	r0, r18
    1e0e:	02 c0       	rjmp	.+4      	; 0x1e14 <GPIO_setupPinDirection+0x1bc>
    1e10:	88 0f       	add	r24, r24
    1e12:	99 1f       	adc	r25, r25
    1e14:	0a 94       	dec	r0
    1e16:	e2 f7       	brpl	.-8      	; 0x1e10 <GPIO_setupPinDirection+0x1b8>
    1e18:	80 95       	com	r24
    1e1a:	84 23       	and	r24, r20
    1e1c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1e1e:	0f 90       	pop	r0
    1e20:	0f 90       	pop	r0
    1e22:	0f 90       	pop	r0
    1e24:	0f 90       	pop	r0
    1e26:	0f 90       	pop	r0
    1e28:	cf 91       	pop	r28
    1e2a:	df 91       	pop	r29
    1e2c:	08 95       	ret

00001e2e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1e2e:	df 93       	push	r29
    1e30:	cf 93       	push	r28
    1e32:	00 d0       	rcall	.+0      	; 0x1e34 <GPIO_writePin+0x6>
    1e34:	00 d0       	rcall	.+0      	; 0x1e36 <GPIO_writePin+0x8>
    1e36:	0f 92       	push	r0
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    1e3c:	89 83       	std	Y+1, r24	; 0x01
    1e3e:	6a 83       	std	Y+2, r22	; 0x02
    1e40:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e42:	8a 81       	ldd	r24, Y+2	; 0x02
    1e44:	88 30       	cpi	r24, 0x08	; 8
    1e46:	08 f0       	brcs	.+2      	; 0x1e4a <GPIO_writePin+0x1c>
    1e48:	d5 c0       	rjmp	.+426    	; 0x1ff4 <GPIO_writePin+0x1c6>
    1e4a:	89 81       	ldd	r24, Y+1	; 0x01
    1e4c:	84 30       	cpi	r24, 0x04	; 4
    1e4e:	08 f0       	brcs	.+2      	; 0x1e52 <GPIO_writePin+0x24>
    1e50:	d1 c0       	rjmp	.+418    	; 0x1ff4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e52:	89 81       	ldd	r24, Y+1	; 0x01
    1e54:	28 2f       	mov	r18, r24
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	3d 83       	std	Y+5, r19	; 0x05
    1e5a:	2c 83       	std	Y+4, r18	; 0x04
    1e5c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e60:	81 30       	cpi	r24, 0x01	; 1
    1e62:	91 05       	cpc	r25, r1
    1e64:	09 f4       	brne	.+2      	; 0x1e68 <GPIO_writePin+0x3a>
    1e66:	43 c0       	rjmp	.+134    	; 0x1eee <GPIO_writePin+0xc0>
    1e68:	2c 81       	ldd	r18, Y+4	; 0x04
    1e6a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e6c:	22 30       	cpi	r18, 0x02	; 2
    1e6e:	31 05       	cpc	r19, r1
    1e70:	2c f4       	brge	.+10     	; 0x1e7c <GPIO_writePin+0x4e>
    1e72:	8c 81       	ldd	r24, Y+4	; 0x04
    1e74:	9d 81       	ldd	r25, Y+5	; 0x05
    1e76:	00 97       	sbiw	r24, 0x00	; 0
    1e78:	71 f0       	breq	.+28     	; 0x1e96 <GPIO_writePin+0x68>
    1e7a:	bc c0       	rjmp	.+376    	; 0x1ff4 <GPIO_writePin+0x1c6>
    1e7c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e7e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e80:	22 30       	cpi	r18, 0x02	; 2
    1e82:	31 05       	cpc	r19, r1
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <GPIO_writePin+0x5a>
    1e86:	5f c0       	rjmp	.+190    	; 0x1f46 <GPIO_writePin+0x118>
    1e88:	8c 81       	ldd	r24, Y+4	; 0x04
    1e8a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e8c:	83 30       	cpi	r24, 0x03	; 3
    1e8e:	91 05       	cpc	r25, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <GPIO_writePin+0x66>
    1e92:	85 c0       	rjmp	.+266    	; 0x1f9e <GPIO_writePin+0x170>
    1e94:	af c0       	rjmp	.+350    	; 0x1ff4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e96:	8b 81       	ldd	r24, Y+3	; 0x03
    1e98:	81 30       	cpi	r24, 0x01	; 1
    1e9a:	a1 f4       	brne	.+40     	; 0x1ec4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e9c:	ab e3       	ldi	r26, 0x3B	; 59
    1e9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ea0:	eb e3       	ldi	r30, 0x3B	; 59
    1ea2:	f0 e0       	ldi	r31, 0x00	; 0
    1ea4:	80 81       	ld	r24, Z
    1ea6:	48 2f       	mov	r20, r24
    1ea8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	90 e0       	ldi	r25, 0x00	; 0
    1eb2:	02 2e       	mov	r0, r18
    1eb4:	02 c0       	rjmp	.+4      	; 0x1eba <GPIO_writePin+0x8c>
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	0a 94       	dec	r0
    1ebc:	e2 f7       	brpl	.-8      	; 0x1eb6 <GPIO_writePin+0x88>
    1ebe:	84 2b       	or	r24, r20
    1ec0:	8c 93       	st	X, r24
    1ec2:	98 c0       	rjmp	.+304    	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1ec4:	ab e3       	ldi	r26, 0x3B	; 59
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	eb e3       	ldi	r30, 0x3B	; 59
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_writePin+0xb4>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_writePin+0xb0>
    1ee6:	80 95       	com	r24
    1ee8:	84 23       	and	r24, r20
    1eea:	8c 93       	st	X, r24
    1eec:	83 c0       	rjmp	.+262    	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1eee:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef0:	81 30       	cpi	r24, 0x01	; 1
    1ef2:	a1 f4       	brne	.+40     	; 0x1f1c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ef4:	a8 e3       	ldi	r26, 0x38	; 56
    1ef6:	b0 e0       	ldi	r27, 0x00	; 0
    1ef8:	e8 e3       	ldi	r30, 0x38	; 56
    1efa:	f0 e0       	ldi	r31, 0x00	; 0
    1efc:	80 81       	ld	r24, Z
    1efe:	48 2f       	mov	r20, r24
    1f00:	8a 81       	ldd	r24, Y+2	; 0x02
    1f02:	28 2f       	mov	r18, r24
    1f04:	30 e0       	ldi	r19, 0x00	; 0
    1f06:	81 e0       	ldi	r24, 0x01	; 1
    1f08:	90 e0       	ldi	r25, 0x00	; 0
    1f0a:	02 2e       	mov	r0, r18
    1f0c:	02 c0       	rjmp	.+4      	; 0x1f12 <GPIO_writePin+0xe4>
    1f0e:	88 0f       	add	r24, r24
    1f10:	99 1f       	adc	r25, r25
    1f12:	0a 94       	dec	r0
    1f14:	e2 f7       	brpl	.-8      	; 0x1f0e <GPIO_writePin+0xe0>
    1f16:	84 2b       	or	r24, r20
    1f18:	8c 93       	st	X, r24
    1f1a:	6c c0       	rjmp	.+216    	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1f1c:	a8 e3       	ldi	r26, 0x38	; 56
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e8 e3       	ldi	r30, 0x38	; 56
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <GPIO_writePin+0x10c>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <GPIO_writePin+0x108>
    1f3e:	80 95       	com	r24
    1f40:	84 23       	and	r24, r20
    1f42:	8c 93       	st	X, r24
    1f44:	57 c0       	rjmp	.+174    	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f46:	8b 81       	ldd	r24, Y+3	; 0x03
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	a1 f4       	brne	.+40     	; 0x1f74 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f4c:	a5 e3       	ldi	r26, 0x35	; 53
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e5 e3       	ldi	r30, 0x35	; 53
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	48 2f       	mov	r20, r24
    1f58:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5a:	28 2f       	mov	r18, r24
    1f5c:	30 e0       	ldi	r19, 0x00	; 0
    1f5e:	81 e0       	ldi	r24, 0x01	; 1
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	02 2e       	mov	r0, r18
    1f64:	02 c0       	rjmp	.+4      	; 0x1f6a <GPIO_writePin+0x13c>
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	0a 94       	dec	r0
    1f6c:	e2 f7       	brpl	.-8      	; 0x1f66 <GPIO_writePin+0x138>
    1f6e:	84 2b       	or	r24, r20
    1f70:	8c 93       	st	X, r24
    1f72:	40 c0       	rjmp	.+128    	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f74:	a5 e3       	ldi	r26, 0x35	; 53
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e5 e3       	ldi	r30, 0x35	; 53
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <GPIO_writePin+0x164>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <GPIO_writePin+0x160>
    1f96:	80 95       	com	r24
    1f98:	84 23       	and	r24, r20
    1f9a:	8c 93       	st	X, r24
    1f9c:	2b c0       	rjmp	.+86     	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1fa0:	81 30       	cpi	r24, 0x01	; 1
    1fa2:	a1 f4       	brne	.+40     	; 0x1fcc <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1fa4:	a2 e3       	ldi	r26, 0x32	; 50
    1fa6:	b0 e0       	ldi	r27, 0x00	; 0
    1fa8:	e2 e3       	ldi	r30, 0x32	; 50
    1faa:	f0 e0       	ldi	r31, 0x00	; 0
    1fac:	80 81       	ld	r24, Z
    1fae:	48 2f       	mov	r20, r24
    1fb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fb2:	28 2f       	mov	r18, r24
    1fb4:	30 e0       	ldi	r19, 0x00	; 0
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	90 e0       	ldi	r25, 0x00	; 0
    1fba:	02 2e       	mov	r0, r18
    1fbc:	02 c0       	rjmp	.+4      	; 0x1fc2 <GPIO_writePin+0x194>
    1fbe:	88 0f       	add	r24, r24
    1fc0:	99 1f       	adc	r25, r25
    1fc2:	0a 94       	dec	r0
    1fc4:	e2 f7       	brpl	.-8      	; 0x1fbe <GPIO_writePin+0x190>
    1fc6:	84 2b       	or	r24, r20
    1fc8:	8c 93       	st	X, r24
    1fca:	14 c0       	rjmp	.+40     	; 0x1ff4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1fcc:	a2 e3       	ldi	r26, 0x32	; 50
    1fce:	b0 e0       	ldi	r27, 0x00	; 0
    1fd0:	e2 e3       	ldi	r30, 0x32	; 50
    1fd2:	f0 e0       	ldi	r31, 0x00	; 0
    1fd4:	80 81       	ld	r24, Z
    1fd6:	48 2f       	mov	r20, r24
    1fd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fda:	28 2f       	mov	r18, r24
    1fdc:	30 e0       	ldi	r19, 0x00	; 0
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	02 2e       	mov	r0, r18
    1fe4:	02 c0       	rjmp	.+4      	; 0x1fea <GPIO_writePin+0x1bc>
    1fe6:	88 0f       	add	r24, r24
    1fe8:	99 1f       	adc	r25, r25
    1fea:	0a 94       	dec	r0
    1fec:	e2 f7       	brpl	.-8      	; 0x1fe6 <GPIO_writePin+0x1b8>
    1fee:	80 95       	com	r24
    1ff0:	84 23       	and	r24, r20
    1ff2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1ff4:	0f 90       	pop	r0
    1ff6:	0f 90       	pop	r0
    1ff8:	0f 90       	pop	r0
    1ffa:	0f 90       	pop	r0
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    2004:	df 93       	push	r29
    2006:	cf 93       	push	r28
    2008:	00 d0       	rcall	.+0      	; 0x200a <GPIO_readPin+0x6>
    200a:	00 d0       	rcall	.+0      	; 0x200c <GPIO_readPin+0x8>
    200c:	0f 92       	push	r0
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	8a 83       	std	Y+2, r24	; 0x02
    2014:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    2016:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2018:	8b 81       	ldd	r24, Y+3	; 0x03
    201a:	88 30       	cpi	r24, 0x08	; 8
    201c:	08 f0       	brcs	.+2      	; 0x2020 <GPIO_readPin+0x1c>
    201e:	84 c0       	rjmp	.+264    	; 0x2128 <GPIO_readPin+0x124>
    2020:	8a 81       	ldd	r24, Y+2	; 0x02
    2022:	84 30       	cpi	r24, 0x04	; 4
    2024:	08 f0       	brcs	.+2      	; 0x2028 <GPIO_readPin+0x24>
    2026:	80 c0       	rjmp	.+256    	; 0x2128 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    2028:	8a 81       	ldd	r24, Y+2	; 0x02
    202a:	28 2f       	mov	r18, r24
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	3d 83       	std	Y+5, r19	; 0x05
    2030:	2c 83       	std	Y+4, r18	; 0x04
    2032:	4c 81       	ldd	r20, Y+4	; 0x04
    2034:	5d 81       	ldd	r21, Y+5	; 0x05
    2036:	41 30       	cpi	r20, 0x01	; 1
    2038:	51 05       	cpc	r21, r1
    203a:	79 f1       	breq	.+94     	; 0x209a <GPIO_readPin+0x96>
    203c:	8c 81       	ldd	r24, Y+4	; 0x04
    203e:	9d 81       	ldd	r25, Y+5	; 0x05
    2040:	82 30       	cpi	r24, 0x02	; 2
    2042:	91 05       	cpc	r25, r1
    2044:	34 f4       	brge	.+12     	; 0x2052 <GPIO_readPin+0x4e>
    2046:	2c 81       	ldd	r18, Y+4	; 0x04
    2048:	3d 81       	ldd	r19, Y+5	; 0x05
    204a:	21 15       	cp	r18, r1
    204c:	31 05       	cpc	r19, r1
    204e:	69 f0       	breq	.+26     	; 0x206a <GPIO_readPin+0x66>
    2050:	6b c0       	rjmp	.+214    	; 0x2128 <GPIO_readPin+0x124>
    2052:	4c 81       	ldd	r20, Y+4	; 0x04
    2054:	5d 81       	ldd	r21, Y+5	; 0x05
    2056:	42 30       	cpi	r20, 0x02	; 2
    2058:	51 05       	cpc	r21, r1
    205a:	b9 f1       	breq	.+110    	; 0x20ca <GPIO_readPin+0xc6>
    205c:	8c 81       	ldd	r24, Y+4	; 0x04
    205e:	9d 81       	ldd	r25, Y+5	; 0x05
    2060:	83 30       	cpi	r24, 0x03	; 3
    2062:	91 05       	cpc	r25, r1
    2064:	09 f4       	brne	.+2      	; 0x2068 <GPIO_readPin+0x64>
    2066:	49 c0       	rjmp	.+146    	; 0x20fa <GPIO_readPin+0xf6>
    2068:	5f c0       	rjmp	.+190    	; 0x2128 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    206a:	e9 e3       	ldi	r30, 0x39	; 57
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <GPIO_readPin+0x7e>
    207e:	55 95       	asr	r21
    2080:	47 95       	ror	r20
    2082:	8a 95       	dec	r24
    2084:	e2 f7       	brpl	.-8      	; 0x207e <GPIO_readPin+0x7a>
    2086:	ca 01       	movw	r24, r20
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	88 23       	and	r24, r24
    208e:	19 f0       	breq	.+6      	; 0x2096 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	49 c0       	rjmp	.+146    	; 0x2128 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	47 c0       	rjmp	.+142    	; 0x2128 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    209a:	e6 e3       	ldi	r30, 0x36	; 54
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a9 01       	movw	r20, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <GPIO_readPin+0xae>
    20ae:	55 95       	asr	r21
    20b0:	47 95       	ror	r20
    20b2:	8a 95       	dec	r24
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <GPIO_readPin+0xaa>
    20b6:	ca 01       	movw	r24, r20
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	88 23       	and	r24, r24
    20be:	19 f0       	breq	.+6      	; 0x20c6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	31 c0       	rjmp	.+98     	; 0x2128 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20c6:	19 82       	std	Y+1, r1	; 0x01
    20c8:	2f c0       	rjmp	.+94     	; 0x2128 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    20ca:	e3 e3       	ldi	r30, 0x33	; 51
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <GPIO_readPin+0xde>
    20de:	55 95       	asr	r21
    20e0:	47 95       	ror	r20
    20e2:	8a 95       	dec	r24
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <GPIO_readPin+0xda>
    20e6:	ca 01       	movw	r24, r20
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	88 23       	and	r24, r24
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	19 c0       	rjmp	.+50     	; 0x2128 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20f6:	19 82       	std	Y+1, r1	; 0x01
    20f8:	17 c0       	rjmp	.+46     	; 0x2128 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20fa:	e0 e3       	ldi	r30, 0x30	; 48
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	28 2f       	mov	r18, r24
    2102:	30 e0       	ldi	r19, 0x00	; 0
    2104:	8b 81       	ldd	r24, Y+3	; 0x03
    2106:	88 2f       	mov	r24, r24
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a9 01       	movw	r20, r18
    210c:	02 c0       	rjmp	.+4      	; 0x2112 <GPIO_readPin+0x10e>
    210e:	55 95       	asr	r21
    2110:	47 95       	ror	r20
    2112:	8a 95       	dec	r24
    2114:	e2 f7       	brpl	.-8      	; 0x210e <GPIO_readPin+0x10a>
    2116:	ca 01       	movw	r24, r20
    2118:	81 70       	andi	r24, 0x01	; 1
    211a:	90 70       	andi	r25, 0x00	; 0
    211c:	88 23       	and	r24, r24
    211e:	19 f0       	breq	.+6      	; 0x2126 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    2120:	81 e0       	ldi	r24, 0x01	; 1
    2122:	89 83       	std	Y+1, r24	; 0x01
    2124:	01 c0       	rjmp	.+2      	; 0x2128 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2126:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    2128:	89 81       	ldd	r24, Y+1	; 0x01
}
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	cf 91       	pop	r28
    2136:	df 91       	pop	r29
    2138:	08 95       	ret

0000213a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    213a:	df 93       	push	r29
    213c:	cf 93       	push	r28
    213e:	00 d0       	rcall	.+0      	; 0x2140 <GPIO_setupPortDirection+0x6>
    2140:	00 d0       	rcall	.+0      	; 0x2142 <GPIO_setupPortDirection+0x8>
    2142:	cd b7       	in	r28, 0x3d	; 61
    2144:	de b7       	in	r29, 0x3e	; 62
    2146:	89 83       	std	Y+1, r24	; 0x01
    2148:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    214a:	89 81       	ldd	r24, Y+1	; 0x01
    214c:	84 30       	cpi	r24, 0x04	; 4
    214e:	90 f5       	brcc	.+100    	; 0x21b4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2150:	89 81       	ldd	r24, Y+1	; 0x01
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	3c 83       	std	Y+4, r19	; 0x04
    2158:	2b 83       	std	Y+3, r18	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	91 05       	cpc	r25, r1
    2162:	d1 f0       	breq	.+52     	; 0x2198 <GPIO_setupPortDirection+0x5e>
    2164:	2b 81       	ldd	r18, Y+3	; 0x03
    2166:	3c 81       	ldd	r19, Y+4	; 0x04
    2168:	22 30       	cpi	r18, 0x02	; 2
    216a:	31 05       	cpc	r19, r1
    216c:	2c f4       	brge	.+10     	; 0x2178 <GPIO_setupPortDirection+0x3e>
    216e:	8b 81       	ldd	r24, Y+3	; 0x03
    2170:	9c 81       	ldd	r25, Y+4	; 0x04
    2172:	00 97       	sbiw	r24, 0x00	; 0
    2174:	61 f0       	breq	.+24     	; 0x218e <GPIO_setupPortDirection+0x54>
    2176:	1e c0       	rjmp	.+60     	; 0x21b4 <GPIO_setupPortDirection+0x7a>
    2178:	2b 81       	ldd	r18, Y+3	; 0x03
    217a:	3c 81       	ldd	r19, Y+4	; 0x04
    217c:	22 30       	cpi	r18, 0x02	; 2
    217e:	31 05       	cpc	r19, r1
    2180:	81 f0       	breq	.+32     	; 0x21a2 <GPIO_setupPortDirection+0x68>
    2182:	8b 81       	ldd	r24, Y+3	; 0x03
    2184:	9c 81       	ldd	r25, Y+4	; 0x04
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	81 f0       	breq	.+32     	; 0x21ac <GPIO_setupPortDirection+0x72>
    218c:	13 c0       	rjmp	.+38     	; 0x21b4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    218e:	ea e3       	ldi	r30, 0x3A	; 58
    2190:	f0 e0       	ldi	r31, 0x00	; 0
    2192:	8a 81       	ldd	r24, Y+2	; 0x02
    2194:	80 83       	st	Z, r24
    2196:	0e c0       	rjmp	.+28     	; 0x21b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2198:	e7 e3       	ldi	r30, 0x37	; 55
    219a:	f0 e0       	ldi	r31, 0x00	; 0
    219c:	8a 81       	ldd	r24, Y+2	; 0x02
    219e:	80 83       	st	Z, r24
    21a0:	09 c0       	rjmp	.+18     	; 0x21b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    21a2:	e4 e3       	ldi	r30, 0x34	; 52
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	8a 81       	ldd	r24, Y+2	; 0x02
    21a8:	80 83       	st	Z, r24
    21aa:	04 c0       	rjmp	.+8      	; 0x21b4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    21ac:	e1 e3       	ldi	r30, 0x31	; 49
    21ae:	f0 e0       	ldi	r31, 0x00	; 0
    21b0:	8a 81       	ldd	r24, Y+2	; 0x02
    21b2:	80 83       	st	Z, r24
			break;
		}
	}
}
    21b4:	0f 90       	pop	r0
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	cf 91       	pop	r28
    21be:	df 91       	pop	r29
    21c0:	08 95       	ret

000021c2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    21c2:	df 93       	push	r29
    21c4:	cf 93       	push	r28
    21c6:	00 d0       	rcall	.+0      	; 0x21c8 <GPIO_writePort+0x6>
    21c8:	00 d0       	rcall	.+0      	; 0x21ca <GPIO_writePort+0x8>
    21ca:	cd b7       	in	r28, 0x3d	; 61
    21cc:	de b7       	in	r29, 0x3e	; 62
    21ce:	89 83       	std	Y+1, r24	; 0x01
    21d0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21d2:	89 81       	ldd	r24, Y+1	; 0x01
    21d4:	84 30       	cpi	r24, 0x04	; 4
    21d6:	90 f5       	brcc	.+100    	; 0x223c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	3c 83       	std	Y+4, r19	; 0x04
    21e0:	2b 83       	std	Y+3, r18	; 0x03
    21e2:	8b 81       	ldd	r24, Y+3	; 0x03
    21e4:	9c 81       	ldd	r25, Y+4	; 0x04
    21e6:	81 30       	cpi	r24, 0x01	; 1
    21e8:	91 05       	cpc	r25, r1
    21ea:	d1 f0       	breq	.+52     	; 0x2220 <GPIO_writePort+0x5e>
    21ec:	2b 81       	ldd	r18, Y+3	; 0x03
    21ee:	3c 81       	ldd	r19, Y+4	; 0x04
    21f0:	22 30       	cpi	r18, 0x02	; 2
    21f2:	31 05       	cpc	r19, r1
    21f4:	2c f4       	brge	.+10     	; 0x2200 <GPIO_writePort+0x3e>
    21f6:	8b 81       	ldd	r24, Y+3	; 0x03
    21f8:	9c 81       	ldd	r25, Y+4	; 0x04
    21fa:	00 97       	sbiw	r24, 0x00	; 0
    21fc:	61 f0       	breq	.+24     	; 0x2216 <GPIO_writePort+0x54>
    21fe:	1e c0       	rjmp	.+60     	; 0x223c <GPIO_writePort+0x7a>
    2200:	2b 81       	ldd	r18, Y+3	; 0x03
    2202:	3c 81       	ldd	r19, Y+4	; 0x04
    2204:	22 30       	cpi	r18, 0x02	; 2
    2206:	31 05       	cpc	r19, r1
    2208:	81 f0       	breq	.+32     	; 0x222a <GPIO_writePort+0x68>
    220a:	8b 81       	ldd	r24, Y+3	; 0x03
    220c:	9c 81       	ldd	r25, Y+4	; 0x04
    220e:	83 30       	cpi	r24, 0x03	; 3
    2210:	91 05       	cpc	r25, r1
    2212:	81 f0       	breq	.+32     	; 0x2234 <GPIO_writePort+0x72>
    2214:	13 c0       	rjmp	.+38     	; 0x223c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    2216:	eb e3       	ldi	r30, 0x3B	; 59
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	8a 81       	ldd	r24, Y+2	; 0x02
    221c:	80 83       	st	Z, r24
    221e:	0e c0       	rjmp	.+28     	; 0x223c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    2220:	e8 e3       	ldi	r30, 0x38	; 56
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	8a 81       	ldd	r24, Y+2	; 0x02
    2226:	80 83       	st	Z, r24
    2228:	09 c0       	rjmp	.+18     	; 0x223c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    222a:	e5 e3       	ldi	r30, 0x35	; 53
    222c:	f0 e0       	ldi	r31, 0x00	; 0
    222e:	8a 81       	ldd	r24, Y+2	; 0x02
    2230:	80 83       	st	Z, r24
    2232:	04 c0       	rjmp	.+8      	; 0x223c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2234:	e2 e3       	ldi	r30, 0x32	; 50
    2236:	f0 e0       	ldi	r31, 0x00	; 0
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	80 83       	st	Z, r24
			break;
		}
	}
}
    223c:	0f 90       	pop	r0
    223e:	0f 90       	pop	r0
    2240:	0f 90       	pop	r0
    2242:	0f 90       	pop	r0
    2244:	cf 91       	pop	r28
    2246:	df 91       	pop	r29
    2248:	08 95       	ret

0000224a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    224a:	df 93       	push	r29
    224c:	cf 93       	push	r28
    224e:	00 d0       	rcall	.+0      	; 0x2250 <GPIO_readPort+0x6>
    2250:	00 d0       	rcall	.+0      	; 0x2252 <GPIO_readPort+0x8>
    2252:	cd b7       	in	r28, 0x3d	; 61
    2254:	de b7       	in	r29, 0x3e	; 62
    2256:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2258:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    225a:	8a 81       	ldd	r24, Y+2	; 0x02
    225c:	84 30       	cpi	r24, 0x04	; 4
    225e:	90 f5       	brcc	.+100    	; 0x22c4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2260:	8a 81       	ldd	r24, Y+2	; 0x02
    2262:	28 2f       	mov	r18, r24
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	3c 83       	std	Y+4, r19	; 0x04
    2268:	2b 83       	std	Y+3, r18	; 0x03
    226a:	8b 81       	ldd	r24, Y+3	; 0x03
    226c:	9c 81       	ldd	r25, Y+4	; 0x04
    226e:	81 30       	cpi	r24, 0x01	; 1
    2270:	91 05       	cpc	r25, r1
    2272:	d1 f0       	breq	.+52     	; 0x22a8 <GPIO_readPort+0x5e>
    2274:	2b 81       	ldd	r18, Y+3	; 0x03
    2276:	3c 81       	ldd	r19, Y+4	; 0x04
    2278:	22 30       	cpi	r18, 0x02	; 2
    227a:	31 05       	cpc	r19, r1
    227c:	2c f4       	brge	.+10     	; 0x2288 <GPIO_readPort+0x3e>
    227e:	8b 81       	ldd	r24, Y+3	; 0x03
    2280:	9c 81       	ldd	r25, Y+4	; 0x04
    2282:	00 97       	sbiw	r24, 0x00	; 0
    2284:	61 f0       	breq	.+24     	; 0x229e <GPIO_readPort+0x54>
    2286:	1e c0       	rjmp	.+60     	; 0x22c4 <GPIO_readPort+0x7a>
    2288:	2b 81       	ldd	r18, Y+3	; 0x03
    228a:	3c 81       	ldd	r19, Y+4	; 0x04
    228c:	22 30       	cpi	r18, 0x02	; 2
    228e:	31 05       	cpc	r19, r1
    2290:	81 f0       	breq	.+32     	; 0x22b2 <GPIO_readPort+0x68>
    2292:	8b 81       	ldd	r24, Y+3	; 0x03
    2294:	9c 81       	ldd	r25, Y+4	; 0x04
    2296:	83 30       	cpi	r24, 0x03	; 3
    2298:	91 05       	cpc	r25, r1
    229a:	81 f0       	breq	.+32     	; 0x22bc <GPIO_readPort+0x72>
    229c:	13 c0       	rjmp	.+38     	; 0x22c4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    229e:	e9 e3       	ldi	r30, 0x39	; 57
    22a0:	f0 e0       	ldi	r31, 0x00	; 0
    22a2:	80 81       	ld	r24, Z
    22a4:	89 83       	std	Y+1, r24	; 0x01
    22a6:	0e c0       	rjmp	.+28     	; 0x22c4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    22a8:	e6 e3       	ldi	r30, 0x36	; 54
    22aa:	f0 e0       	ldi	r31, 0x00	; 0
    22ac:	80 81       	ld	r24, Z
    22ae:	89 83       	std	Y+1, r24	; 0x01
    22b0:	09 c0       	rjmp	.+18     	; 0x22c4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    22b2:	e3 e3       	ldi	r30, 0x33	; 51
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	89 83       	std	Y+1, r24	; 0x01
    22ba:	04 c0       	rjmp	.+8      	; 0x22c4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    22bc:	e0 e3       	ldi	r30, 0x30	; 48
    22be:	f0 e0       	ldi	r31, 0x00	; 0
    22c0:	80 81       	ld	r24, Z
    22c2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    22c4:	89 81       	ldd	r24, Y+1	; 0x01
}
    22c6:	0f 90       	pop	r0
    22c8:	0f 90       	pop	r0
    22ca:	0f 90       	pop	r0
    22cc:	0f 90       	pop	r0
    22ce:	cf 91       	pop	r28
    22d0:	df 91       	pop	r29
    22d2:	08 95       	ret

000022d4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22d4:	df 93       	push	r29
    22d6:	cf 93       	push	r28
    22d8:	cd b7       	in	r28, 0x3d	; 61
    22da:	de b7       	in	r29, 0x3e	; 62
    22dc:	2e 97       	sbiw	r28, 0x0e	; 14
    22de:	0f b6       	in	r0, 0x3f	; 63
    22e0:	f8 94       	cli
    22e2:	de bf       	out	0x3e, r29	; 62
    22e4:	0f be       	out	0x3f, r0	; 63
    22e6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	64 e0       	ldi	r22, 0x04	; 4
    22ec:	41 e0       	ldi	r20, 0x01	; 1
    22ee:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22f2:	81 e0       	ldi	r24, 0x01	; 1
    22f4:	62 e0       	ldi	r22, 0x02	; 2
    22f6:	41 e0       	ldi	r20, 0x01	; 1
    22f8:	0e 94 2c 0e 	call	0x1c58	; 0x1c58 <GPIO_setupPinDirection>
    22fc:	80 e0       	ldi	r24, 0x00	; 0
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	a0 ea       	ldi	r26, 0xA0	; 160
    2302:	b1 e4       	ldi	r27, 0x41	; 65
    2304:	8b 87       	std	Y+11, r24	; 0x0b
    2306:	9c 87       	std	Y+12, r25	; 0x0c
    2308:	ad 87       	std	Y+13, r26	; 0x0d
    230a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230c:	6b 85       	ldd	r22, Y+11	; 0x0b
    230e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2310:	8d 85       	ldd	r24, Y+13	; 0x0d
    2312:	9e 85       	ldd	r25, Y+14	; 0x0e
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	4a e7       	ldi	r20, 0x7A	; 122
    231a:	53 e4       	ldi	r21, 0x43	; 67
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	8f 83       	std	Y+7, r24	; 0x07
    2326:	98 87       	std	Y+8, r25	; 0x08
    2328:	a9 87       	std	Y+9, r26	; 0x09
    232a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    232c:	6f 81       	ldd	r22, Y+7	; 0x07
    232e:	78 85       	ldd	r23, Y+8	; 0x08
    2330:	89 85       	ldd	r24, Y+9	; 0x09
    2332:	9a 85       	ldd	r25, Y+10	; 0x0a
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	40 e8       	ldi	r20, 0x80	; 128
    233a:	5f e3       	ldi	r21, 0x3F	; 63
    233c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2340:	88 23       	and	r24, r24
    2342:	2c f4       	brge	.+10     	; 0x234e <LCD_init+0x7a>
		__ticks = 1;
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	90 e0       	ldi	r25, 0x00	; 0
    2348:	9e 83       	std	Y+6, r25	; 0x06
    234a:	8d 83       	std	Y+5, r24	; 0x05
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <LCD_init+0xf8>
	else if (__tmp > 65535)
    234e:	6f 81       	ldd	r22, Y+7	; 0x07
    2350:	78 85       	ldd	r23, Y+8	; 0x08
    2352:	89 85       	ldd	r24, Y+9	; 0x09
    2354:	9a 85       	ldd	r25, Y+10	; 0x0a
    2356:	20 e0       	ldi	r18, 0x00	; 0
    2358:	3f ef       	ldi	r19, 0xFF	; 255
    235a:	4f e7       	ldi	r20, 0x7F	; 127
    235c:	57 e4       	ldi	r21, 0x47	; 71
    235e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2362:	18 16       	cp	r1, r24
    2364:	4c f5       	brge	.+82     	; 0x23b8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2366:	6b 85       	ldd	r22, Y+11	; 0x0b
    2368:	7c 85       	ldd	r23, Y+12	; 0x0c
    236a:	8d 85       	ldd	r24, Y+13	; 0x0d
    236c:	9e 85       	ldd	r25, Y+14	; 0x0e
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	40 e2       	ldi	r20, 0x20	; 32
    2374:	51 e4       	ldi	r21, 0x41	; 65
    2376:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	bc 01       	movw	r22, r24
    2380:	cd 01       	movw	r24, r26
    2382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2386:	dc 01       	movw	r26, r24
    2388:	cb 01       	movw	r24, r22
    238a:	9e 83       	std	Y+6, r25	; 0x06
    238c:	8d 83       	std	Y+5, r24	; 0x05
    238e:	0f c0       	rjmp	.+30     	; 0x23ae <LCD_init+0xda>
    2390:	89 e1       	ldi	r24, 0x19	; 25
    2392:	90 e0       	ldi	r25, 0x00	; 0
    2394:	9c 83       	std	Y+4, r25	; 0x04
    2396:	8b 83       	std	Y+3, r24	; 0x03
    2398:	8b 81       	ldd	r24, Y+3	; 0x03
    239a:	9c 81       	ldd	r25, Y+4	; 0x04
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	f1 f7       	brne	.-4      	; 0x239c <LCD_init+0xc8>
    23a0:	9c 83       	std	Y+4, r25	; 0x04
    23a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23ae:	8d 81       	ldd	r24, Y+5	; 0x05
    23b0:	9e 81       	ldd	r25, Y+6	; 0x06
    23b2:	00 97       	sbiw	r24, 0x00	; 0
    23b4:	69 f7       	brne	.-38     	; 0x2390 <LCD_init+0xbc>
    23b6:	14 c0       	rjmp	.+40     	; 0x23e0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b8:	6f 81       	ldd	r22, Y+7	; 0x07
    23ba:	78 85       	ldd	r23, Y+8	; 0x08
    23bc:	89 85       	ldd	r24, Y+9	; 0x09
    23be:	9a 85       	ldd	r25, Y+10	; 0x0a
    23c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c4:	dc 01       	movw	r26, r24
    23c6:	cb 01       	movw	r24, r22
    23c8:	9e 83       	std	Y+6, r25	; 0x06
    23ca:	8d 83       	std	Y+5, r24	; 0x05
    23cc:	8d 81       	ldd	r24, Y+5	; 0x05
    23ce:	9e 81       	ldd	r25, Y+6	; 0x06
    23d0:	9a 83       	std	Y+2, r25	; 0x02
    23d2:	89 83       	std	Y+1, r24	; 0x01
    23d4:	89 81       	ldd	r24, Y+1	; 0x01
    23d6:	9a 81       	ldd	r25, Y+2	; 0x02
    23d8:	01 97       	sbiw	r24, 0x01	; 1
    23da:	f1 f7       	brne	.-4      	; 0x23d8 <LCD_init+0x104>
    23dc:	9a 83       	std	Y+2, r25	; 0x02
    23de:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    23e0:	80 e0       	ldi	r24, 0x00	; 0
    23e2:	6f ef       	ldi	r22, 0xFF	; 255
    23e4:	0e 94 9d 10 	call	0x213a	; 0x213a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    23e8:	88 e3       	ldi	r24, 0x38	; 56
    23ea:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23ee:	8c e0       	ldi	r24, 0x0C	; 12
    23f0:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    23f4:	81 e0       	ldi	r24, 0x01	; 1
    23f6:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_sendCommand>
}
    23fa:	2e 96       	adiw	r28, 0x0e	; 14
    23fc:	0f b6       	in	r0, 0x3f	; 63
    23fe:	f8 94       	cli
    2400:	de bf       	out	0x3e, r29	; 62
    2402:	0f be       	out	0x3f, r0	; 63
    2404:	cd bf       	out	0x3d, r28	; 61
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	cd b7       	in	r28, 0x3d	; 61
    2412:	de b7       	in	r29, 0x3e	; 62
    2414:	e9 97       	sbiw	r28, 0x39	; 57
    2416:	0f b6       	in	r0, 0x3f	; 63
    2418:	f8 94       	cli
    241a:	de bf       	out	0x3e, r29	; 62
    241c:	0f be       	out	0x3f, r0	; 63
    241e:	cd bf       	out	0x3d, r28	; 61
    2420:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	64 e0       	ldi	r22, 0x04	; 4
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    242c:	80 e0       	ldi	r24, 0x00	; 0
    242e:	90 e0       	ldi	r25, 0x00	; 0
    2430:	a0 e8       	ldi	r26, 0x80	; 128
    2432:	bf e3       	ldi	r27, 0x3F	; 63
    2434:	8d ab       	std	Y+53, r24	; 0x35
    2436:	9e ab       	std	Y+54, r25	; 0x36
    2438:	af ab       	std	Y+55, r26	; 0x37
    243a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    243c:	6d a9       	ldd	r22, Y+53	; 0x35
    243e:	7e a9       	ldd	r23, Y+54	; 0x36
    2440:	8f a9       	ldd	r24, Y+55	; 0x37
    2442:	98 ad       	ldd	r25, Y+56	; 0x38
    2444:	20 e0       	ldi	r18, 0x00	; 0
    2446:	30 e0       	ldi	r19, 0x00	; 0
    2448:	4a e7       	ldi	r20, 0x7A	; 122
    244a:	53 e4       	ldi	r21, 0x43	; 67
    244c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2450:	dc 01       	movw	r26, r24
    2452:	cb 01       	movw	r24, r22
    2454:	89 ab       	std	Y+49, r24	; 0x31
    2456:	9a ab       	std	Y+50, r25	; 0x32
    2458:	ab ab       	std	Y+51, r26	; 0x33
    245a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    245c:	69 a9       	ldd	r22, Y+49	; 0x31
    245e:	7a a9       	ldd	r23, Y+50	; 0x32
    2460:	8b a9       	ldd	r24, Y+51	; 0x33
    2462:	9c a9       	ldd	r25, Y+52	; 0x34
    2464:	20 e0       	ldi	r18, 0x00	; 0
    2466:	30 e0       	ldi	r19, 0x00	; 0
    2468:	40 e8       	ldi	r20, 0x80	; 128
    246a:	5f e3       	ldi	r21, 0x3F	; 63
    246c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2470:	88 23       	and	r24, r24
    2472:	2c f4       	brge	.+10     	; 0x247e <LCD_sendCommand+0x72>
		__ticks = 1;
    2474:	81 e0       	ldi	r24, 0x01	; 1
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	98 ab       	std	Y+48, r25	; 0x30
    247a:	8f a7       	std	Y+47, r24	; 0x2f
    247c:	3f c0       	rjmp	.+126    	; 0x24fc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    247e:	69 a9       	ldd	r22, Y+49	; 0x31
    2480:	7a a9       	ldd	r23, Y+50	; 0x32
    2482:	8b a9       	ldd	r24, Y+51	; 0x33
    2484:	9c a9       	ldd	r25, Y+52	; 0x34
    2486:	20 e0       	ldi	r18, 0x00	; 0
    2488:	3f ef       	ldi	r19, 0xFF	; 255
    248a:	4f e7       	ldi	r20, 0x7F	; 127
    248c:	57 e4       	ldi	r21, 0x47	; 71
    248e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2492:	18 16       	cp	r1, r24
    2494:	4c f5       	brge	.+82     	; 0x24e8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2496:	6d a9       	ldd	r22, Y+53	; 0x35
    2498:	7e a9       	ldd	r23, Y+54	; 0x36
    249a:	8f a9       	ldd	r24, Y+55	; 0x37
    249c:	98 ad       	ldd	r25, Y+56	; 0x38
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e2       	ldi	r20, 0x20	; 32
    24a4:	51 e4       	ldi	r21, 0x41	; 65
    24a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24aa:	dc 01       	movw	r26, r24
    24ac:	cb 01       	movw	r24, r22
    24ae:	bc 01       	movw	r22, r24
    24b0:	cd 01       	movw	r24, r26
    24b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24b6:	dc 01       	movw	r26, r24
    24b8:	cb 01       	movw	r24, r22
    24ba:	98 ab       	std	Y+48, r25	; 0x30
    24bc:	8f a7       	std	Y+47, r24	; 0x2f
    24be:	0f c0       	rjmp	.+30     	; 0x24de <LCD_sendCommand+0xd2>
    24c0:	89 e1       	ldi	r24, 0x19	; 25
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9e a7       	std	Y+46, r25	; 0x2e
    24c6:	8d a7       	std	Y+45, r24	; 0x2d
    24c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    24ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    24cc:	01 97       	sbiw	r24, 0x01	; 1
    24ce:	f1 f7       	brne	.-4      	; 0x24cc <LCD_sendCommand+0xc0>
    24d0:	9e a7       	std	Y+46, r25	; 0x2e
    24d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24d6:	98 a9       	ldd	r25, Y+48	; 0x30
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	98 ab       	std	Y+48, r25	; 0x30
    24dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24de:	8f a5       	ldd	r24, Y+47	; 0x2f
    24e0:	98 a9       	ldd	r25, Y+48	; 0x30
    24e2:	00 97       	sbiw	r24, 0x00	; 0
    24e4:	69 f7       	brne	.-38     	; 0x24c0 <LCD_sendCommand+0xb4>
    24e6:	14 c0       	rjmp	.+40     	; 0x2510 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24e8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ea:	7a a9       	ldd	r23, Y+50	; 0x32
    24ec:	8b a9       	ldd	r24, Y+51	; 0x33
    24ee:	9c a9       	ldd	r25, Y+52	; 0x34
    24f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f4:	dc 01       	movw	r26, r24
    24f6:	cb 01       	movw	r24, r22
    24f8:	98 ab       	std	Y+48, r25	; 0x30
    24fa:	8f a7       	std	Y+47, r24	; 0x2f
    24fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24fe:	98 a9       	ldd	r25, Y+48	; 0x30
    2500:	9c a7       	std	Y+44, r25	; 0x2c
    2502:	8b a7       	std	Y+43, r24	; 0x2b
    2504:	8b a5       	ldd	r24, Y+43	; 0x2b
    2506:	9c a5       	ldd	r25, Y+44	; 0x2c
    2508:	01 97       	sbiw	r24, 0x01	; 1
    250a:	f1 f7       	brne	.-4      	; 0x2508 <LCD_sendCommand+0xfc>
    250c:	9c a7       	std	Y+44, r25	; 0x2c
    250e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2510:	81 e0       	ldi	r24, 0x01	; 1
    2512:	62 e0       	ldi	r22, 0x02	; 2
    2514:	41 e0       	ldi	r20, 0x01	; 1
    2516:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    251a:	80 e0       	ldi	r24, 0x00	; 0
    251c:	90 e0       	ldi	r25, 0x00	; 0
    251e:	a0 e8       	ldi	r26, 0x80	; 128
    2520:	bf e3       	ldi	r27, 0x3F	; 63
    2522:	8f a3       	std	Y+39, r24	; 0x27
    2524:	98 a7       	std	Y+40, r25	; 0x28
    2526:	a9 a7       	std	Y+41, r26	; 0x29
    2528:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    252a:	6f a1       	ldd	r22, Y+39	; 0x27
    252c:	78 a5       	ldd	r23, Y+40	; 0x28
    252e:	89 a5       	ldd	r24, Y+41	; 0x29
    2530:	9a a5       	ldd	r25, Y+42	; 0x2a
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	4a e7       	ldi	r20, 0x7A	; 122
    2538:	53 e4       	ldi	r21, 0x43	; 67
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	8b a3       	std	Y+35, r24	; 0x23
    2544:	9c a3       	std	Y+36, r25	; 0x24
    2546:	ad a3       	std	Y+37, r26	; 0x25
    2548:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    254a:	6b a1       	ldd	r22, Y+35	; 0x23
    254c:	7c a1       	ldd	r23, Y+36	; 0x24
    254e:	8d a1       	ldd	r24, Y+37	; 0x25
    2550:	9e a1       	ldd	r25, Y+38	; 0x26
    2552:	20 e0       	ldi	r18, 0x00	; 0
    2554:	30 e0       	ldi	r19, 0x00	; 0
    2556:	40 e8       	ldi	r20, 0x80	; 128
    2558:	5f e3       	ldi	r21, 0x3F	; 63
    255a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    255e:	88 23       	and	r24, r24
    2560:	2c f4       	brge	.+10     	; 0x256c <LCD_sendCommand+0x160>
		__ticks = 1;
    2562:	81 e0       	ldi	r24, 0x01	; 1
    2564:	90 e0       	ldi	r25, 0x00	; 0
    2566:	9a a3       	std	Y+34, r25	; 0x22
    2568:	89 a3       	std	Y+33, r24	; 0x21
    256a:	3f c0       	rjmp	.+126    	; 0x25ea <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    256c:	6b a1       	ldd	r22, Y+35	; 0x23
    256e:	7c a1       	ldd	r23, Y+36	; 0x24
    2570:	8d a1       	ldd	r24, Y+37	; 0x25
    2572:	9e a1       	ldd	r25, Y+38	; 0x26
    2574:	20 e0       	ldi	r18, 0x00	; 0
    2576:	3f ef       	ldi	r19, 0xFF	; 255
    2578:	4f e7       	ldi	r20, 0x7F	; 127
    257a:	57 e4       	ldi	r21, 0x47	; 71
    257c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2580:	18 16       	cp	r1, r24
    2582:	4c f5       	brge	.+82     	; 0x25d6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2584:	6f a1       	ldd	r22, Y+39	; 0x27
    2586:	78 a5       	ldd	r23, Y+40	; 0x28
    2588:	89 a5       	ldd	r24, Y+41	; 0x29
    258a:	9a a5       	ldd	r25, Y+42	; 0x2a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e2       	ldi	r20, 0x20	; 32
    2592:	51 e4       	ldi	r21, 0x41	; 65
    2594:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2598:	dc 01       	movw	r26, r24
    259a:	cb 01       	movw	r24, r22
    259c:	bc 01       	movw	r22, r24
    259e:	cd 01       	movw	r24, r26
    25a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25a4:	dc 01       	movw	r26, r24
    25a6:	cb 01       	movw	r24, r22
    25a8:	9a a3       	std	Y+34, r25	; 0x22
    25aa:	89 a3       	std	Y+33, r24	; 0x21
    25ac:	0f c0       	rjmp	.+30     	; 0x25cc <LCD_sendCommand+0x1c0>
    25ae:	89 e1       	ldi	r24, 0x19	; 25
    25b0:	90 e0       	ldi	r25, 0x00	; 0
    25b2:	98 a3       	std	Y+32, r25	; 0x20
    25b4:	8f 8f       	std	Y+31, r24	; 0x1f
    25b6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    25b8:	98 a1       	ldd	r25, Y+32	; 0x20
    25ba:	01 97       	sbiw	r24, 0x01	; 1
    25bc:	f1 f7       	brne	.-4      	; 0x25ba <LCD_sendCommand+0x1ae>
    25be:	98 a3       	std	Y+32, r25	; 0x20
    25c0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	9a a3       	std	Y+34, r25	; 0x22
    25ca:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25cc:	89 a1       	ldd	r24, Y+33	; 0x21
    25ce:	9a a1       	ldd	r25, Y+34	; 0x22
    25d0:	00 97       	sbiw	r24, 0x00	; 0
    25d2:	69 f7       	brne	.-38     	; 0x25ae <LCD_sendCommand+0x1a2>
    25d4:	14 c0       	rjmp	.+40     	; 0x25fe <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25d6:	6b a1       	ldd	r22, Y+35	; 0x23
    25d8:	7c a1       	ldd	r23, Y+36	; 0x24
    25da:	8d a1       	ldd	r24, Y+37	; 0x25
    25dc:	9e a1       	ldd	r25, Y+38	; 0x26
    25de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25e2:	dc 01       	movw	r26, r24
    25e4:	cb 01       	movw	r24, r22
    25e6:	9a a3       	std	Y+34, r25	; 0x22
    25e8:	89 a3       	std	Y+33, r24	; 0x21
    25ea:	89 a1       	ldd	r24, Y+33	; 0x21
    25ec:	9a a1       	ldd	r25, Y+34	; 0x22
    25ee:	9e 8f       	std	Y+30, r25	; 0x1e
    25f0:	8d 8f       	std	Y+29, r24	; 0x1d
    25f2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25f4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25f6:	01 97       	sbiw	r24, 0x01	; 1
    25f8:	f1 f7       	brne	.-4      	; 0x25f6 <LCD_sendCommand+0x1ea>
    25fa:	9e 8f       	std	Y+30, r25	; 0x1e
    25fc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    25fe:	80 e0       	ldi	r24, 0x00	; 0
    2600:	69 ad       	ldd	r22, Y+57	; 0x39
    2602:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <GPIO_writePort>
    2606:	80 e0       	ldi	r24, 0x00	; 0
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	a0 e8       	ldi	r26, 0x80	; 128
    260c:	bf e3       	ldi	r27, 0x3F	; 63
    260e:	89 8f       	std	Y+25, r24	; 0x19
    2610:	9a 8f       	std	Y+26, r25	; 0x1a
    2612:	ab 8f       	std	Y+27, r26	; 0x1b
    2614:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2616:	69 8d       	ldd	r22, Y+25	; 0x19
    2618:	7a 8d       	ldd	r23, Y+26	; 0x1a
    261a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    261c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	4a e7       	ldi	r20, 0x7A	; 122
    2624:	53 e4       	ldi	r21, 0x43	; 67
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	8d 8b       	std	Y+21, r24	; 0x15
    2630:	9e 8b       	std	Y+22, r25	; 0x16
    2632:	af 8b       	std	Y+23, r26	; 0x17
    2634:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2636:	6d 89       	ldd	r22, Y+21	; 0x15
    2638:	7e 89       	ldd	r23, Y+22	; 0x16
    263a:	8f 89       	ldd	r24, Y+23	; 0x17
    263c:	98 8d       	ldd	r25, Y+24	; 0x18
    263e:	20 e0       	ldi	r18, 0x00	; 0
    2640:	30 e0       	ldi	r19, 0x00	; 0
    2642:	40 e8       	ldi	r20, 0x80	; 128
    2644:	5f e3       	ldi	r21, 0x3F	; 63
    2646:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    264a:	88 23       	and	r24, r24
    264c:	2c f4       	brge	.+10     	; 0x2658 <LCD_sendCommand+0x24c>
		__ticks = 1;
    264e:	81 e0       	ldi	r24, 0x01	; 1
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	9c 8b       	std	Y+20, r25	; 0x14
    2654:	8b 8b       	std	Y+19, r24	; 0x13
    2656:	3f c0       	rjmp	.+126    	; 0x26d6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2658:	6d 89       	ldd	r22, Y+21	; 0x15
    265a:	7e 89       	ldd	r23, Y+22	; 0x16
    265c:	8f 89       	ldd	r24, Y+23	; 0x17
    265e:	98 8d       	ldd	r25, Y+24	; 0x18
    2660:	20 e0       	ldi	r18, 0x00	; 0
    2662:	3f ef       	ldi	r19, 0xFF	; 255
    2664:	4f e7       	ldi	r20, 0x7F	; 127
    2666:	57 e4       	ldi	r21, 0x47	; 71
    2668:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    266c:	18 16       	cp	r1, r24
    266e:	4c f5       	brge	.+82     	; 0x26c2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2670:	69 8d       	ldd	r22, Y+25	; 0x19
    2672:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2674:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2676:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	40 e2       	ldi	r20, 0x20	; 32
    267e:	51 e4       	ldi	r21, 0x41	; 65
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	bc 01       	movw	r22, r24
    268a:	cd 01       	movw	r24, r26
    268c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2690:	dc 01       	movw	r26, r24
    2692:	cb 01       	movw	r24, r22
    2694:	9c 8b       	std	Y+20, r25	; 0x14
    2696:	8b 8b       	std	Y+19, r24	; 0x13
    2698:	0f c0       	rjmp	.+30     	; 0x26b8 <LCD_sendCommand+0x2ac>
    269a:	89 e1       	ldi	r24, 0x19	; 25
    269c:	90 e0       	ldi	r25, 0x00	; 0
    269e:	9a 8b       	std	Y+18, r25	; 0x12
    26a0:	89 8b       	std	Y+17, r24	; 0x11
    26a2:	89 89       	ldd	r24, Y+17	; 0x11
    26a4:	9a 89       	ldd	r25, Y+18	; 0x12
    26a6:	01 97       	sbiw	r24, 0x01	; 1
    26a8:	f1 f7       	brne	.-4      	; 0x26a6 <LCD_sendCommand+0x29a>
    26aa:	9a 8b       	std	Y+18, r25	; 0x12
    26ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ae:	8b 89       	ldd	r24, Y+19	; 0x13
    26b0:	9c 89       	ldd	r25, Y+20	; 0x14
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	9c 8b       	std	Y+20, r25	; 0x14
    26b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b8:	8b 89       	ldd	r24, Y+19	; 0x13
    26ba:	9c 89       	ldd	r25, Y+20	; 0x14
    26bc:	00 97       	sbiw	r24, 0x00	; 0
    26be:	69 f7       	brne	.-38     	; 0x269a <LCD_sendCommand+0x28e>
    26c0:	14 c0       	rjmp	.+40     	; 0x26ea <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26c2:	6d 89       	ldd	r22, Y+21	; 0x15
    26c4:	7e 89       	ldd	r23, Y+22	; 0x16
    26c6:	8f 89       	ldd	r24, Y+23	; 0x17
    26c8:	98 8d       	ldd	r25, Y+24	; 0x18
    26ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ce:	dc 01       	movw	r26, r24
    26d0:	cb 01       	movw	r24, r22
    26d2:	9c 8b       	std	Y+20, r25	; 0x14
    26d4:	8b 8b       	std	Y+19, r24	; 0x13
    26d6:	8b 89       	ldd	r24, Y+19	; 0x13
    26d8:	9c 89       	ldd	r25, Y+20	; 0x14
    26da:	98 8b       	std	Y+16, r25	; 0x10
    26dc:	8f 87       	std	Y+15, r24	; 0x0f
    26de:	8f 85       	ldd	r24, Y+15	; 0x0f
    26e0:	98 89       	ldd	r25, Y+16	; 0x10
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_sendCommand+0x2d6>
    26e6:	98 8b       	std	Y+16, r25	; 0x10
    26e8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26ea:	81 e0       	ldi	r24, 0x01	; 1
    26ec:	62 e0       	ldi	r22, 0x02	; 2
    26ee:	40 e0       	ldi	r20, 0x00	; 0
    26f0:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	a0 e8       	ldi	r26, 0x80	; 128
    26fa:	bf e3       	ldi	r27, 0x3F	; 63
    26fc:	8b 87       	std	Y+11, r24	; 0x0b
    26fe:	9c 87       	std	Y+12, r25	; 0x0c
    2700:	ad 87       	std	Y+13, r26	; 0x0d
    2702:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2704:	6b 85       	ldd	r22, Y+11	; 0x0b
    2706:	7c 85       	ldd	r23, Y+12	; 0x0c
    2708:	8d 85       	ldd	r24, Y+13	; 0x0d
    270a:	9e 85       	ldd	r25, Y+14	; 0x0e
    270c:	20 e0       	ldi	r18, 0x00	; 0
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	4a e7       	ldi	r20, 0x7A	; 122
    2712:	53 e4       	ldi	r21, 0x43	; 67
    2714:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2718:	dc 01       	movw	r26, r24
    271a:	cb 01       	movw	r24, r22
    271c:	8f 83       	std	Y+7, r24	; 0x07
    271e:	98 87       	std	Y+8, r25	; 0x08
    2720:	a9 87       	std	Y+9, r26	; 0x09
    2722:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2724:	6f 81       	ldd	r22, Y+7	; 0x07
    2726:	78 85       	ldd	r23, Y+8	; 0x08
    2728:	89 85       	ldd	r24, Y+9	; 0x09
    272a:	9a 85       	ldd	r25, Y+10	; 0x0a
    272c:	20 e0       	ldi	r18, 0x00	; 0
    272e:	30 e0       	ldi	r19, 0x00	; 0
    2730:	40 e8       	ldi	r20, 0x80	; 128
    2732:	5f e3       	ldi	r21, 0x3F	; 63
    2734:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2738:	88 23       	and	r24, r24
    273a:	2c f4       	brge	.+10     	; 0x2746 <LCD_sendCommand+0x33a>
		__ticks = 1;
    273c:	81 e0       	ldi	r24, 0x01	; 1
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	9e 83       	std	Y+6, r25	; 0x06
    2742:	8d 83       	std	Y+5, r24	; 0x05
    2744:	3f c0       	rjmp	.+126    	; 0x27c4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2746:	6f 81       	ldd	r22, Y+7	; 0x07
    2748:	78 85       	ldd	r23, Y+8	; 0x08
    274a:	89 85       	ldd	r24, Y+9	; 0x09
    274c:	9a 85       	ldd	r25, Y+10	; 0x0a
    274e:	20 e0       	ldi	r18, 0x00	; 0
    2750:	3f ef       	ldi	r19, 0xFF	; 255
    2752:	4f e7       	ldi	r20, 0x7F	; 127
    2754:	57 e4       	ldi	r21, 0x47	; 71
    2756:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    275a:	18 16       	cp	r1, r24
    275c:	4c f5       	brge	.+82     	; 0x27b0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    275e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2760:	7c 85       	ldd	r23, Y+12	; 0x0c
    2762:	8d 85       	ldd	r24, Y+13	; 0x0d
    2764:	9e 85       	ldd	r25, Y+14	; 0x0e
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e2       	ldi	r20, 0x20	; 32
    276c:	51 e4       	ldi	r21, 0x41	; 65
    276e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2772:	dc 01       	movw	r26, r24
    2774:	cb 01       	movw	r24, r22
    2776:	bc 01       	movw	r22, r24
    2778:	cd 01       	movw	r24, r26
    277a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    277e:	dc 01       	movw	r26, r24
    2780:	cb 01       	movw	r24, r22
    2782:	9e 83       	std	Y+6, r25	; 0x06
    2784:	8d 83       	std	Y+5, r24	; 0x05
    2786:	0f c0       	rjmp	.+30     	; 0x27a6 <LCD_sendCommand+0x39a>
    2788:	89 e1       	ldi	r24, 0x19	; 25
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	9c 83       	std	Y+4, r25	; 0x04
    278e:	8b 83       	std	Y+3, r24	; 0x03
    2790:	8b 81       	ldd	r24, Y+3	; 0x03
    2792:	9c 81       	ldd	r25, Y+4	; 0x04
    2794:	01 97       	sbiw	r24, 0x01	; 1
    2796:	f1 f7       	brne	.-4      	; 0x2794 <LCD_sendCommand+0x388>
    2798:	9c 83       	std	Y+4, r25	; 0x04
    279a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	9e 83       	std	Y+6, r25	; 0x06
    27a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a6:	8d 81       	ldd	r24, Y+5	; 0x05
    27a8:	9e 81       	ldd	r25, Y+6	; 0x06
    27aa:	00 97       	sbiw	r24, 0x00	; 0
    27ac:	69 f7       	brne	.-38     	; 0x2788 <LCD_sendCommand+0x37c>
    27ae:	14 c0       	rjmp	.+40     	; 0x27d8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27b0:	6f 81       	ldd	r22, Y+7	; 0x07
    27b2:	78 85       	ldd	r23, Y+8	; 0x08
    27b4:	89 85       	ldd	r24, Y+9	; 0x09
    27b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27bc:	dc 01       	movw	r26, r24
    27be:	cb 01       	movw	r24, r22
    27c0:	9e 83       	std	Y+6, r25	; 0x06
    27c2:	8d 83       	std	Y+5, r24	; 0x05
    27c4:	8d 81       	ldd	r24, Y+5	; 0x05
    27c6:	9e 81       	ldd	r25, Y+6	; 0x06
    27c8:	9a 83       	std	Y+2, r25	; 0x02
    27ca:	89 83       	std	Y+1, r24	; 0x01
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
    27ce:	9a 81       	ldd	r25, Y+2	; 0x02
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <LCD_sendCommand+0x3c4>
    27d4:	9a 83       	std	Y+2, r25	; 0x02
    27d6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27d8:	e9 96       	adiw	r28, 0x39	; 57
    27da:	0f b6       	in	r0, 0x3f	; 63
    27dc:	f8 94       	cli
    27de:	de bf       	out	0x3e, r29	; 62
    27e0:	0f be       	out	0x3f, r0	; 63
    27e2:	cd bf       	out	0x3d, r28	; 61
    27e4:	cf 91       	pop	r28
    27e6:	df 91       	pop	r29
    27e8:	08 95       	ret

000027ea <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27ea:	df 93       	push	r29
    27ec:	cf 93       	push	r28
    27ee:	cd b7       	in	r28, 0x3d	; 61
    27f0:	de b7       	in	r29, 0x3e	; 62
    27f2:	e9 97       	sbiw	r28, 0x39	; 57
    27f4:	0f b6       	in	r0, 0x3f	; 63
    27f6:	f8 94       	cli
    27f8:	de bf       	out	0x3e, r29	; 62
    27fa:	0f be       	out	0x3f, r0	; 63
    27fc:	cd bf       	out	0x3d, r28	; 61
    27fe:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2800:	81 e0       	ldi	r24, 0x01	; 1
    2802:	64 e0       	ldi	r22, 0x04	; 4
    2804:	41 e0       	ldi	r20, 0x01	; 1
    2806:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    280a:	80 e0       	ldi	r24, 0x00	; 0
    280c:	90 e0       	ldi	r25, 0x00	; 0
    280e:	a0 e8       	ldi	r26, 0x80	; 128
    2810:	bf e3       	ldi	r27, 0x3F	; 63
    2812:	8d ab       	std	Y+53, r24	; 0x35
    2814:	9e ab       	std	Y+54, r25	; 0x36
    2816:	af ab       	std	Y+55, r26	; 0x37
    2818:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    281a:	6d a9       	ldd	r22, Y+53	; 0x35
    281c:	7e a9       	ldd	r23, Y+54	; 0x36
    281e:	8f a9       	ldd	r24, Y+55	; 0x37
    2820:	98 ad       	ldd	r25, Y+56	; 0x38
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	4a e7       	ldi	r20, 0x7A	; 122
    2828:	53 e4       	ldi	r21, 0x43	; 67
    282a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    282e:	dc 01       	movw	r26, r24
    2830:	cb 01       	movw	r24, r22
    2832:	89 ab       	std	Y+49, r24	; 0x31
    2834:	9a ab       	std	Y+50, r25	; 0x32
    2836:	ab ab       	std	Y+51, r26	; 0x33
    2838:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    283a:	69 a9       	ldd	r22, Y+49	; 0x31
    283c:	7a a9       	ldd	r23, Y+50	; 0x32
    283e:	8b a9       	ldd	r24, Y+51	; 0x33
    2840:	9c a9       	ldd	r25, Y+52	; 0x34
    2842:	20 e0       	ldi	r18, 0x00	; 0
    2844:	30 e0       	ldi	r19, 0x00	; 0
    2846:	40 e8       	ldi	r20, 0x80	; 128
    2848:	5f e3       	ldi	r21, 0x3F	; 63
    284a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    284e:	88 23       	and	r24, r24
    2850:	2c f4       	brge	.+10     	; 0x285c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	98 ab       	std	Y+48, r25	; 0x30
    2858:	8f a7       	std	Y+47, r24	; 0x2f
    285a:	3f c0       	rjmp	.+126    	; 0x28da <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    285c:	69 a9       	ldd	r22, Y+49	; 0x31
    285e:	7a a9       	ldd	r23, Y+50	; 0x32
    2860:	8b a9       	ldd	r24, Y+51	; 0x33
    2862:	9c a9       	ldd	r25, Y+52	; 0x34
    2864:	20 e0       	ldi	r18, 0x00	; 0
    2866:	3f ef       	ldi	r19, 0xFF	; 255
    2868:	4f e7       	ldi	r20, 0x7F	; 127
    286a:	57 e4       	ldi	r21, 0x47	; 71
    286c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2870:	18 16       	cp	r1, r24
    2872:	4c f5       	brge	.+82     	; 0x28c6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2874:	6d a9       	ldd	r22, Y+53	; 0x35
    2876:	7e a9       	ldd	r23, Y+54	; 0x36
    2878:	8f a9       	ldd	r24, Y+55	; 0x37
    287a:	98 ad       	ldd	r25, Y+56	; 0x38
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e2       	ldi	r20, 0x20	; 32
    2882:	51 e4       	ldi	r21, 0x41	; 65
    2884:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2888:	dc 01       	movw	r26, r24
    288a:	cb 01       	movw	r24, r22
    288c:	bc 01       	movw	r22, r24
    288e:	cd 01       	movw	r24, r26
    2890:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2894:	dc 01       	movw	r26, r24
    2896:	cb 01       	movw	r24, r22
    2898:	98 ab       	std	Y+48, r25	; 0x30
    289a:	8f a7       	std	Y+47, r24	; 0x2f
    289c:	0f c0       	rjmp	.+30     	; 0x28bc <LCD_displayCharacter+0xd2>
    289e:	89 e1       	ldi	r24, 0x19	; 25
    28a0:	90 e0       	ldi	r25, 0x00	; 0
    28a2:	9e a7       	std	Y+46, r25	; 0x2e
    28a4:	8d a7       	std	Y+45, r24	; 0x2d
    28a6:	8d a5       	ldd	r24, Y+45	; 0x2d
    28a8:	9e a5       	ldd	r25, Y+46	; 0x2e
    28aa:	01 97       	sbiw	r24, 0x01	; 1
    28ac:	f1 f7       	brne	.-4      	; 0x28aa <LCD_displayCharacter+0xc0>
    28ae:	9e a7       	std	Y+46, r25	; 0x2e
    28b0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28b4:	98 a9       	ldd	r25, Y+48	; 0x30
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	98 ab       	std	Y+48, r25	; 0x30
    28ba:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    28be:	98 a9       	ldd	r25, Y+48	; 0x30
    28c0:	00 97       	sbiw	r24, 0x00	; 0
    28c2:	69 f7       	brne	.-38     	; 0x289e <LCD_displayCharacter+0xb4>
    28c4:	14 c0       	rjmp	.+40     	; 0x28ee <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28c6:	69 a9       	ldd	r22, Y+49	; 0x31
    28c8:	7a a9       	ldd	r23, Y+50	; 0x32
    28ca:	8b a9       	ldd	r24, Y+51	; 0x33
    28cc:	9c a9       	ldd	r25, Y+52	; 0x34
    28ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d2:	dc 01       	movw	r26, r24
    28d4:	cb 01       	movw	r24, r22
    28d6:	98 ab       	std	Y+48, r25	; 0x30
    28d8:	8f a7       	std	Y+47, r24	; 0x2f
    28da:	8f a5       	ldd	r24, Y+47	; 0x2f
    28dc:	98 a9       	ldd	r25, Y+48	; 0x30
    28de:	9c a7       	std	Y+44, r25	; 0x2c
    28e0:	8b a7       	std	Y+43, r24	; 0x2b
    28e2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28e4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28e6:	01 97       	sbiw	r24, 0x01	; 1
    28e8:	f1 f7       	brne	.-4      	; 0x28e6 <LCD_displayCharacter+0xfc>
    28ea:	9c a7       	std	Y+44, r25	; 0x2c
    28ec:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	62 e0       	ldi	r22, 0x02	; 2
    28f2:	41 e0       	ldi	r20, 0x01	; 1
    28f4:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	90 e0       	ldi	r25, 0x00	; 0
    28fc:	a0 e8       	ldi	r26, 0x80	; 128
    28fe:	bf e3       	ldi	r27, 0x3F	; 63
    2900:	8f a3       	std	Y+39, r24	; 0x27
    2902:	98 a7       	std	Y+40, r25	; 0x28
    2904:	a9 a7       	std	Y+41, r26	; 0x29
    2906:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2908:	6f a1       	ldd	r22, Y+39	; 0x27
    290a:	78 a5       	ldd	r23, Y+40	; 0x28
    290c:	89 a5       	ldd	r24, Y+41	; 0x29
    290e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2910:	20 e0       	ldi	r18, 0x00	; 0
    2912:	30 e0       	ldi	r19, 0x00	; 0
    2914:	4a e7       	ldi	r20, 0x7A	; 122
    2916:	53 e4       	ldi	r21, 0x43	; 67
    2918:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291c:	dc 01       	movw	r26, r24
    291e:	cb 01       	movw	r24, r22
    2920:	8b a3       	std	Y+35, r24	; 0x23
    2922:	9c a3       	std	Y+36, r25	; 0x24
    2924:	ad a3       	std	Y+37, r26	; 0x25
    2926:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2928:	6b a1       	ldd	r22, Y+35	; 0x23
    292a:	7c a1       	ldd	r23, Y+36	; 0x24
    292c:	8d a1       	ldd	r24, Y+37	; 0x25
    292e:	9e a1       	ldd	r25, Y+38	; 0x26
    2930:	20 e0       	ldi	r18, 0x00	; 0
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	40 e8       	ldi	r20, 0x80	; 128
    2936:	5f e3       	ldi	r21, 0x3F	; 63
    2938:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    293c:	88 23       	and	r24, r24
    293e:	2c f4       	brge	.+10     	; 0x294a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2940:	81 e0       	ldi	r24, 0x01	; 1
    2942:	90 e0       	ldi	r25, 0x00	; 0
    2944:	9a a3       	std	Y+34, r25	; 0x22
    2946:	89 a3       	std	Y+33, r24	; 0x21
    2948:	3f c0       	rjmp	.+126    	; 0x29c8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    294a:	6b a1       	ldd	r22, Y+35	; 0x23
    294c:	7c a1       	ldd	r23, Y+36	; 0x24
    294e:	8d a1       	ldd	r24, Y+37	; 0x25
    2950:	9e a1       	ldd	r25, Y+38	; 0x26
    2952:	20 e0       	ldi	r18, 0x00	; 0
    2954:	3f ef       	ldi	r19, 0xFF	; 255
    2956:	4f e7       	ldi	r20, 0x7F	; 127
    2958:	57 e4       	ldi	r21, 0x47	; 71
    295a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    295e:	18 16       	cp	r1, r24
    2960:	4c f5       	brge	.+82     	; 0x29b4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2962:	6f a1       	ldd	r22, Y+39	; 0x27
    2964:	78 a5       	ldd	r23, Y+40	; 0x28
    2966:	89 a5       	ldd	r24, Y+41	; 0x29
    2968:	9a a5       	ldd	r25, Y+42	; 0x2a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e2       	ldi	r20, 0x20	; 32
    2970:	51 e4       	ldi	r21, 0x41	; 65
    2972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2976:	dc 01       	movw	r26, r24
    2978:	cb 01       	movw	r24, r22
    297a:	bc 01       	movw	r22, r24
    297c:	cd 01       	movw	r24, r26
    297e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2982:	dc 01       	movw	r26, r24
    2984:	cb 01       	movw	r24, r22
    2986:	9a a3       	std	Y+34, r25	; 0x22
    2988:	89 a3       	std	Y+33, r24	; 0x21
    298a:	0f c0       	rjmp	.+30     	; 0x29aa <LCD_displayCharacter+0x1c0>
    298c:	89 e1       	ldi	r24, 0x19	; 25
    298e:	90 e0       	ldi	r25, 0x00	; 0
    2990:	98 a3       	std	Y+32, r25	; 0x20
    2992:	8f 8f       	std	Y+31, r24	; 0x1f
    2994:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2996:	98 a1       	ldd	r25, Y+32	; 0x20
    2998:	01 97       	sbiw	r24, 0x01	; 1
    299a:	f1 f7       	brne	.-4      	; 0x2998 <LCD_displayCharacter+0x1ae>
    299c:	98 a3       	std	Y+32, r25	; 0x20
    299e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a0:	89 a1       	ldd	r24, Y+33	; 0x21
    29a2:	9a a1       	ldd	r25, Y+34	; 0x22
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	9a a3       	std	Y+34, r25	; 0x22
    29a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29aa:	89 a1       	ldd	r24, Y+33	; 0x21
    29ac:	9a a1       	ldd	r25, Y+34	; 0x22
    29ae:	00 97       	sbiw	r24, 0x00	; 0
    29b0:	69 f7       	brne	.-38     	; 0x298c <LCD_displayCharacter+0x1a2>
    29b2:	14 c0       	rjmp	.+40     	; 0x29dc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b4:	6b a1       	ldd	r22, Y+35	; 0x23
    29b6:	7c a1       	ldd	r23, Y+36	; 0x24
    29b8:	8d a1       	ldd	r24, Y+37	; 0x25
    29ba:	9e a1       	ldd	r25, Y+38	; 0x26
    29bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c0:	dc 01       	movw	r26, r24
    29c2:	cb 01       	movw	r24, r22
    29c4:	9a a3       	std	Y+34, r25	; 0x22
    29c6:	89 a3       	std	Y+33, r24	; 0x21
    29c8:	89 a1       	ldd	r24, Y+33	; 0x21
    29ca:	9a a1       	ldd	r25, Y+34	; 0x22
    29cc:	9e 8f       	std	Y+30, r25	; 0x1e
    29ce:	8d 8f       	std	Y+29, r24	; 0x1d
    29d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29d4:	01 97       	sbiw	r24, 0x01	; 1
    29d6:	f1 f7       	brne	.-4      	; 0x29d4 <LCD_displayCharacter+0x1ea>
    29d8:	9e 8f       	std	Y+30, r25	; 0x1e
    29da:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    29dc:	80 e0       	ldi	r24, 0x00	; 0
    29de:	69 ad       	ldd	r22, Y+57	; 0x39
    29e0:	0e 94 e1 10 	call	0x21c2	; 0x21c2 <GPIO_writePort>
    29e4:	80 e0       	ldi	r24, 0x00	; 0
    29e6:	90 e0       	ldi	r25, 0x00	; 0
    29e8:	a0 e8       	ldi	r26, 0x80	; 128
    29ea:	bf e3       	ldi	r27, 0x3F	; 63
    29ec:	89 8f       	std	Y+25, r24	; 0x19
    29ee:	9a 8f       	std	Y+26, r25	; 0x1a
    29f0:	ab 8f       	std	Y+27, r26	; 0x1b
    29f2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29f4:	69 8d       	ldd	r22, Y+25	; 0x19
    29f6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29f8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29fa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	4a e7       	ldi	r20, 0x7A	; 122
    2a02:	53 e4       	ldi	r21, 0x43	; 67
    2a04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a08:	dc 01       	movw	r26, r24
    2a0a:	cb 01       	movw	r24, r22
    2a0c:	8d 8b       	std	Y+21, r24	; 0x15
    2a0e:	9e 8b       	std	Y+22, r25	; 0x16
    2a10:	af 8b       	std	Y+23, r26	; 0x17
    2a12:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2a14:	6d 89       	ldd	r22, Y+21	; 0x15
    2a16:	7e 89       	ldd	r23, Y+22	; 0x16
    2a18:	8f 89       	ldd	r24, Y+23	; 0x17
    2a1a:	98 8d       	ldd	r25, Y+24	; 0x18
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	40 e8       	ldi	r20, 0x80	; 128
    2a22:	5f e3       	ldi	r21, 0x3F	; 63
    2a24:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a28:	88 23       	and	r24, r24
    2a2a:	2c f4       	brge	.+10     	; 0x2a36 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    2a2c:	81 e0       	ldi	r24, 0x01	; 1
    2a2e:	90 e0       	ldi	r25, 0x00	; 0
    2a30:	9c 8b       	std	Y+20, r25	; 0x14
    2a32:	8b 8b       	std	Y+19, r24	; 0x13
    2a34:	3f c0       	rjmp	.+126    	; 0x2ab4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a36:	6d 89       	ldd	r22, Y+21	; 0x15
    2a38:	7e 89       	ldd	r23, Y+22	; 0x16
    2a3a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a3c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a3e:	20 e0       	ldi	r18, 0x00	; 0
    2a40:	3f ef       	ldi	r19, 0xFF	; 255
    2a42:	4f e7       	ldi	r20, 0x7F	; 127
    2a44:	57 e4       	ldi	r21, 0x47	; 71
    2a46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a4a:	18 16       	cp	r1, r24
    2a4c:	4c f5       	brge	.+82     	; 0x2aa0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a4e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a50:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a52:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a54:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a56:	20 e0       	ldi	r18, 0x00	; 0
    2a58:	30 e0       	ldi	r19, 0x00	; 0
    2a5a:	40 e2       	ldi	r20, 0x20	; 32
    2a5c:	51 e4       	ldi	r21, 0x41	; 65
    2a5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a62:	dc 01       	movw	r26, r24
    2a64:	cb 01       	movw	r24, r22
    2a66:	bc 01       	movw	r22, r24
    2a68:	cd 01       	movw	r24, r26
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9c 8b       	std	Y+20, r25	; 0x14
    2a74:	8b 8b       	std	Y+19, r24	; 0x13
    2a76:	0f c0       	rjmp	.+30     	; 0x2a96 <LCD_displayCharacter+0x2ac>
    2a78:	89 e1       	ldi	r24, 0x19	; 25
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	9a 8b       	std	Y+18, r25	; 0x12
    2a7e:	89 8b       	std	Y+17, r24	; 0x11
    2a80:	89 89       	ldd	r24, Y+17	; 0x11
    2a82:	9a 89       	ldd	r25, Y+18	; 0x12
    2a84:	01 97       	sbiw	r24, 0x01	; 1
    2a86:	f1 f7       	brne	.-4      	; 0x2a84 <LCD_displayCharacter+0x29a>
    2a88:	9a 8b       	std	Y+18, r25	; 0x12
    2a8a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a8c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a8e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	9c 8b       	std	Y+20, r25	; 0x14
    2a94:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a96:	8b 89       	ldd	r24, Y+19	; 0x13
    2a98:	9c 89       	ldd	r25, Y+20	; 0x14
    2a9a:	00 97       	sbiw	r24, 0x00	; 0
    2a9c:	69 f7       	brne	.-38     	; 0x2a78 <LCD_displayCharacter+0x28e>
    2a9e:	14 c0       	rjmp	.+40     	; 0x2ac8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2aa0:	6d 89       	ldd	r22, Y+21	; 0x15
    2aa2:	7e 89       	ldd	r23, Y+22	; 0x16
    2aa4:	8f 89       	ldd	r24, Y+23	; 0x17
    2aa6:	98 8d       	ldd	r25, Y+24	; 0x18
    2aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aac:	dc 01       	movw	r26, r24
    2aae:	cb 01       	movw	r24, r22
    2ab0:	9c 8b       	std	Y+20, r25	; 0x14
    2ab2:	8b 8b       	std	Y+19, r24	; 0x13
    2ab4:	8b 89       	ldd	r24, Y+19	; 0x13
    2ab6:	9c 89       	ldd	r25, Y+20	; 0x14
    2ab8:	98 8b       	std	Y+16, r25	; 0x10
    2aba:	8f 87       	std	Y+15, r24	; 0x0f
    2abc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2abe:	98 89       	ldd	r25, Y+16	; 0x10
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	f1 f7       	brne	.-4      	; 0x2ac0 <LCD_displayCharacter+0x2d6>
    2ac4:	98 8b       	std	Y+16, r25	; 0x10
    2ac6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	62 e0       	ldi	r22, 0x02	; 2
    2acc:	40 e0       	ldi	r20, 0x00	; 0
    2ace:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <GPIO_writePin>
    2ad2:	80 e0       	ldi	r24, 0x00	; 0
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	a0 e8       	ldi	r26, 0x80	; 128
    2ad8:	bf e3       	ldi	r27, 0x3F	; 63
    2ada:	8b 87       	std	Y+11, r24	; 0x0b
    2adc:	9c 87       	std	Y+12, r25	; 0x0c
    2ade:	ad 87       	std	Y+13, r26	; 0x0d
    2ae0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ae2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aea:	20 e0       	ldi	r18, 0x00	; 0
    2aec:	30 e0       	ldi	r19, 0x00	; 0
    2aee:	4a e7       	ldi	r20, 0x7A	; 122
    2af0:	53 e4       	ldi	r21, 0x43	; 67
    2af2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af6:	dc 01       	movw	r26, r24
    2af8:	cb 01       	movw	r24, r22
    2afa:	8f 83       	std	Y+7, r24	; 0x07
    2afc:	98 87       	std	Y+8, r25	; 0x08
    2afe:	a9 87       	std	Y+9, r26	; 0x09
    2b00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b02:	6f 81       	ldd	r22, Y+7	; 0x07
    2b04:	78 85       	ldd	r23, Y+8	; 0x08
    2b06:	89 85       	ldd	r24, Y+9	; 0x09
    2b08:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	40 e8       	ldi	r20, 0x80	; 128
    2b10:	5f e3       	ldi	r21, 0x3F	; 63
    2b12:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b16:	88 23       	and	r24, r24
    2b18:	2c f4       	brge	.+10     	; 0x2b24 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2b1a:	81 e0       	ldi	r24, 0x01	; 1
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	9e 83       	std	Y+6, r25	; 0x06
    2b20:	8d 83       	std	Y+5, r24	; 0x05
    2b22:	3f c0       	rjmp	.+126    	; 0x2ba2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2b24:	6f 81       	ldd	r22, Y+7	; 0x07
    2b26:	78 85       	ldd	r23, Y+8	; 0x08
    2b28:	89 85       	ldd	r24, Y+9	; 0x09
    2b2a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2c:	20 e0       	ldi	r18, 0x00	; 0
    2b2e:	3f ef       	ldi	r19, 0xFF	; 255
    2b30:	4f e7       	ldi	r20, 0x7F	; 127
    2b32:	57 e4       	ldi	r21, 0x47	; 71
    2b34:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b38:	18 16       	cp	r1, r24
    2b3a:	4c f5       	brge	.+82     	; 0x2b8e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b3c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b40:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b42:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b44:	20 e0       	ldi	r18, 0x00	; 0
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	40 e2       	ldi	r20, 0x20	; 32
    2b4a:	51 e4       	ldi	r21, 0x41	; 65
    2b4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b50:	dc 01       	movw	r26, r24
    2b52:	cb 01       	movw	r24, r22
    2b54:	bc 01       	movw	r22, r24
    2b56:	cd 01       	movw	r24, r26
    2b58:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b5c:	dc 01       	movw	r26, r24
    2b5e:	cb 01       	movw	r24, r22
    2b60:	9e 83       	std	Y+6, r25	; 0x06
    2b62:	8d 83       	std	Y+5, r24	; 0x05
    2b64:	0f c0       	rjmp	.+30     	; 0x2b84 <LCD_displayCharacter+0x39a>
    2b66:	89 e1       	ldi	r24, 0x19	; 25
    2b68:	90 e0       	ldi	r25, 0x00	; 0
    2b6a:	9c 83       	std	Y+4, r25	; 0x04
    2b6c:	8b 83       	std	Y+3, r24	; 0x03
    2b6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b70:	9c 81       	ldd	r25, Y+4	; 0x04
    2b72:	01 97       	sbiw	r24, 0x01	; 1
    2b74:	f1 f7       	brne	.-4      	; 0x2b72 <LCD_displayCharacter+0x388>
    2b76:	9c 83       	std	Y+4, r25	; 0x04
    2b78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b7a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b7c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b84:	8d 81       	ldd	r24, Y+5	; 0x05
    2b86:	9e 81       	ldd	r25, Y+6	; 0x06
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	69 f7       	brne	.-38     	; 0x2b66 <LCD_displayCharacter+0x37c>
    2b8c:	14 c0       	rjmp	.+40     	; 0x2bb6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b90:	78 85       	ldd	r23, Y+8	; 0x08
    2b92:	89 85       	ldd	r24, Y+9	; 0x09
    2b94:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b96:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b9a:	dc 01       	movw	r26, r24
    2b9c:	cb 01       	movw	r24, r22
    2b9e:	9e 83       	std	Y+6, r25	; 0x06
    2ba0:	8d 83       	std	Y+5, r24	; 0x05
    2ba2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba6:	9a 83       	std	Y+2, r25	; 0x02
    2ba8:	89 83       	std	Y+1, r24	; 0x01
    2baa:	89 81       	ldd	r24, Y+1	; 0x01
    2bac:	9a 81       	ldd	r25, Y+2	; 0x02
    2bae:	01 97       	sbiw	r24, 0x01	; 1
    2bb0:	f1 f7       	brne	.-4      	; 0x2bae <LCD_displayCharacter+0x3c4>
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2bb6:	e9 96       	adiw	r28, 0x39	; 57
    2bb8:	0f b6       	in	r0, 0x3f	; 63
    2bba:	f8 94       	cli
    2bbc:	de bf       	out	0x3e, r29	; 62
    2bbe:	0f be       	out	0x3f, r0	; 63
    2bc0:	cd bf       	out	0x3d, r28	; 61
    2bc2:	cf 91       	pop	r28
    2bc4:	df 91       	pop	r29
    2bc6:	08 95       	ret

00002bc8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2bc8:	df 93       	push	r29
    2bca:	cf 93       	push	r28
    2bcc:	00 d0       	rcall	.+0      	; 0x2bce <LCD_displayString+0x6>
    2bce:	0f 92       	push	r0
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    2bd4:	9b 83       	std	Y+3, r25	; 0x03
    2bd6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bd8:	19 82       	std	Y+1, r1	; 0x01
    2bda:	0e c0       	rjmp	.+28     	; 0x2bf8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	28 2f       	mov	r18, r24
    2be0:	30 e0       	ldi	r19, 0x00	; 0
    2be2:	8a 81       	ldd	r24, Y+2	; 0x02
    2be4:	9b 81       	ldd	r25, Y+3	; 0x03
    2be6:	fc 01       	movw	r30, r24
    2be8:	e2 0f       	add	r30, r18
    2bea:	f3 1f       	adc	r31, r19
    2bec:	80 81       	ld	r24, Z
    2bee:	0e 94 f5 13 	call	0x27ea	; 0x27ea <LCD_displayCharacter>
		i++;
    2bf2:	89 81       	ldd	r24, Y+1	; 0x01
    2bf4:	8f 5f       	subi	r24, 0xFF	; 255
    2bf6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bf8:	89 81       	ldd	r24, Y+1	; 0x01
    2bfa:	28 2f       	mov	r18, r24
    2bfc:	30 e0       	ldi	r19, 0x00	; 0
    2bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    2c00:	9b 81       	ldd	r25, Y+3	; 0x03
    2c02:	fc 01       	movw	r30, r24
    2c04:	e2 0f       	add	r30, r18
    2c06:	f3 1f       	adc	r31, r19
    2c08:	80 81       	ld	r24, Z
    2c0a:	88 23       	and	r24, r24
    2c0c:	39 f7       	brne	.-50     	; 0x2bdc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2c0e:	0f 90       	pop	r0
    2c10:	0f 90       	pop	r0
    2c12:	0f 90       	pop	r0
    2c14:	cf 91       	pop	r28
    2c16:	df 91       	pop	r29
    2c18:	08 95       	ret

00002c1a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2c1a:	df 93       	push	r29
    2c1c:	cf 93       	push	r28
    2c1e:	00 d0       	rcall	.+0      	; 0x2c20 <LCD_moveCursor+0x6>
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <LCD_moveCursor+0x8>
    2c22:	0f 92       	push	r0
    2c24:	cd b7       	in	r28, 0x3d	; 61
    2c26:	de b7       	in	r29, 0x3e	; 62
    2c28:	8a 83       	std	Y+2, r24	; 0x02
    2c2a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2c2c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c2e:	28 2f       	mov	r18, r24
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	3d 83       	std	Y+5, r19	; 0x05
    2c34:	2c 83       	std	Y+4, r18	; 0x04
    2c36:	8c 81       	ldd	r24, Y+4	; 0x04
    2c38:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3a:	81 30       	cpi	r24, 0x01	; 1
    2c3c:	91 05       	cpc	r25, r1
    2c3e:	c1 f0       	breq	.+48     	; 0x2c70 <LCD_moveCursor+0x56>
    2c40:	2c 81       	ldd	r18, Y+4	; 0x04
    2c42:	3d 81       	ldd	r19, Y+5	; 0x05
    2c44:	22 30       	cpi	r18, 0x02	; 2
    2c46:	31 05       	cpc	r19, r1
    2c48:	2c f4       	brge	.+10     	; 0x2c54 <LCD_moveCursor+0x3a>
    2c4a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c4c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c4e:	00 97       	sbiw	r24, 0x00	; 0
    2c50:	61 f0       	breq	.+24     	; 0x2c6a <LCD_moveCursor+0x50>
    2c52:	19 c0       	rjmp	.+50     	; 0x2c86 <LCD_moveCursor+0x6c>
    2c54:	2c 81       	ldd	r18, Y+4	; 0x04
    2c56:	3d 81       	ldd	r19, Y+5	; 0x05
    2c58:	22 30       	cpi	r18, 0x02	; 2
    2c5a:	31 05       	cpc	r19, r1
    2c5c:	69 f0       	breq	.+26     	; 0x2c78 <LCD_moveCursor+0x5e>
    2c5e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c60:	9d 81       	ldd	r25, Y+5	; 0x05
    2c62:	83 30       	cpi	r24, 0x03	; 3
    2c64:	91 05       	cpc	r25, r1
    2c66:	61 f0       	breq	.+24     	; 0x2c80 <LCD_moveCursor+0x66>
    2c68:	0e c0       	rjmp	.+28     	; 0x2c86 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c6c:	89 83       	std	Y+1, r24	; 0x01
    2c6e:	0b c0       	rjmp	.+22     	; 0x2c86 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c70:	8b 81       	ldd	r24, Y+3	; 0x03
    2c72:	80 5c       	subi	r24, 0xC0	; 192
    2c74:	89 83       	std	Y+1, r24	; 0x01
    2c76:	07 c0       	rjmp	.+14     	; 0x2c86 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c78:	8b 81       	ldd	r24, Y+3	; 0x03
    2c7a:	80 5f       	subi	r24, 0xF0	; 240
    2c7c:	89 83       	std	Y+1, r24	; 0x01
    2c7e:	03 c0       	rjmp	.+6      	; 0x2c86 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c80:	8b 81       	ldd	r24, Y+3	; 0x03
    2c82:	80 5b       	subi	r24, 0xB0	; 176
    2c84:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c86:	89 81       	ldd	r24, Y+1	; 0x01
    2c88:	80 68       	ori	r24, 0x80	; 128
    2c8a:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_sendCommand>
}
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	cf 91       	pop	r28
    2c9a:	df 91       	pop	r29
    2c9c:	08 95       	ret

00002c9e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c9e:	df 93       	push	r29
    2ca0:	cf 93       	push	r28
    2ca2:	00 d0       	rcall	.+0      	; 0x2ca4 <LCD_displayStringRowColumn+0x6>
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <LCD_displayStringRowColumn+0x8>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	89 83       	std	Y+1, r24	; 0x01
    2cac:	6a 83       	std	Y+2, r22	; 0x02
    2cae:	5c 83       	std	Y+4, r21	; 0x04
    2cb0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2cb2:	89 81       	ldd	r24, Y+1	; 0x01
    2cb4:	6a 81       	ldd	r22, Y+2	; 0x02
    2cb6:	0e 94 0d 16 	call	0x2c1a	; 0x2c1a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2cba:	8b 81       	ldd	r24, Y+3	; 0x03
    2cbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2cbe:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayString>
}
    2cc2:	0f 90       	pop	r0
    2cc4:	0f 90       	pop	r0
    2cc6:	0f 90       	pop	r0
    2cc8:	0f 90       	pop	r0
    2cca:	cf 91       	pop	r28
    2ccc:	df 91       	pop	r29
    2cce:	08 95       	ret

00002cd0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2cd0:	df 93       	push	r29
    2cd2:	cf 93       	push	r28
    2cd4:	cd b7       	in	r28, 0x3d	; 61
    2cd6:	de b7       	in	r29, 0x3e	; 62
    2cd8:	62 97       	sbiw	r28, 0x12	; 18
    2cda:	0f b6       	in	r0, 0x3f	; 63
    2cdc:	f8 94       	cli
    2cde:	de bf       	out	0x3e, r29	; 62
    2ce0:	0f be       	out	0x3f, r0	; 63
    2ce2:	cd bf       	out	0x3d, r28	; 61
    2ce4:	9a 8b       	std	Y+18, r25	; 0x12
    2ce6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2ce8:	89 89       	ldd	r24, Y+17	; 0x11
    2cea:	9a 89       	ldd	r25, Y+18	; 0x12
    2cec:	9e 01       	movw	r18, r28
    2cee:	2f 5f       	subi	r18, 0xFF	; 255
    2cf0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cf2:	b9 01       	movw	r22, r18
    2cf4:	4a e0       	ldi	r20, 0x0A	; 10
    2cf6:	50 e0       	ldi	r21, 0x00	; 0
    2cf8:	0e 94 d6 19 	call	0x33ac	; 0x33ac <itoa>
   LCD_displayString(buff); /* Display the string */
    2cfc:	ce 01       	movw	r24, r28
    2cfe:	01 96       	adiw	r24, 0x01	; 1
    2d00:	0e 94 e4 15 	call	0x2bc8	; 0x2bc8 <LCD_displayString>
}
    2d04:	62 96       	adiw	r28, 0x12	; 18
    2d06:	0f b6       	in	r0, 0x3f	; 63
    2d08:	f8 94       	cli
    2d0a:	de bf       	out	0x3e, r29	; 62
    2d0c:	0f be       	out	0x3f, r0	; 63
    2d0e:	cd bf       	out	0x3d, r28	; 61
    2d10:	cf 91       	pop	r28
    2d12:	df 91       	pop	r29
    2d14:	08 95       	ret

00002d16 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2d16:	df 93       	push	r29
    2d18:	cf 93       	push	r28
    2d1a:	cd b7       	in	r28, 0x3d	; 61
    2d1c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2d1e:	81 e0       	ldi	r24, 0x01	; 1
    2d20:	0e 94 06 12 	call	0x240c	; 0x240c <LCD_sendCommand>
}
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <DcMotor_Init>:
#include<avr/io.h>
#include"PWM.h"
#include"motor.h"

void DcMotor_Init(void){
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	cd b7       	in	r28, 0x3d	; 61
    2d30:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(DDRB,PB0);
    2d32:	a7 e3       	ldi	r26, 0x37	; 55
    2d34:	b0 e0       	ldi	r27, 0x00	; 0
    2d36:	e7 e3       	ldi	r30, 0x37	; 55
    2d38:	f0 e0       	ldi	r31, 0x00	; 0
    2d3a:	80 81       	ld	r24, Z
    2d3c:	81 60       	ori	r24, 0x01	; 1
    2d3e:	8c 93       	st	X, r24
	SET_BIT(DDRB,PB1);
    2d40:	a7 e3       	ldi	r26, 0x37	; 55
    2d42:	b0 e0       	ldi	r27, 0x00	; 0
    2d44:	e7 e3       	ldi	r30, 0x37	; 55
    2d46:	f0 e0       	ldi	r31, 0x00	; 0
    2d48:	80 81       	ld	r24, Z
    2d4a:	82 60       	ori	r24, 0x02	; 2
    2d4c:	8c 93       	st	X, r24

	/* Motor is stop at the beginning */
	PORTB &= 0xFC;
    2d4e:	a8 e3       	ldi	r26, 0x38	; 56
    2d50:	b0 e0       	ldi	r27, 0x00	; 0
    2d52:	e8 e3       	ldi	r30, 0x38	; 56
    2d54:	f0 e0       	ldi	r31, 0x00	; 0
    2d56:	80 81       	ld	r24, Z
    2d58:	8c 7f       	andi	r24, 0xFC	; 252
    2d5a:	8c 93       	st	X, r24


}
    2d5c:	cf 91       	pop	r28
    2d5e:	df 91       	pop	r29
    2d60:	08 95       	ret

00002d62 <DcMotor_Rotate>:
 void DcMotor_Rotate(DcMotor_State state,uint8 speed)
 {
    2d62:	df 93       	push	r29
    2d64:	cf 93       	push	r28
    2d66:	00 d0       	rcall	.+0      	; 0x2d68 <DcMotor_Rotate+0x6>
    2d68:	cd b7       	in	r28, 0x3d	; 61
    2d6a:	de b7       	in	r29, 0x3e	; 62
    2d6c:	89 83       	std	Y+1, r24	; 0x01
    2d6e:	6a 83       	std	Y+2, r22	; 0x02

	 if(state==CW){
    2d70:	89 81       	ldd	r24, Y+1	; 0x01
    2d72:	88 23       	and	r24, r24
    2d74:	79 f4       	brne	.+30     	; 0x2d94 <DcMotor_Rotate+0x32>
		 PORTB &=0XFC ;
    2d76:	a8 e3       	ldi	r26, 0x38	; 56
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e8 e3       	ldi	r30, 0x38	; 56
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	8c 7f       	andi	r24, 0xFC	; 252
    2d82:	8c 93       	st	X, r24
		 PORTB|=(1<<PB0);
    2d84:	a8 e3       	ldi	r26, 0x38	; 56
    2d86:	b0 e0       	ldi	r27, 0x00	; 0
    2d88:	e8 e3       	ldi	r30, 0x38	; 56
    2d8a:	f0 e0       	ldi	r31, 0x00	; 0
    2d8c:	80 81       	ld	r24, Z
    2d8e:	81 60       	ori	r24, 0x01	; 1
    2d90:	8c 93       	st	X, r24
    2d92:	1c c0       	rjmp	.+56     	; 0x2dcc <DcMotor_Rotate+0x6a>
	 }

	 else if(state==ANTI_CW){
    2d94:	89 81       	ldd	r24, Y+1	; 0x01
    2d96:	81 30       	cpi	r24, 0x01	; 1
    2d98:	79 f4       	brne	.+30     	; 0x2db8 <DcMotor_Rotate+0x56>
		 PORTB &=0XFC ;
    2d9a:	a8 e3       	ldi	r26, 0x38	; 56
    2d9c:	b0 e0       	ldi	r27, 0x00	; 0
    2d9e:	e8 e3       	ldi	r30, 0x38	; 56
    2da0:	f0 e0       	ldi	r31, 0x00	; 0
    2da2:	80 81       	ld	r24, Z
    2da4:	8c 7f       	andi	r24, 0xFC	; 252
    2da6:	8c 93       	st	X, r24
		 PORTB|=(1<<PB1);
    2da8:	a8 e3       	ldi	r26, 0x38	; 56
    2daa:	b0 e0       	ldi	r27, 0x00	; 0
    2dac:	e8 e3       	ldi	r30, 0x38	; 56
    2dae:	f0 e0       	ldi	r31, 0x00	; 0
    2db0:	80 81       	ld	r24, Z
    2db2:	82 60       	ori	r24, 0x02	; 2
    2db4:	8c 93       	st	X, r24
    2db6:	0a c0       	rjmp	.+20     	; 0x2dcc <DcMotor_Rotate+0x6a>
	 }

	 else if(state==STOP){
    2db8:	89 81       	ldd	r24, Y+1	; 0x01
    2dba:	82 30       	cpi	r24, 0x02	; 2
    2dbc:	39 f4       	brne	.+14     	; 0x2dcc <DcMotor_Rotate+0x6a>
		 PORTB &=0XFC ;
    2dbe:	a8 e3       	ldi	r26, 0x38	; 56
    2dc0:	b0 e0       	ldi	r27, 0x00	; 0
    2dc2:	e8 e3       	ldi	r30, 0x38	; 56
    2dc4:	f0 e0       	ldi	r31, 0x00	; 0
    2dc6:	80 81       	ld	r24, Z
    2dc8:	8c 7f       	andi	r24, 0xFC	; 252
    2dca:	8c 93       	st	X, r24
	 }

	 PWM_Timer0_Start(speed);
    2dcc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dce:	0e 94 96 0c 	call	0x192c	; 0x192c <PWM_Timer0_Start>

 }
    2dd2:	0f 90       	pop	r0
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/
/*FOR COMPARE MODE*/
ISR(TIMER1_COMPA_vect)
{
    2ddc:	1f 92       	push	r1
    2dde:	0f 92       	push	r0
    2de0:	0f b6       	in	r0, 0x3f	; 63
    2de2:	0f 92       	push	r0
    2de4:	11 24       	eor	r1, r1
    2de6:	2f 93       	push	r18
    2de8:	3f 93       	push	r19
    2dea:	4f 93       	push	r20
    2dec:	5f 93       	push	r21
    2dee:	6f 93       	push	r22
    2df0:	7f 93       	push	r23
    2df2:	8f 93       	push	r24
    2df4:	9f 93       	push	r25
    2df6:	af 93       	push	r26
    2df8:	bf 93       	push	r27
    2dfa:	ef 93       	push	r30
    2dfc:	ff 93       	push	r31
    2dfe:	df 93       	push	r29
    2e00:	cf 93       	push	r28
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2e06:	80 91 99 01 	lds	r24, 0x0199
    2e0a:	90 91 9a 01 	lds	r25, 0x019A
    2e0e:	00 97       	sbiw	r24, 0x00	; 0
    2e10:	29 f0       	breq	.+10     	; 0x2e1c <__vector_7+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2e12:	e0 91 99 01 	lds	r30, 0x0199
    2e16:	f0 91 9a 01 	lds	r31, 0x019A
    2e1a:	09 95       	icall
	}
}
    2e1c:	cf 91       	pop	r28
    2e1e:	df 91       	pop	r29
    2e20:	ff 91       	pop	r31
    2e22:	ef 91       	pop	r30
    2e24:	bf 91       	pop	r27
    2e26:	af 91       	pop	r26
    2e28:	9f 91       	pop	r25
    2e2a:	8f 91       	pop	r24
    2e2c:	7f 91       	pop	r23
    2e2e:	6f 91       	pop	r22
    2e30:	5f 91       	pop	r21
    2e32:	4f 91       	pop	r20
    2e34:	3f 91       	pop	r19
    2e36:	2f 91       	pop	r18
    2e38:	0f 90       	pop	r0
    2e3a:	0f be       	out	0x3f, r0	; 63
    2e3c:	0f 90       	pop	r0
    2e3e:	1f 90       	pop	r1
    2e40:	18 95       	reti

00002e42 <__vector_9>:


/*FOR OVERFLOW MODE*/
ISR(TIMER1_OVF_vect)
{
    2e42:	1f 92       	push	r1
    2e44:	0f 92       	push	r0
    2e46:	0f b6       	in	r0, 0x3f	; 63
    2e48:	0f 92       	push	r0
    2e4a:	11 24       	eor	r1, r1
    2e4c:	2f 93       	push	r18
    2e4e:	3f 93       	push	r19
    2e50:	4f 93       	push	r20
    2e52:	5f 93       	push	r21
    2e54:	6f 93       	push	r22
    2e56:	7f 93       	push	r23
    2e58:	8f 93       	push	r24
    2e5a:	9f 93       	push	r25
    2e5c:	af 93       	push	r26
    2e5e:	bf 93       	push	r27
    2e60:	ef 93       	push	r30
    2e62:	ff 93       	push	r31
    2e64:	df 93       	push	r29
    2e66:	cf 93       	push	r28
    2e68:	cd b7       	in	r28, 0x3d	; 61
    2e6a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2e6c:	80 91 99 01 	lds	r24, 0x0199
    2e70:	90 91 9a 01 	lds	r25, 0x019A
    2e74:	00 97       	sbiw	r24, 0x00	; 0
    2e76:	29 f0       	breq	.+10     	; 0x2e82 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2e78:	e0 91 99 01 	lds	r30, 0x0199
    2e7c:	f0 91 9a 01 	lds	r31, 0x019A
    2e80:	09 95       	icall
	}
}
    2e82:	cf 91       	pop	r28
    2e84:	df 91       	pop	r29
    2e86:	ff 91       	pop	r31
    2e88:	ef 91       	pop	r30
    2e8a:	bf 91       	pop	r27
    2e8c:	af 91       	pop	r26
    2e8e:	9f 91       	pop	r25
    2e90:	8f 91       	pop	r24
    2e92:	7f 91       	pop	r23
    2e94:	6f 91       	pop	r22
    2e96:	5f 91       	pop	r21
    2e98:	4f 91       	pop	r20
    2e9a:	3f 91       	pop	r19
    2e9c:	2f 91       	pop	r18
    2e9e:	0f 90       	pop	r0
    2ea0:	0f be       	out	0x3f, r0	; 63
    2ea2:	0f 90       	pop	r0
    2ea4:	1f 90       	pop	r1
    2ea6:	18 95       	reti

00002ea8 <Timer1_init>:




void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2ea8:	df 93       	push	r29
    2eaa:	cf 93       	push	r28
    2eac:	00 d0       	rcall	.+0      	; 0x2eae <Timer1_init+0x6>
    2eae:	cd b7       	in	r28, 0x3d	; 61
    2eb0:	de b7       	in	r29, 0x3e	; 62
    2eb2:	9a 83       	std	Y+2, r25	; 0x02
    2eb4:	89 83       	std	Y+1, r24	; 0x01

	TCNT1 = Config_Ptr->initial_value;
    2eb6:	ac e4       	ldi	r26, 0x4C	; 76
    2eb8:	b0 e0       	ldi	r27, 0x00	; 0
    2eba:	e9 81       	ldd	r30, Y+1	; 0x01
    2ebc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ebe:	80 81       	ld	r24, Z
    2ec0:	91 81       	ldd	r25, Z+1	; 0x01
    2ec2:	11 96       	adiw	r26, 0x01	; 1
    2ec4:	9c 93       	st	X, r25
    2ec6:	8e 93       	st	-X, r24
	OCR1A = Config_Ptr->compare_value;
    2ec8:	aa e4       	ldi	r26, 0x4A	; 74
    2eca:	b0 e0       	ldi	r27, 0x00	; 0
    2ecc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ece:	fa 81       	ldd	r31, Y+2	; 0x02
    2ed0:	82 81       	ldd	r24, Z+2	; 0x02
    2ed2:	93 81       	ldd	r25, Z+3	; 0x03
    2ed4:	11 96       	adiw	r26, 0x01	; 1
    2ed6:	9c 93       	st	X, r25
    2ed8:	8e 93       	st	-X, r24
	TCCR1A |= (1<<FOC1A)|(1<<FOC1B); //for NON_PWM mode
    2eda:	af e4       	ldi	r26, 0x4F	; 79
    2edc:	b0 e0       	ldi	r27, 0x00	; 0
    2ede:	ef e4       	ldi	r30, 0x4F	; 79
    2ee0:	f0 e0       	ldi	r31, 0x00	; 0
    2ee2:	80 81       	ld	r24, Z
    2ee4:	8c 60       	ori	r24, 0x0C	; 12
    2ee6:	8c 93       	st	X, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0XF8) |(Config_Ptr->prescaler);
    2ee8:	ae e4       	ldi	r26, 0x4E	; 78
    2eea:	b0 e0       	ldi	r27, 0x00	; 0
    2eec:	ee e4       	ldi	r30, 0x4E	; 78
    2eee:	f0 e0       	ldi	r31, 0x00	; 0
    2ef0:	80 81       	ld	r24, Z
    2ef2:	98 2f       	mov	r25, r24
    2ef4:	98 7f       	andi	r25, 0xF8	; 248
    2ef6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ef8:	fa 81       	ldd	r31, Y+2	; 0x02
    2efa:	84 81       	ldd	r24, Z+4	; 0x04
    2efc:	89 2b       	or	r24, r25
    2efe:	8c 93       	st	X, r24
	TCCR1B = (TCCR1B& 0XF7)|(Config_Ptr->mode<<WGM12);
    2f00:	ae e4       	ldi	r26, 0x4E	; 78
    2f02:	b0 e0       	ldi	r27, 0x00	; 0
    2f04:	ee e4       	ldi	r30, 0x4E	; 78
    2f06:	f0 e0       	ldi	r31, 0x00	; 0
    2f08:	80 81       	ld	r24, Z
    2f0a:	28 2f       	mov	r18, r24
    2f0c:	27 7f       	andi	r18, 0xF7	; 247
    2f0e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f10:	fa 81       	ldd	r31, Y+2	; 0x02
    2f12:	85 81       	ldd	r24, Z+5	; 0x05
    2f14:	88 2f       	mov	r24, r24
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	88 0f       	add	r24, r24
    2f1a:	99 1f       	adc	r25, r25
    2f1c:	88 0f       	add	r24, r24
    2f1e:	99 1f       	adc	r25, r25
    2f20:	88 0f       	add	r24, r24
    2f22:	99 1f       	adc	r25, r25
    2f24:	82 2b       	or	r24, r18
    2f26:	8c 93       	st	X, r24
	TIMSK |= (1<<OCIE1A) | (1<< TOIE1); ////OCIE1A interrupt enable for a compare Maching.TOIE  OVERFLOW interrupt enable
    2f28:	a9 e5       	ldi	r26, 0x59	; 89
    2f2a:	b0 e0       	ldi	r27, 0x00	; 0
    2f2c:	e9 e5       	ldi	r30, 0x59	; 89
    2f2e:	f0 e0       	ldi	r31, 0x00	; 0
    2f30:	80 81       	ld	r24, Z
    2f32:	84 61       	ori	r24, 0x14	; 20
    2f34:	8c 93       	st	X, r24
	sei(); //SET I-BIT
    2f36:	78 94       	sei
}
    2f38:	0f 90       	pop	r0
    2f3a:	0f 90       	pop	r0
    2f3c:	cf 91       	pop	r28
    2f3e:	df 91       	pop	r29
    2f40:	08 95       	ret

00002f42 <Timer1_deInit>:

void Timer1_deInit(void)
{
    2f42:	df 93       	push	r29
    2f44:	cf 93       	push	r28
    2f46:	cd b7       	in	r28, 0x3d	; 61
    2f48:	de b7       	in	r29, 0x3e	; 62

	TCNT1 = 0;
    2f4a:	ec e4       	ldi	r30, 0x4C	; 76
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	11 82       	std	Z+1, r1	; 0x01
    2f50:	10 82       	st	Z, r1
	OCR1A = 0;
    2f52:	ea e4       	ldi	r30, 0x4A	; 74
    2f54:	f0 e0       	ldi	r31, 0x00	; 0
    2f56:	11 82       	std	Z+1, r1	; 0x01
    2f58:	10 82       	st	Z, r1
	TCCR1A =0;
    2f5a:	ef e4       	ldi	r30, 0x4F	; 79
    2f5c:	f0 e0       	ldi	r31, 0x00	; 0
    2f5e:	10 82       	st	Z, r1
	TCCR1B=0;
    2f60:	ee e4       	ldi	r30, 0x4E	; 78
    2f62:	f0 e0       	ldi	r31, 0x00	; 0
    2f64:	10 82       	st	Z, r1
	TIMSK =0;
    2f66:	e9 e5       	ldi	r30, 0x59	; 89
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	10 82       	st	Z, r1
	cli(); //Clear I-BIT
    2f6c:	f8 94       	cli


}
    2f6e:	cf 91       	pop	r28
    2f70:	df 91       	pop	r29
    2f72:	08 95       	ret

00002f74 <Timer1_setCallBack>:

void Timer1_setCallBack(void(*a_ptr)(void))
{
    2f74:	df 93       	push	r29
    2f76:	cf 93       	push	r28
    2f78:	00 d0       	rcall	.+0      	; 0x2f7a <Timer1_setCallBack+0x6>
    2f7a:	cd b7       	in	r28, 0x3d	; 61
    2f7c:	de b7       	in	r29, 0x3e	; 62
    2f7e:	9a 83       	std	Y+2, r25	; 0x02
    2f80:	89 83       	std	Y+1, r24	; 0x01

	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2f82:	89 81       	ldd	r24, Y+1	; 0x01
    2f84:	9a 81       	ldd	r25, Y+2	; 0x02
    2f86:	90 93 9a 01 	sts	0x019A, r25
    2f8a:	80 93 99 01 	sts	0x0199, r24

}
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <TWI_init+0x6>
    2f9e:	cd b7       	in	r28, 0x3d	; 61
    2fa0:	de b7       	in	r29, 0x3e	; 62
    2fa2:	9a 83       	std	Y+2, r25	; 0x02
    2fa4:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    2fa6:	a0 e2       	ldi	r26, 0x20	; 32
    2fa8:	b0 e0       	ldi	r27, 0x00	; 0
    2faa:	e9 81       	ldd	r30, Y+1	; 0x01
    2fac:	fa 81       	ldd	r31, Y+2	; 0x02
    2fae:	81 81       	ldd	r24, Z+1	; 0x01
    2fb0:	8c 93       	st	X, r24
	TWSR = 0x00;
    2fb2:	e1 e2       	ldi	r30, 0x21	; 33
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = Config_Ptr->address; // my address is Configurable:)
    2fb8:	a2 e2       	ldi	r26, 0x22	; 34
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	80 81       	ld	r24, Z
    2fc2:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    2fc4:	e6 e5       	ldi	r30, 0x56	; 86
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	84 e0       	ldi	r24, 0x04	; 4
    2fca:	80 83       	st	Z, r24
}
    2fcc:	0f 90       	pop	r0
    2fce:	0f 90       	pop	r0
    2fd0:	cf 91       	pop	r28
    2fd2:	df 91       	pop	r29
    2fd4:	08 95       	ret

00002fd6 <TWI_start>:

void TWI_start(void)
{
    2fd6:	df 93       	push	r29
    2fd8:	cf 93       	push	r28
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2fde:	e6 e5       	ldi	r30, 0x56	; 86
    2fe0:	f0 e0       	ldi	r31, 0x00	; 0
    2fe2:	84 ea       	ldi	r24, 0xA4	; 164
    2fe4:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2fe6:	e6 e5       	ldi	r30, 0x56	; 86
    2fe8:	f0 e0       	ldi	r31, 0x00	; 0
    2fea:	80 81       	ld	r24, Z
    2fec:	88 23       	and	r24, r24
    2fee:	dc f7       	brge	.-10     	; 0x2fe6 <TWI_start+0x10>
}
    2ff0:	cf 91       	pop	r28
    2ff2:	df 91       	pop	r29
    2ff4:	08 95       	ret

00002ff6 <TWI_stop>:

void TWI_stop(void)
{
    2ff6:	df 93       	push	r29
    2ff8:	cf 93       	push	r28
    2ffa:	cd b7       	in	r28, 0x3d	; 61
    2ffc:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2ffe:	e6 e5       	ldi	r30, 0x56	; 86
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	84 e9       	ldi	r24, 0x94	; 148
    3004:	80 83       	st	Z, r24
}
    3006:	cf 91       	pop	r28
    3008:	df 91       	pop	r29
    300a:	08 95       	ret

0000300c <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    300c:	df 93       	push	r29
    300e:	cf 93       	push	r28
    3010:	0f 92       	push	r0
    3012:	cd b7       	in	r28, 0x3d	; 61
    3014:	de b7       	in	r29, 0x3e	; 62
    3016:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    3018:	e3 e2       	ldi	r30, 0x23	; 35
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	89 81       	ldd	r24, Y+1	; 0x01
    301e:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3020:	e6 e5       	ldi	r30, 0x56	; 86
    3022:	f0 e0       	ldi	r31, 0x00	; 0
    3024:	84 e8       	ldi	r24, 0x84	; 132
    3026:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3028:	e6 e5       	ldi	r30, 0x56	; 86
    302a:	f0 e0       	ldi	r31, 0x00	; 0
    302c:	80 81       	ld	r24, Z
    302e:	88 23       	and	r24, r24
    3030:	dc f7       	brge	.-10     	; 0x3028 <TWI_writeByte+0x1c>
}
    3032:	0f 90       	pop	r0
    3034:	cf 91       	pop	r28
    3036:	df 91       	pop	r29
    3038:	08 95       	ret

0000303a <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    303a:	df 93       	push	r29
    303c:	cf 93       	push	r28
    303e:	cd b7       	in	r28, 0x3d	; 61
    3040:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3042:	e6 e5       	ldi	r30, 0x56	; 86
    3044:	f0 e0       	ldi	r31, 0x00	; 0
    3046:	84 ec       	ldi	r24, 0xC4	; 196
    3048:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    304a:	e6 e5       	ldi	r30, 0x56	; 86
    304c:	f0 e0       	ldi	r31, 0x00	; 0
    304e:	80 81       	ld	r24, Z
    3050:	88 23       	and	r24, r24
    3052:	dc f7       	brge	.-10     	; 0x304a <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3054:	e3 e2       	ldi	r30, 0x23	; 35
    3056:	f0 e0       	ldi	r31, 0x00	; 0
    3058:	80 81       	ld	r24, Z
}
    305a:	cf 91       	pop	r28
    305c:	df 91       	pop	r29
    305e:	08 95       	ret

00003060 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3060:	df 93       	push	r29
    3062:	cf 93       	push	r28
    3064:	cd b7       	in	r28, 0x3d	; 61
    3066:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    3068:	e6 e5       	ldi	r30, 0x56	; 86
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	84 e8       	ldi	r24, 0x84	; 132
    306e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3070:	e6 e5       	ldi	r30, 0x56	; 86
    3072:	f0 e0       	ldi	r31, 0x00	; 0
    3074:	80 81       	ld	r24, Z
    3076:	88 23       	and	r24, r24
    3078:	dc f7       	brge	.-10     	; 0x3070 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    307a:	e3 e2       	ldi	r30, 0x23	; 35
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	80 81       	ld	r24, Z
}
    3080:	cf 91       	pop	r28
    3082:	df 91       	pop	r29
    3084:	08 95       	ret

00003086 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    3086:	df 93       	push	r29
    3088:	cf 93       	push	r28
    308a:	0f 92       	push	r0
    308c:	cd b7       	in	r28, 0x3d	; 61
    308e:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    3090:	e1 e2       	ldi	r30, 0x21	; 33
    3092:	f0 e0       	ldi	r31, 0x00	; 0
    3094:	80 81       	ld	r24, Z
    3096:	88 7f       	andi	r24, 0xF8	; 248
    3098:	89 83       	std	Y+1, r24	; 0x01
    return status;
    309a:	89 81       	ldd	r24, Y+1	; 0x01
}
    309c:	0f 90       	pop	r0
    309e:	cf 91       	pop	r28
    30a0:	df 91       	pop	r29
    30a2:	08 95       	ret

000030a4 <UART_init>:
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */

void UART_init(const UART_ConfigType * Config_Ptr)
{
    30a4:	df 93       	push	r29
    30a6:	cf 93       	push	r28
    30a8:	00 d0       	rcall	.+0      	; 0x30aa <UART_init+0x6>
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <UART_init+0x8>
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    30b0:	9c 83       	std	Y+4, r25	; 0x04
    30b2:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    30b4:	1a 82       	std	Y+2, r1	; 0x02
    30b6:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30b8:	eb e2       	ldi	r30, 0x2B	; 43
    30ba:	f0 e0       	ldi	r31, 0x00	; 0
    30bc:	82 e0       	ldi	r24, 0x02	; 2
    30be:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    30c0:	ea e2       	ldi	r30, 0x2A	; 42
    30c2:	f0 e0       	ldi	r31, 0x00	; 0
    30c4:	88 e1       	ldi	r24, 0x18	; 24
    30c6:	80 83       	st	Z, r24
	if(Config_Ptr->bit_data==_9_bit){
    30c8:	eb 81       	ldd	r30, Y+3	; 0x03
    30ca:	fc 81       	ldd	r31, Y+4	; 0x04
    30cc:	80 81       	ld	r24, Z
    30ce:	87 30       	cpi	r24, 0x07	; 7
    30d0:	39 f4       	brne	.+14     	; 0x30e0 <UART_init+0x3c>
		UCSRB |=(1<<UCSZ2);
    30d2:	aa e2       	ldi	r26, 0x2A	; 42
    30d4:	b0 e0       	ldi	r27, 0x00	; 0
    30d6:	ea e2       	ldi	r30, 0x2A	; 42
    30d8:	f0 e0       	ldi	r31, 0x00	; 0
    30da:	80 81       	ld	r24, Z
    30dc:	84 60       	ori	r24, 0x04	; 4
    30de:	8c 93       	st	X, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    30e0:	e0 e4       	ldi	r30, 0x40	; 64
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 e8       	ldi	r24, 0x80	; 128
    30e6:	80 83       	st	Z, r24
	UCSRC =(UCSRC &0xF9)|(Config_Ptr->bit_data <<1);
    30e8:	a0 e4       	ldi	r26, 0x40	; 64
    30ea:	b0 e0       	ldi	r27, 0x00	; 0
    30ec:	e0 e4       	ldi	r30, 0x40	; 64
    30ee:	f0 e0       	ldi	r31, 0x00	; 0
    30f0:	80 81       	ld	r24, Z
    30f2:	28 2f       	mov	r18, r24
    30f4:	29 7f       	andi	r18, 0xF9	; 249
    30f6:	eb 81       	ldd	r30, Y+3	; 0x03
    30f8:	fc 81       	ldd	r31, Y+4	; 0x04
    30fa:	80 81       	ld	r24, Z
    30fc:	88 2f       	mov	r24, r24
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	88 0f       	add	r24, r24
    3102:	99 1f       	adc	r25, r25
    3104:	82 2b       	or	r24, r18
    3106:	8c 93       	st	X, r24
	/*to be sure that the bit USBS  won't be set in 9bit mode  */
	if(Config_Ptr->bit_data==_9_bit){
    3108:	eb 81       	ldd	r30, Y+3	; 0x03
    310a:	fc 81       	ldd	r31, Y+4	; 0x04
    310c:	80 81       	ld	r24, Z
    310e:	87 30       	cpi	r24, 0x07	; 7
    3110:	39 f4       	brne	.+14     	; 0x3120 <UART_init+0x7c>
		UCSRC =(UCSRC &0xF7);
    3112:	a0 e4       	ldi	r26, 0x40	; 64
    3114:	b0 e0       	ldi	r27, 0x00	; 0
    3116:	e0 e4       	ldi	r30, 0x40	; 64
    3118:	f0 e0       	ldi	r31, 0x00	; 0
    311a:	80 81       	ld	r24, Z
    311c:	87 7f       	andi	r24, 0xF7	; 247
    311e:	8c 93       	st	X, r24
	}

	/*(UCSRC &0xCF(1100 1111)) to save other bits and clear the desired ones */
	UCSRC =(UCSRC &0xCF)|(Config_Ptr->parity <<4);
    3120:	a0 e4       	ldi	r26, 0x40	; 64
    3122:	b0 e0       	ldi	r27, 0x00	; 0
    3124:	e0 e4       	ldi	r30, 0x40	; 64
    3126:	f0 e0       	ldi	r31, 0x00	; 0
    3128:	80 81       	ld	r24, Z
    312a:	28 2f       	mov	r18, r24
    312c:	2f 7c       	andi	r18, 0xCF	; 207
    312e:	eb 81       	ldd	r30, Y+3	; 0x03
    3130:	fc 81       	ldd	r31, Y+4	; 0x04
    3132:	81 81       	ldd	r24, Z+1	; 0x01
    3134:	88 2f       	mov	r24, r24
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	82 95       	swap	r24
    313a:	92 95       	swap	r25
    313c:	90 7f       	andi	r25, 0xF0	; 240
    313e:	98 27       	eor	r25, r24
    3140:	80 7f       	andi	r24, 0xF0	; 240
    3142:	98 27       	eor	r25, r24
    3144:	82 2b       	or	r24, r18
    3146:	8c 93       	st	X, r24

	UCSRC=(UCSRC&0xF7)|(Config_Ptr->stop_bit <<USBS);
    3148:	a0 e4       	ldi	r26, 0x40	; 64
    314a:	b0 e0       	ldi	r27, 0x00	; 0
    314c:	e0 e4       	ldi	r30, 0x40	; 64
    314e:	f0 e0       	ldi	r31, 0x00	; 0
    3150:	80 81       	ld	r24, Z
    3152:	28 2f       	mov	r18, r24
    3154:	27 7f       	andi	r18, 0xF7	; 247
    3156:	eb 81       	ldd	r30, Y+3	; 0x03
    3158:	fc 81       	ldd	r31, Y+4	; 0x04
    315a:	82 81       	ldd	r24, Z+2	; 0x02
    315c:	88 2f       	mov	r24, r24
    315e:	90 e0       	ldi	r25, 0x00	; 0
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	88 0f       	add	r24, r24
    316a:	99 1f       	adc	r25, r25
    316c:	82 2b       	or	r24, r18
    316e:	8c 93       	st	X, r24



	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate )* 8UL))) - 1);
    3170:	eb 81       	ldd	r30, Y+3	; 0x03
    3172:	fc 81       	ldd	r31, Y+4	; 0x04
    3174:	83 81       	ldd	r24, Z+3	; 0x03
    3176:	94 81       	ldd	r25, Z+4	; 0x04
    3178:	a5 81       	ldd	r26, Z+5	; 0x05
    317a:	b6 81       	ldd	r27, Z+6	; 0x06
    317c:	88 0f       	add	r24, r24
    317e:	99 1f       	adc	r25, r25
    3180:	aa 1f       	adc	r26, r26
    3182:	bb 1f       	adc	r27, r27
    3184:	88 0f       	add	r24, r24
    3186:	99 1f       	adc	r25, r25
    3188:	aa 1f       	adc	r26, r26
    318a:	bb 1f       	adc	r27, r27
    318c:	88 0f       	add	r24, r24
    318e:	99 1f       	adc	r25, r25
    3190:	aa 1f       	adc	r26, r26
    3192:	bb 1f       	adc	r27, r27
    3194:	9c 01       	movw	r18, r24
    3196:	ad 01       	movw	r20, r26
    3198:	80 e4       	ldi	r24, 0x40	; 64
    319a:	92 e4       	ldi	r25, 0x42	; 66
    319c:	af e0       	ldi	r26, 0x0F	; 15
    319e:	b0 e0       	ldi	r27, 0x00	; 0
    31a0:	bc 01       	movw	r22, r24
    31a2:	cd 01       	movw	r24, r26
    31a4:	0e 94 7d 19 	call	0x32fa	; 0x32fa <__udivmodsi4>
    31a8:	da 01       	movw	r26, r20
    31aa:	c9 01       	movw	r24, r18
    31ac:	01 97       	sbiw	r24, 0x01	; 1
    31ae:	9a 83       	std	Y+2, r25	; 0x02
    31b0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    31b2:	e0 e4       	ldi	r30, 0x40	; 64
    31b4:	f0 e0       	ldi	r31, 0x00	; 0
    31b6:	89 81       	ldd	r24, Y+1	; 0x01
    31b8:	9a 81       	ldd	r25, Y+2	; 0x02
    31ba:	89 2f       	mov	r24, r25
    31bc:	99 27       	eor	r25, r25
    31be:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    31c0:	e9 e2       	ldi	r30, 0x29	; 41
    31c2:	f0 e0       	ldi	r31, 0x00	; 0
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	80 83       	st	Z, r24
}
    31c8:	0f 90       	pop	r0
    31ca:	0f 90       	pop	r0
    31cc:	0f 90       	pop	r0
    31ce:	0f 90       	pop	r0
    31d0:	cf 91       	pop	r28
    31d2:	df 91       	pop	r29
    31d4:	08 95       	ret

000031d6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31d6:	df 93       	push	r29
    31d8:	cf 93       	push	r28
    31da:	0f 92       	push	r0
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    31e2:	eb e2       	ldi	r30, 0x2B	; 43
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	80 81       	ld	r24, Z
    31e8:	88 2f       	mov	r24, r24
    31ea:	90 e0       	ldi	r25, 0x00	; 0
    31ec:	80 72       	andi	r24, 0x20	; 32
    31ee:	90 70       	andi	r25, 0x00	; 0
    31f0:	00 97       	sbiw	r24, 0x00	; 0
    31f2:	b9 f3       	breq	.-18     	; 0x31e2 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    31f4:	ec e2       	ldi	r30, 0x2C	; 44
    31f6:	f0 e0       	ldi	r31, 0x00	; 0
    31f8:	89 81       	ldd	r24, Y+1	; 0x01
    31fa:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	 *******************************************************************/
}
    31fc:	0f 90       	pop	r0
    31fe:	cf 91       	pop	r28
    3200:	df 91       	pop	r29
    3202:	08 95       	ret

00003204 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3204:	df 93       	push	r29
    3206:	cf 93       	push	r28
    3208:	cd b7       	in	r28, 0x3d	; 61
    320a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    320c:	eb e2       	ldi	r30, 0x2B	; 43
    320e:	f0 e0       	ldi	r31, 0x00	; 0
    3210:	80 81       	ld	r24, Z
    3212:	88 23       	and	r24, r24
    3214:	dc f7       	brge	.-10     	; 0x320c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3216:	ec e2       	ldi	r30, 0x2C	; 44
    3218:	f0 e0       	ldi	r31, 0x00	; 0
    321a:	80 81       	ld	r24, Z
}
    321c:	cf 91       	pop	r28
    321e:	df 91       	pop	r29
    3220:	08 95       	ret

00003222 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3222:	df 93       	push	r29
    3224:	cf 93       	push	r28
    3226:	00 d0       	rcall	.+0      	; 0x3228 <UART_sendString+0x6>
    3228:	0f 92       	push	r0
    322a:	cd b7       	in	r28, 0x3d	; 61
    322c:	de b7       	in	r29, 0x3e	; 62
    322e:	9b 83       	std	Y+3, r25	; 0x03
    3230:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3232:	19 82       	std	Y+1, r1	; 0x01
    3234:	0e c0       	rjmp	.+28     	; 0x3252 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3236:	89 81       	ldd	r24, Y+1	; 0x01
    3238:	28 2f       	mov	r18, r24
    323a:	30 e0       	ldi	r19, 0x00	; 0
    323c:	8a 81       	ldd	r24, Y+2	; 0x02
    323e:	9b 81       	ldd	r25, Y+3	; 0x03
    3240:	fc 01       	movw	r30, r24
    3242:	e2 0f       	add	r30, r18
    3244:	f3 1f       	adc	r31, r19
    3246:	80 81       	ld	r24, Z
    3248:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <UART_sendByte>
		i++;
    324c:	89 81       	ldd	r24, Y+1	; 0x01
    324e:	8f 5f       	subi	r24, 0xFF	; 255
    3250:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3252:	89 81       	ldd	r24, Y+1	; 0x01
    3254:	28 2f       	mov	r18, r24
    3256:	30 e0       	ldi	r19, 0x00	; 0
    3258:	8a 81       	ldd	r24, Y+2	; 0x02
    325a:	9b 81       	ldd	r25, Y+3	; 0x03
    325c:	fc 01       	movw	r30, r24
    325e:	e2 0f       	add	r30, r18
    3260:	f3 1f       	adc	r31, r19
    3262:	80 81       	ld	r24, Z
    3264:	88 23       	and	r24, r24
    3266:	39 f7       	brne	.-50     	; 0x3236 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	 *******************************************************************/
}
    3268:	0f 90       	pop	r0
    326a:	0f 90       	pop	r0
    326c:	0f 90       	pop	r0
    326e:	cf 91       	pop	r28
    3270:	df 91       	pop	r29
    3272:	08 95       	ret

00003274 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3274:	0f 93       	push	r16
    3276:	1f 93       	push	r17
    3278:	df 93       	push	r29
    327a:	cf 93       	push	r28
    327c:	00 d0       	rcall	.+0      	; 0x327e <UART_receiveString+0xa>
    327e:	0f 92       	push	r0
    3280:	cd b7       	in	r28, 0x3d	; 61
    3282:	de b7       	in	r29, 0x3e	; 62
    3284:	9b 83       	std	Y+3, r25	; 0x03
    3286:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3288:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	8c 01       	movw	r16, r24
    3296:	02 0f       	add	r16, r18
    3298:	13 1f       	adc	r17, r19
    329a:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    329e:	f8 01       	movw	r30, r16
    32a0:	80 83       	st	Z, r24
    32a2:	0f c0       	rjmp	.+30     	; 0x32c2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32a4:	89 81       	ldd	r24, Y+1	; 0x01
    32a6:	8f 5f       	subi	r24, 0xFF	; 255
    32a8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	8c 01       	movw	r16, r24
    32b6:	02 0f       	add	r16, r18
    32b8:	13 1f       	adc	r17, r19
    32ba:	0e 94 02 19 	call	0x3204	; 0x3204 <UART_recieveByte>
    32be:	f8 01       	movw	r30, r16
    32c0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32c2:	89 81       	ldd	r24, Y+1	; 0x01
    32c4:	28 2f       	mov	r18, r24
    32c6:	30 e0       	ldi	r19, 0x00	; 0
    32c8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ca:	9b 81       	ldd	r25, Y+3	; 0x03
    32cc:	fc 01       	movw	r30, r24
    32ce:	e2 0f       	add	r30, r18
    32d0:	f3 1f       	adc	r31, r19
    32d2:	80 81       	ld	r24, Z
    32d4:	83 32       	cpi	r24, 0x23	; 35
    32d6:	31 f7       	brne	.-52     	; 0x32a4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32d8:	89 81       	ldd	r24, Y+1	; 0x01
    32da:	28 2f       	mov	r18, r24
    32dc:	30 e0       	ldi	r19, 0x00	; 0
    32de:	8a 81       	ldd	r24, Y+2	; 0x02
    32e0:	9b 81       	ldd	r25, Y+3	; 0x03
    32e2:	fc 01       	movw	r30, r24
    32e4:	e2 0f       	add	r30, r18
    32e6:	f3 1f       	adc	r31, r19
    32e8:	10 82       	st	Z, r1
}
    32ea:	0f 90       	pop	r0
    32ec:	0f 90       	pop	r0
    32ee:	0f 90       	pop	r0
    32f0:	cf 91       	pop	r28
    32f2:	df 91       	pop	r29
    32f4:	1f 91       	pop	r17
    32f6:	0f 91       	pop	r16
    32f8:	08 95       	ret

000032fa <__udivmodsi4>:
    32fa:	a1 e2       	ldi	r26, 0x21	; 33
    32fc:	1a 2e       	mov	r1, r26
    32fe:	aa 1b       	sub	r26, r26
    3300:	bb 1b       	sub	r27, r27
    3302:	fd 01       	movw	r30, r26
    3304:	0d c0       	rjmp	.+26     	; 0x3320 <__udivmodsi4_ep>

00003306 <__udivmodsi4_loop>:
    3306:	aa 1f       	adc	r26, r26
    3308:	bb 1f       	adc	r27, r27
    330a:	ee 1f       	adc	r30, r30
    330c:	ff 1f       	adc	r31, r31
    330e:	a2 17       	cp	r26, r18
    3310:	b3 07       	cpc	r27, r19
    3312:	e4 07       	cpc	r30, r20
    3314:	f5 07       	cpc	r31, r21
    3316:	20 f0       	brcs	.+8      	; 0x3320 <__udivmodsi4_ep>
    3318:	a2 1b       	sub	r26, r18
    331a:	b3 0b       	sbc	r27, r19
    331c:	e4 0b       	sbc	r30, r20
    331e:	f5 0b       	sbc	r31, r21

00003320 <__udivmodsi4_ep>:
    3320:	66 1f       	adc	r22, r22
    3322:	77 1f       	adc	r23, r23
    3324:	88 1f       	adc	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	1a 94       	dec	r1
    332a:	69 f7       	brne	.-38     	; 0x3306 <__udivmodsi4_loop>
    332c:	60 95       	com	r22
    332e:	70 95       	com	r23
    3330:	80 95       	com	r24
    3332:	90 95       	com	r25
    3334:	9b 01       	movw	r18, r22
    3336:	ac 01       	movw	r20, r24
    3338:	bd 01       	movw	r22, r26
    333a:	cf 01       	movw	r24, r30
    333c:	08 95       	ret

0000333e <__prologue_saves__>:
    333e:	2f 92       	push	r2
    3340:	3f 92       	push	r3
    3342:	4f 92       	push	r4
    3344:	5f 92       	push	r5
    3346:	6f 92       	push	r6
    3348:	7f 92       	push	r7
    334a:	8f 92       	push	r8
    334c:	9f 92       	push	r9
    334e:	af 92       	push	r10
    3350:	bf 92       	push	r11
    3352:	cf 92       	push	r12
    3354:	df 92       	push	r13
    3356:	ef 92       	push	r14
    3358:	ff 92       	push	r15
    335a:	0f 93       	push	r16
    335c:	1f 93       	push	r17
    335e:	cf 93       	push	r28
    3360:	df 93       	push	r29
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	ca 1b       	sub	r28, r26
    3368:	db 0b       	sbc	r29, r27
    336a:	0f b6       	in	r0, 0x3f	; 63
    336c:	f8 94       	cli
    336e:	de bf       	out	0x3e, r29	; 62
    3370:	0f be       	out	0x3f, r0	; 63
    3372:	cd bf       	out	0x3d, r28	; 61
    3374:	09 94       	ijmp

00003376 <__epilogue_restores__>:
    3376:	2a 88       	ldd	r2, Y+18	; 0x12
    3378:	39 88       	ldd	r3, Y+17	; 0x11
    337a:	48 88       	ldd	r4, Y+16	; 0x10
    337c:	5f 84       	ldd	r5, Y+15	; 0x0f
    337e:	6e 84       	ldd	r6, Y+14	; 0x0e
    3380:	7d 84       	ldd	r7, Y+13	; 0x0d
    3382:	8c 84       	ldd	r8, Y+12	; 0x0c
    3384:	9b 84       	ldd	r9, Y+11	; 0x0b
    3386:	aa 84       	ldd	r10, Y+10	; 0x0a
    3388:	b9 84       	ldd	r11, Y+9	; 0x09
    338a:	c8 84       	ldd	r12, Y+8	; 0x08
    338c:	df 80       	ldd	r13, Y+7	; 0x07
    338e:	ee 80       	ldd	r14, Y+6	; 0x06
    3390:	fd 80       	ldd	r15, Y+5	; 0x05
    3392:	0c 81       	ldd	r16, Y+4	; 0x04
    3394:	1b 81       	ldd	r17, Y+3	; 0x03
    3396:	aa 81       	ldd	r26, Y+2	; 0x02
    3398:	b9 81       	ldd	r27, Y+1	; 0x01
    339a:	ce 0f       	add	r28, r30
    339c:	d1 1d       	adc	r29, r1
    339e:	0f b6       	in	r0, 0x3f	; 63
    33a0:	f8 94       	cli
    33a2:	de bf       	out	0x3e, r29	; 62
    33a4:	0f be       	out	0x3f, r0	; 63
    33a6:	cd bf       	out	0x3d, r28	; 61
    33a8:	ed 01       	movw	r28, r26
    33aa:	08 95       	ret

000033ac <itoa>:
    33ac:	fb 01       	movw	r30, r22
    33ae:	9f 01       	movw	r18, r30
    33b0:	e8 94       	clt
    33b2:	42 30       	cpi	r20, 0x02	; 2
    33b4:	c4 f0       	brlt	.+48     	; 0x33e6 <itoa+0x3a>
    33b6:	45 32       	cpi	r20, 0x25	; 37
    33b8:	b4 f4       	brge	.+44     	; 0x33e6 <itoa+0x3a>
    33ba:	4a 30       	cpi	r20, 0x0A	; 10
    33bc:	29 f4       	brne	.+10     	; 0x33c8 <itoa+0x1c>
    33be:	97 fb       	bst	r25, 7
    33c0:	1e f4       	brtc	.+6      	; 0x33c8 <itoa+0x1c>
    33c2:	90 95       	com	r25
    33c4:	81 95       	neg	r24
    33c6:	9f 4f       	sbci	r25, 0xFF	; 255
    33c8:	64 2f       	mov	r22, r20
    33ca:	77 27       	eor	r23, r23
    33cc:	0e 94 07 1a 	call	0x340e	; 0x340e <__udivmodhi4>
    33d0:	80 5d       	subi	r24, 0xD0	; 208
    33d2:	8a 33       	cpi	r24, 0x3A	; 58
    33d4:	0c f0       	brlt	.+2      	; 0x33d8 <itoa+0x2c>
    33d6:	89 5d       	subi	r24, 0xD9	; 217
    33d8:	81 93       	st	Z+, r24
    33da:	cb 01       	movw	r24, r22
    33dc:	00 97       	sbiw	r24, 0x00	; 0
    33de:	a1 f7       	brne	.-24     	; 0x33c8 <itoa+0x1c>
    33e0:	16 f4       	brtc	.+4      	; 0x33e6 <itoa+0x3a>
    33e2:	5d e2       	ldi	r21, 0x2D	; 45
    33e4:	51 93       	st	Z+, r21
    33e6:	10 82       	st	Z, r1
    33e8:	c9 01       	movw	r24, r18
    33ea:	0c 94 f7 19 	jmp	0x33ee	; 0x33ee <strrev>

000033ee <strrev>:
    33ee:	dc 01       	movw	r26, r24
    33f0:	fc 01       	movw	r30, r24
    33f2:	67 2f       	mov	r22, r23
    33f4:	71 91       	ld	r23, Z+
    33f6:	77 23       	and	r23, r23
    33f8:	e1 f7       	brne	.-8      	; 0x33f2 <strrev+0x4>
    33fa:	32 97       	sbiw	r30, 0x02	; 2
    33fc:	04 c0       	rjmp	.+8      	; 0x3406 <strrev+0x18>
    33fe:	7c 91       	ld	r23, X
    3400:	6d 93       	st	X+, r22
    3402:	70 83       	st	Z, r23
    3404:	62 91       	ld	r22, -Z
    3406:	ae 17       	cp	r26, r30
    3408:	bf 07       	cpc	r27, r31
    340a:	c8 f3       	brcs	.-14     	; 0x33fe <strrev+0x10>
    340c:	08 95       	ret

0000340e <__udivmodhi4>:
    340e:	aa 1b       	sub	r26, r26
    3410:	bb 1b       	sub	r27, r27
    3412:	51 e1       	ldi	r21, 0x11	; 17
    3414:	07 c0       	rjmp	.+14     	; 0x3424 <__udivmodhi4_ep>

00003416 <__udivmodhi4_loop>:
    3416:	aa 1f       	adc	r26, r26
    3418:	bb 1f       	adc	r27, r27
    341a:	a6 17       	cp	r26, r22
    341c:	b7 07       	cpc	r27, r23
    341e:	10 f0       	brcs	.+4      	; 0x3424 <__udivmodhi4_ep>
    3420:	a6 1b       	sub	r26, r22
    3422:	b7 0b       	sbc	r27, r23

00003424 <__udivmodhi4_ep>:
    3424:	88 1f       	adc	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	5a 95       	dec	r21
    342a:	a9 f7       	brne	.-22     	; 0x3416 <__udivmodhi4_loop>
    342c:	80 95       	com	r24
    342e:	90 95       	com	r25
    3430:	bc 01       	movw	r22, r24
    3432:	cd 01       	movw	r24, r26
    3434:	08 95       	ret

00003436 <_exit>:
    3436:	f8 94       	cli

00003438 <__stop_program>:
    3438:	ff cf       	rjmp	.-2      	; 0x3438 <__stop_program>
