#include<avr/io.h>
#include<avr/interrupt.h>
#include<util/delay.h>
#include "gpio.h"
#include "common_macros.h"
#include "uart.h"
#include "timer.h"
#include "twi.h"
#include "motor.h"
#include "lcd.h"

#define CONTROL_Ready 0xCA
#define HMI_Ready 0xAC
#define CONTROL_ADDRESS 0x01
#define OPEN_DOOR 0x66
#define CHANGE_PASS 0x55
//void initialization (void);
uint8 g_ticks=0;
uint8 password_1[5];
uint8 password_2[5];
uint8 g_matching_flag=0;
typedef enum {Unmatched,Matched}matchig_state;



matchig_state password_state=Matched;
uint8 i;


/*******************************************************************************
 *                      Functions Prototypes                                   *
 *******************************************************************************/
void recive_password(void);
void check_door_pass(void);
void TIMER_ISR_COUNTER(void);
void Change_password(void);
matchig_state password_checking(void);



int main(void)
{
	Timer1_ConfigType TIMER_Configs={0,1000,F_CPU_1024,CTC_MODE};
	UART_ConfigType UART_Configs={_8_bit,no_parity,_1_bit,9600};
	TWI_ConfigType TWI_Configs={CONTROL_ADDRESS,250};
	Timer1_init(&TIMER_Configs);
	UART_init(&UART_Configs);
	TWI_init(&TWI_Configs);
	DcMotor_Init();
	LCD_init();


	recive_password();

	//check_door_pass();
	//uint8 desired_function;

/*=====================================================================*/

while(1){


		UART_sendByte(CONTROL_Ready);
		//desired_function=;
		switch (UART_recieveByte())
		{
		case OPEN_DOOR:check_door_pass();
break;
		case CHANGE_PASS:Change_password();
		break;
		}

	}//End Of while Loop

}// End Of Int Main












/* Create System Password */
void recive_password(void)
{

	do{

		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
		{

			password_1[i]=UART_recieveByte();

		}


		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
		{

			password_2[i]=UART_recieveByte();

		}
		/*test*/
		for(i=0;i<5;i++){
			LCD_intgerToString(password_1[i]);
		}

		LCD_moveCursor(1, 0);
		for(i=0;i<5;i++){
			//LCD_displayCharacter('*');
			LCD_intgerToString(password_2[i]);
		}



		for(i=0;i<5;i++){
			if(password_1[i]!=password_2[i])
			{
				g_matching_flag=0;
				password_state=Unmatched;
				break;

			}

		}

		while(UART_recieveByte()!=HMI_Ready);
		UART_sendByte(password_state);

		if( password_state==Matched)
		{
			g_matching_flag=1;
			for(i=0;i<5;i++)
			{
				EEPROM_writeByte(0x01+i, password_1[i]);
				_delay_ms(10);
			}
		}






	}while(g_matching_flag==0);





}



void check_door_pass(void)
{

	password_checking();

if(password_state==Matched)
	{

	g_ticks=0;
	DcMotor_Rotate(CW,100);
	Timer1_setCallBack(TIMER_ISR_COUNTER);
	while(g_ticks!=15);

	g_ticks=0;
	DcMotor_Rotate(STOP,0);
	Timer1_setCallBack(TIMER_ISR_COUNTER);
	while(g_ticks!=3);

	g_ticks=0;
	DcMotor_Rotate(ANTI_CW,100);
	Timer1_setCallBack(TIMER_ISR_COUNTER);
	while(g_ticks!=15);
	DcMotor_Rotate(STOP,0);
	Timer1_deInit();


	}




	}







void TIMER_ISR_COUNTER(void)
{
	g_ticks++;
}

void Change_password(void)
{
	password_state=Matched; // to be sure that the flag is mached as if it changed so the pass is not identical

	UART_sendByte(CONTROL_Ready);
	for(i=0;i<5;i++)
	{

		password_1[i]=UART_recieveByte();/*I  will use the same two arr to minimize the num of variables*/
	}

		for(i=0;i<5;i++)
		{
			EEPROM_readByte(0x01+i, password_2);//the name of the arr is an address the first postion
			_delay_ms(10);
		}


		for(i=0;i<5;i++){
			if(password_1[i]!=password_2[i])
			{
				//g_matching_flag=0;
				password_state=Unmatched;
				break;

			}

		}

		while(UART_recieveByte()!=HMI_Ready);
		UART_sendByte(password_state);

if(password_state==Matched)
	{
/**/
	}

recive_password();


	}


matchig_state password_checking(void)
{
	password_state=Matched; // to be sure that the flag is mached as if it changed so the pass is not identical

		UART_sendByte(CONTROL_Ready);
		for(i=0;i<5;i++)
		{

			password_1[i]=UART_recieveByte();/*I  will use the same two arr to minimize the num of variables*/
		}

			for(i=0;i<5;i++)
			{
				EEPROM_readByte(0x01+i, password_2);//the name of the arr is an address the first postion
				_delay_ms(10);
			}


			for(i=0;i<5;i++){
				if(password_1[i]!=password_2[i])
				{
					//g_matching_flag=0;
					password_state=Unmatched;
					break;

				}

			}

			while(UART_recieveByte()!=HMI_Ready);
			UART_sendByte(password_state);


			return password_state;
}
